name: Parity Gate - FE-BE API Consistency

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  parity-gate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate OpenAPI spec
      run: |
        cd backend-nest
        npm run audit:openapi

    - name: Generate SDKs
      run: npm run generate:sdks

    - name: Run Parity Gate
      run: node scripts/parity-gate.js

    - name: Upload parity report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: parity-gate-report
        path: parity-gate-report.json

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('parity-gate-report.json', 'utf8'));

          let comment = '## üîç Parity Gate Results\n\n';
          comment += `**Overall Coverage:** ${report.results.reduce((sum, r) => sum + r.parity.coverage, 0) / report.results.length}% \n\n`;

          report.results.forEach(result => {
            comment += `### ${result.frontend}\n`;
            comment += `- Coverage: ${result.parity.coverage.toFixed(1)}%\n`;
            comment += `- Total endpoints: ${result.parity.total}\n`;
            comment += `- Matched: ${result.parity.matched}\n`;
            comment += `- Unmatched: ${result.parity.unmatched}\n`;

            if (result.parity.unmatched > 0) {
              comment += '\n**Unmatched endpoints:**\n';
              result.parity.unmatchedEndpoints.slice(0, 10).forEach(endpoint => {
                comment += `- ${endpoint}\n`;
              });
              if (result.parity.unmatchedEndpoints.length > 10) {
                comment += `- ... and ${result.parity.unmatchedEndpoints.length - 10} more\n`;
              }
            }
            comment += '\n';
          });

          if (!report.success) {
            comment += '‚ùå **Parity Gate Failed** - Too many API gaps detected!\n';
            comment += 'Please ensure all frontend API calls have corresponding backend endpoints.\n';
          } else {
            comment += '‚úÖ **Parity Gate Passed** - API consistency maintained!\n';
          }

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
