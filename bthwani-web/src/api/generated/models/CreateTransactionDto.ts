/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateTransactionDto
 */
export interface CreateTransactionDto {
    /**
     * معرف المستخدم
     * @type {string}
     * @memberof CreateTransactionDto
     */
    userId: string;
    /**
     * نوع النموذج
     * @type {string}
     * @memberof CreateTransactionDto
     */
    userModel: CreateTransactionDtoUserModelEnum;
    /**
     * المبلغ
     * @type {number}
     * @memberof CreateTransactionDto
     */
    amount: number;
    /**
     * نوع العملية
     * @type {string}
     * @memberof CreateTransactionDto
     */
    type: CreateTransactionDtoTypeEnum;
    /**
     * طريقة الدفع
     * @type {string}
     * @memberof CreateTransactionDto
     */
    method: CreateTransactionDtoMethodEnum;
    /**
     * الوصف
     * @type {string}
     * @memberof CreateTransactionDto
     */
    description?: string;
    /**
     * رقم مرجعي بنكي
     * @type {string}
     * @memberof CreateTransactionDto
     */
    bankRef?: string;
    /**
     * بيانات إضافية
     * @type {object}
     * @memberof CreateTransactionDto
     */
    meta?: object;
}


/**
 * @export
 */
export const CreateTransactionDtoUserModelEnum = {
    User: 'User',
    Driver: 'Driver'
} as const;
export type CreateTransactionDtoUserModelEnum = typeof CreateTransactionDtoUserModelEnum[keyof typeof CreateTransactionDtoUserModelEnum];

/**
 * @export
 */
export const CreateTransactionDtoTypeEnum = {
    Credit: 'credit',
    Debit: 'debit'
} as const;
export type CreateTransactionDtoTypeEnum = typeof CreateTransactionDtoTypeEnum[keyof typeof CreateTransactionDtoTypeEnum];

/**
 * @export
 */
export const CreateTransactionDtoMethodEnum = {
    Agent: 'agent',
    Card: 'card',
    Transfer: 'transfer',
    Payment: 'payment',
    Escrow: 'escrow',
    Reward: 'reward',
    Kuraimi: 'kuraimi',
    Withdrawal: 'withdrawal'
} as const;
export type CreateTransactionDtoMethodEnum = typeof CreateTransactionDtoMethodEnum[keyof typeof CreateTransactionDtoMethodEnum];


/**
 * Check if a given object implements the CreateTransactionDto interface.
 */
export function instanceOfCreateTransactionDto(value: object): value is CreateTransactionDto {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('userModel' in value) || value['userModel'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    return true;
}

export function CreateTransactionDtoFromJSON(json: any): CreateTransactionDto {
    return CreateTransactionDtoFromJSONTyped(json, false);
}

export function CreateTransactionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateTransactionDto {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'],
        'userModel': json['userModel'],
        'amount': json['amount'],
        'type': json['type'],
        'method': json['method'],
        'description': json['description'] == null ? undefined : json['description'],
        'bankRef': json['bankRef'] == null ? undefined : json['bankRef'],
        'meta': json['meta'] == null ? undefined : json['meta'],
    };
}

export function CreateTransactionDtoToJSON(json: any): CreateTransactionDto {
    return CreateTransactionDtoToJSONTyped(json, false);
}

export function CreateTransactionDtoToJSONTyped(value?: CreateTransactionDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'userModel': value['userModel'],
        'amount': value['amount'],
        'type': value['type'],
        'method': value['method'],
        'description': value['description'],
        'bankRef': value['bankRef'],
        'meta': value['meta'],
    };
}

