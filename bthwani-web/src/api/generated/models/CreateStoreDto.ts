/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationDto } from './LocationDto';
import {
    LocationDtoFromJSON,
    LocationDtoFromJSONTyped,
    LocationDtoToJSON,
    LocationDtoToJSONTyped,
} from './LocationDto';

/**
 * 
 * @export
 * @interface CreateStoreDto
 */
export interface CreateStoreDto {
    /**
     * اسم المتجر
     * @type {string}
     * @memberof CreateStoreDto
     */
    name: string;
    /**
     * الاسم بالعربي
     * @type {string}
     * @memberof CreateStoreDto
     */
    nameAr?: string;
    /**
     * الاسم بالإنجليزي
     * @type {string}
     * @memberof CreateStoreDto
     */
    nameEn?: string;
    /**
     * العنوان
     * @type {string}
     * @memberof CreateStoreDto
     */
    address: string;
    /**
     * الموقع
     * @type {LocationDto}
     * @memberof CreateStoreDto
     */
    location: LocationDto;
    /**
     * معرف الفئة
     * @type {string}
     * @memberof CreateStoreDto
     */
    category?: string;
    /**
     * صورة المتجر
     * @type {string}
     * @memberof CreateStoreDto
     */
    image?: string;
    /**
     * الشعار
     * @type {string}
     * @memberof CreateStoreDto
     */
    logo?: string;
    /**
     * نسبة العمولة
     * @type {number}
     * @memberof CreateStoreDto
     */
    commissionRate?: number;
    /**
     * نوع المتجر
     * @type {string}
     * @memberof CreateStoreDto
     */
    usageType?: CreateStoreDtoUsageTypeEnum;
    /**
     * الوسوم
     * @type {Array<string>}
     * @memberof CreateStoreDto
     */
    tags?: Array<string>;
}


/**
 * @export
 */
export const CreateStoreDtoUsageTypeEnum = {
    Restaurant: 'restaurant',
    Grocery: 'grocery',
    Pharmacy: 'pharmacy',
    Bakery: 'bakery',
    Cafe: 'cafe',
    Other: 'other'
} as const;
export type CreateStoreDtoUsageTypeEnum = typeof CreateStoreDtoUsageTypeEnum[keyof typeof CreateStoreDtoUsageTypeEnum];


/**
 * Check if a given object implements the CreateStoreDto interface.
 */
export function instanceOfCreateStoreDto(value: object): value is CreateStoreDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    return true;
}

export function CreateStoreDtoFromJSON(json: any): CreateStoreDto {
    return CreateStoreDtoFromJSONTyped(json, false);
}

export function CreateStoreDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateStoreDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'nameAr': json['name_ar'] == null ? undefined : json['name_ar'],
        'nameEn': json['name_en'] == null ? undefined : json['name_en'],
        'address': json['address'],
        'location': LocationDtoFromJSON(json['location']),
        'category': json['category'] == null ? undefined : json['category'],
        'image': json['image'] == null ? undefined : json['image'],
        'logo': json['logo'] == null ? undefined : json['logo'],
        'commissionRate': json['commissionRate'] == null ? undefined : json['commissionRate'],
        'usageType': json['usageType'] == null ? undefined : json['usageType'],
        'tags': json['tags'] == null ? undefined : json['tags'],
    };
}

export function CreateStoreDtoToJSON(json: any): CreateStoreDto {
    return CreateStoreDtoToJSONTyped(json, false);
}

export function CreateStoreDtoToJSONTyped(value?: CreateStoreDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'name_ar': value['nameAr'],
        'name_en': value['nameEn'],
        'address': value['address'],
        'location': LocationDtoToJSON(value['location']),
        'category': value['category'],
        'image': value['image'],
        'logo': value['logo'],
        'commissionRate': value['commissionRate'],
        'usageType': value['usageType'],
        'tags': value['tags'],
    };
}

