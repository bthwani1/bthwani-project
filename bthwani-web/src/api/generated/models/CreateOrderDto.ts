/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OrderItemDto } from './OrderItemDto';
import {
    OrderItemDtoFromJSON,
    OrderItemDtoFromJSONTyped,
    OrderItemDtoToJSON,
    OrderItemDtoToJSONTyped,
} from './OrderItemDto';
import type { AddressDto } from './AddressDto';
import {
    AddressDtoFromJSON,
    AddressDtoFromJSONTyped,
    AddressDtoToJSON,
    AddressDtoToJSONTyped,
} from './AddressDto';

/**
 * 
 * @export
 * @interface CreateOrderDto
 */
export interface CreateOrderDto {
    /**
     * معرف المستخدم
     * @type {string}
     * @memberof CreateOrderDto
     */
    user: string;
    /**
     * عناصر الطلب
     * @type {Array<OrderItemDto>}
     * @memberof CreateOrderDto
     */
    items: Array<OrderItemDto>;
    /**
     * إجمالي السعر
     * @type {number}
     * @memberof CreateOrderDto
     */
    price: number;
    /**
     * رسوم التوصيل
     * @type {number}
     * @memberof CreateOrderDto
     */
    deliveryFee: number;
    /**
     * حصة الشركة
     * @type {number}
     * @memberof CreateOrderDto
     */
    companyShare: number;
    /**
     * حصة المنصة
     * @type {number}
     * @memberof CreateOrderDto
     */
    platformShare: number;
    /**
     * العنوان
     * @type {AddressDto}
     * @memberof CreateOrderDto
     */
    address: AddressDto;
    /**
     * طريقة الدفع
     * @type {string}
     * @memberof CreateOrderDto
     */
    paymentMethod: CreateOrderDtoPaymentMethodEnum;
    /**
     * نوع الطلب
     * @type {string}
     * @memberof CreateOrderDto
     */
    orderType: CreateOrderDtoOrderTypeEnum;
    /**
     * المبلغ المستخدم من المحفظة
     * @type {number}
     * @memberof CreateOrderDto
     */
    walletUsed?: number;
    /**
     * المبلغ المتبقي كاش
     * @type {number}
     * @memberof CreateOrderDto
     */
    cashDue?: number;
}


/**
 * @export
 */
export const CreateOrderDtoPaymentMethodEnum = {
    Cash: 'cash',
    Wallet: 'wallet',
    Card: 'card',
    Mixed: 'mixed'
} as const;
export type CreateOrderDtoPaymentMethodEnum = typeof CreateOrderDtoPaymentMethodEnum[keyof typeof CreateOrderDtoPaymentMethodEnum];

/**
 * @export
 */
export const CreateOrderDtoOrderTypeEnum = {
    Marketplace: 'marketplace',
    Errand: 'errand',
    Utility: 'utility'
} as const;
export type CreateOrderDtoOrderTypeEnum = typeof CreateOrderDtoOrderTypeEnum[keyof typeof CreateOrderDtoOrderTypeEnum];


/**
 * Check if a given object implements the CreateOrderDto interface.
 */
export function instanceOfCreateOrderDto(value: object): value is CreateOrderDto {
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('items' in value) || value['items'] === undefined) return false;
    if (!('price' in value) || value['price'] === undefined) return false;
    if (!('deliveryFee' in value) || value['deliveryFee'] === undefined) return false;
    if (!('companyShare' in value) || value['companyShare'] === undefined) return false;
    if (!('platformShare' in value) || value['platformShare'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('paymentMethod' in value) || value['paymentMethod'] === undefined) return false;
    if (!('orderType' in value) || value['orderType'] === undefined) return false;
    return true;
}

export function CreateOrderDtoFromJSON(json: any): CreateOrderDto {
    return CreateOrderDtoFromJSONTyped(json, false);
}

export function CreateOrderDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateOrderDto {
    if (json == null) {
        return json;
    }
    return {
        
        'user': json['user'],
        'items': ((json['items'] as Array<any>).map(OrderItemDtoFromJSON)),
        'price': json['price'],
        'deliveryFee': json['deliveryFee'],
        'companyShare': json['companyShare'],
        'platformShare': json['platformShare'],
        'address': AddressDtoFromJSON(json['address']),
        'paymentMethod': json['paymentMethod'],
        'orderType': json['orderType'],
        'walletUsed': json['walletUsed'] == null ? undefined : json['walletUsed'],
        'cashDue': json['cashDue'] == null ? undefined : json['cashDue'],
    };
}

export function CreateOrderDtoToJSON(json: any): CreateOrderDto {
    return CreateOrderDtoToJSONTyped(json, false);
}

export function CreateOrderDtoToJSONTyped(value?: CreateOrderDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': value['user'],
        'items': ((value['items'] as Array<any>).map(OrderItemDtoToJSON)),
        'price': value['price'],
        'deliveryFee': value['deliveryFee'],
        'companyShare': value['companyShare'],
        'platformShare': value['platformShare'],
        'address': AddressDtoToJSON(value['address']),
        'paymentMethod': value['paymentMethod'],
        'orderType': value['orderType'],
        'walletUsed': value['walletUsed'],
        'cashDue': value['cashDue'],
    };
}

