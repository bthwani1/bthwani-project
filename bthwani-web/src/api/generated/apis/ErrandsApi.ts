/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ErrandsControllerCreateErrandOrderRequest {
    body: object;
}

export interface ErrandsControllerGetAvailableDriversRequest {
    lat?: number;
    lng?: number;
}

export interface ErrandsControllerGetErrandRequest {
    id: string;
}

export interface ErrandsControllerGetUserErrandsRequest {
    id: string;
    status: string;
}

/**
 * ErrandsApi - interface
 * 
 * @export
 * @interface ErrandsApiInterface
 */
export interface ErrandsApiInterface {
    /**
     * 
     * @summary إنشاء طلب مهمة
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrandsApiInterface
     */
    errandsControllerCreateErrandOrderRaw(requestParameters: ErrandsControllerCreateErrandOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء طلب مهمة
     */
    errandsControllerCreateErrandOrder(requestParameters: ErrandsControllerCreateErrandOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary السائقون المتاحون
     * @param {number} [lat] 
     * @param {number} [lng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrandsApiInterface
     */
    errandsControllerGetAvailableDriversRaw(requestParameters: ErrandsControllerGetAvailableDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * السائقون المتاحون
     */
    errandsControllerGetAvailableDrivers(requestParameters: ErrandsControllerGetAvailableDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على مهمة محددة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrandsApiInterface
     */
    errandsControllerGetErrandRaw(requestParameters: ErrandsControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على مهمة محددة
     */
    errandsControllerGetErrand(requestParameters: ErrandsControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary فئات المهام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrandsApiInterface
     */
    errandsControllerGetErrandCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * فئات المهام
     */
    errandsControllerGetErrandCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلبات المستخدم
     * @param {string} id 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ErrandsApiInterface
     */
    errandsControllerGetUserErrandsRaw(requestParameters: ErrandsControllerGetUserErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلبات المستخدم
     */
    errandsControllerGetUserErrands(requestParameters: ErrandsControllerGetUserErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ErrandsApi extends runtime.BaseAPI implements ErrandsApiInterface {

    /**
     * إنشاء طلب مهمة
     */
    async errandsControllerCreateErrandOrderRaw(requestParameters: ErrandsControllerCreateErrandOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling errandsControllerCreateErrandOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/errands/order`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء طلب مهمة
     */
    async errandsControllerCreateErrandOrder(requestParameters: ErrandsControllerCreateErrandOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.errandsControllerCreateErrandOrderRaw(requestParameters, initOverrides);
    }

    /**
     * السائقون المتاحون
     */
    async errandsControllerGetAvailableDriversRaw(requestParameters: ErrandsControllerGetAvailableDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['lat'] != null) {
            queryParameters['lat'] = requestParameters['lat'];
        }

        if (requestParameters['lng'] != null) {
            queryParameters['lng'] = requestParameters['lng'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/errands/drivers/available`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * السائقون المتاحون
     */
    async errandsControllerGetAvailableDrivers(requestParameters: ErrandsControllerGetAvailableDriversRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.errandsControllerGetAvailableDriversRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على مهمة محددة
     */
    async errandsControllerGetErrandRaw(requestParameters: ErrandsControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling errandsControllerGetErrand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/errands/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على مهمة محددة
     */
    async errandsControllerGetErrand(requestParameters: ErrandsControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.errandsControllerGetErrandRaw(requestParameters, initOverrides);
    }

    /**
     * فئات المهام
     */
    async errandsControllerGetErrandCategoriesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/errands/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * فئات المهام
     */
    async errandsControllerGetErrandCategories(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.errandsControllerGetErrandCategoriesRaw(initOverrides);
    }

    /**
     * طلبات المستخدم
     */
    async errandsControllerGetUserErrandsRaw(requestParameters: ErrandsControllerGetUserErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling errandsControllerGetUserErrands().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling errandsControllerGetUserErrands().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/errands/user/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلبات المستخدم
     */
    async errandsControllerGetUserErrands(requestParameters: ErrandsControllerGetUserErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.errandsControllerGetUserErrandsRaw(requestParameters, initOverrides);
    }

}
