/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrderDto,
  UpdateOrderStatusDto,
} from '../models/index';
import {
    CreateOrderDtoFromJSON,
    CreateOrderDtoToJSON,
    UpdateOrderStatusDtoFromJSON,
    UpdateOrderStatusDtoToJSON,
} from '../models/index';

export interface OrderCqrsControllerAssignDriverRequest {
    id: string;
}

export interface OrderCqrsControllerCancelRequest {
    id: string;
}

export interface OrderCqrsControllerCreateRequest {
    createOrderDto: CreateOrderDto;
}

export interface OrderCqrsControllerFindOneRequest {
    id: string;
}

export interface OrderCqrsControllerFindUserOrdersRequest {
    cursor?: string;
    limit?: number;
}

export interface OrderCqrsControllerUpdateStatusRequest {
    id: string;
    updateOrderStatusDto: UpdateOrderStatusDto;
}

/**
 * OrdersCQRSApi - interface
 * 
 * @export
 * @interface OrdersCQRSApiInterface
 */
export interface OrdersCQRSApiInterface {
    /**
     * 
     * @summary تعيين سائق للطلب (CQRS)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCQRSApiInterface
     */
    orderCqrsControllerAssignDriverRaw(requestParameters: OrderCqrsControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعيين سائق للطلب (CQRS)
     */
    orderCqrsControllerAssignDriver(requestParameters: OrderCqrsControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء طلب (CQRS)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCQRSApiInterface
     */
    orderCqrsControllerCancelRaw(requestParameters: OrderCqrsControllerCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء طلب (CQRS)
     */
    orderCqrsControllerCancel(requestParameters: OrderCqrsControllerCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * ينشئ طلب جديد باستخدام CQRS Pattern
     * @summary إنشاء طلب جديد (CQRS)
     * @param {CreateOrderDto} createOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCQRSApiInterface
     */
    orderCqrsControllerCreateRaw(requestParameters: OrderCqrsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ينشئ طلب جديد باستخدام CQRS Pattern
     * إنشاء طلب جديد (CQRS)
     */
    orderCqrsControllerCreate(requestParameters: OrderCqrsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب طلب محدد (CQRS)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCQRSApiInterface
     */
    orderCqrsControllerFindOneRaw(requestParameters: OrderCqrsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب طلب محدد (CQRS)
     */
    orderCqrsControllerFindOne(requestParameters: OrderCqrsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب طلبات المستخدم (CQRS)
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCQRSApiInterface
     */
    orderCqrsControllerFindUserOrdersRaw(requestParameters: OrderCqrsControllerFindUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب طلبات المستخدم (CQRS)
     */
    orderCqrsControllerFindUserOrders(requestParameters: OrderCqrsControllerFindUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث حالة طلب (CQRS)
     * @param {string} id 
     * @param {UpdateOrderStatusDto} updateOrderStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersCQRSApiInterface
     */
    orderCqrsControllerUpdateStatusRaw(requestParameters: OrderCqrsControllerUpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث حالة طلب (CQRS)
     */
    orderCqrsControllerUpdateStatus(requestParameters: OrderCqrsControllerUpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class OrdersCQRSApi extends runtime.BaseAPI implements OrdersCQRSApiInterface {

    /**
     * تعيين سائق للطلب (CQRS)
     */
    async orderCqrsControllerAssignDriverRaw(requestParameters: OrderCqrsControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderCqrsControllerAssignDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders-cqrs/{id}/assign-driver`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعيين سائق للطلب (CQRS)
     */
    async orderCqrsControllerAssignDriver(requestParameters: OrderCqrsControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderCqrsControllerAssignDriverRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء طلب (CQRS)
     */
    async orderCqrsControllerCancelRaw(requestParameters: OrderCqrsControllerCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderCqrsControllerCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders-cqrs/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء طلب (CQRS)
     */
    async orderCqrsControllerCancel(requestParameters: OrderCqrsControllerCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderCqrsControllerCancelRaw(requestParameters, initOverrides);
    }

    /**
     * ينشئ طلب جديد باستخدام CQRS Pattern
     * إنشاء طلب جديد (CQRS)
     */
    async orderCqrsControllerCreateRaw(requestParameters: OrderCqrsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createOrderDto'] == null) {
            throw new runtime.RequiredError(
                'createOrderDto',
                'Required parameter "createOrderDto" was null or undefined when calling orderCqrsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orders-cqrs`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderDtoToJSON(requestParameters['createOrderDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ينشئ طلب جديد باستخدام CQRS Pattern
     * إنشاء طلب جديد (CQRS)
     */
    async orderCqrsControllerCreate(requestParameters: OrderCqrsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderCqrsControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * جلب طلب محدد (CQRS)
     */
    async orderCqrsControllerFindOneRaw(requestParameters: OrderCqrsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderCqrsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders-cqrs/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب طلب محدد (CQRS)
     */
    async orderCqrsControllerFindOne(requestParameters: OrderCqrsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderCqrsControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * جلب طلبات المستخدم (CQRS)
     */
    async orderCqrsControllerFindUserOrdersRaw(requestParameters: OrderCqrsControllerFindUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/orders-cqrs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب طلبات المستخدم (CQRS)
     */
    async orderCqrsControllerFindUserOrders(requestParameters: OrderCqrsControllerFindUserOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderCqrsControllerFindUserOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث حالة طلب (CQRS)
     */
    async orderCqrsControllerUpdateStatusRaw(requestParameters: OrderCqrsControllerUpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderCqrsControllerUpdateStatus().'
            );
        }

        if (requestParameters['updateOrderStatusDto'] == null) {
            throw new runtime.RequiredError(
                'updateOrderStatusDto',
                'Required parameter "updateOrderStatusDto" was null or undefined when calling orderCqrsControllerUpdateStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/orders-cqrs/{id}/status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrderStatusDtoToJSON(requestParameters['updateOrderStatusDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث حالة طلب (CQRS)
     */
    async orderCqrsControllerUpdateStatus(requestParameters: OrderCqrsControllerUpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderCqrsControllerUpdateStatusRaw(requestParameters, initOverrides);
    }

}
