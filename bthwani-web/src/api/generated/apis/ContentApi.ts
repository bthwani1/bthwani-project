/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContentControllerCancelSubscriptionRequest,
  ContentControllerCreateCMSPageRequest,
  ContentControllerCreateFAQRequest,
  ContentControllerUpdateAppSettingsRequest,
  CreateBannerDto,
  CreateStoreSectionDto,
} from '../models/index';
import {
    ContentControllerCancelSubscriptionRequestFromJSON,
    ContentControllerCancelSubscriptionRequestToJSON,
    ContentControllerCreateCMSPageRequestFromJSON,
    ContentControllerCreateCMSPageRequestToJSON,
    ContentControllerCreateFAQRequestFromJSON,
    ContentControllerCreateFAQRequestToJSON,
    ContentControllerUpdateAppSettingsRequestFromJSON,
    ContentControllerUpdateAppSettingsRequestToJSON,
    CreateBannerDtoFromJSON,
    CreateBannerDtoToJSON,
    CreateStoreSectionDtoFromJSON,
    CreateStoreSectionDtoToJSON,
} from '../models/index';

export interface ContentControllerCancelSubscriptionOperationRequest {
    contentControllerCancelSubscriptionRequest: ContentControllerCancelSubscriptionRequest;
}

export interface ContentControllerCreateBannerRequest {
    createBannerDto: CreateBannerDto;
}

export interface ContentControllerCreateCMSPageOperationRequest {
    contentControllerCreateCMSPageRequest: ContentControllerCreateCMSPageRequest;
}

export interface ContentControllerCreateFAQOperationRequest {
    contentControllerCreateFAQRequest: ContentControllerCreateFAQRequest;
}

export interface ContentControllerCreateStoreSectionRequest {
    createStoreSectionDto: CreateStoreSectionDto;
}

export interface ContentControllerCreateSubscriptionPlanRequest {
    body: object;
}

export interface ContentControllerDeleteBannerRequest {
    id: string;
}

export interface ContentControllerDeleteFAQRequest {
    id: string;
}

export interface ContentControllerDeleteStoreSectionRequest {
    id: string;
}

export interface ContentControllerGetActiveBannersRequest {
    placement: string;
}

export interface ContentControllerGetCMSPageBySlugRequest {
    slug: string;
}

export interface ContentControllerGetCMSPagesRequest {
    type: string;
}

export interface ContentControllerGetFAQsRequest {
    category: string;
}

export interface ContentControllerGetStoreSectionsRequest {
    storeId: string;
}

export interface ContentControllerRecordBannerClickRequest {
    id: string;
}

export interface ContentControllerSubscribeRequest {
    body: object;
}

export interface ContentControllerUpdateAppSettingsOperationRequest {
    contentControllerUpdateAppSettingsRequest: ContentControllerUpdateAppSettingsRequest;
}

export interface ContentControllerUpdateBannerRequest {
    id: string;
    body: object;
}

export interface ContentControllerUpdateCMSPageRequest {
    id: string;
}

export interface ContentControllerUpdateFAQRequest {
    id: string;
}

export interface ContentControllerUpdateStoreSectionRequest {
    id: string;
    body: object;
}

/**
 * ContentApi - interface
 * 
 * @export
 * @interface ContentApiInterface
 */
export interface ContentApiInterface {
    /**
     * 
     * @summary إلغاء الاشتراك
     * @param {ContentControllerCancelSubscriptionRequest} contentControllerCancelSubscriptionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCancelSubscriptionRaw(requestParameters: ContentControllerCancelSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء الاشتراك
     */
    contentControllerCancelSubscription(requestParameters: ContentControllerCancelSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء بانر جديد
     * @param {CreateBannerDto} createBannerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCreateBannerRaw(requestParameters: ContentControllerCreateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء بانر جديد
     */
    contentControllerCreateBanner(requestParameters: ContentControllerCreateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء صفحة CMS
     * @param {ContentControllerCreateCMSPageRequest} contentControllerCreateCMSPageRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCreateCMSPageRaw(requestParameters: ContentControllerCreateCMSPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء صفحة CMS
     */
    contentControllerCreateCMSPage(requestParameters: ContentControllerCreateCMSPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة سؤال شائع
     * @param {ContentControllerCreateFAQRequest} contentControllerCreateFAQRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCreateFAQRaw(requestParameters: ContentControllerCreateFAQOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة سؤال شائع
     */
    contentControllerCreateFAQ(requestParameters: ContentControllerCreateFAQOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء قسم متجر
     * @param {CreateStoreSectionDto} createStoreSectionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCreateStoreSectionRaw(requestParameters: ContentControllerCreateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء قسم متجر
     */
    contentControllerCreateStoreSection(requestParameters: ContentControllerCreateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء خطة اشتراك
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerCreateSubscriptionPlanRaw(requestParameters: ContentControllerCreateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء خطة اشتراك
     */
    contentControllerCreateSubscriptionPlan(requestParameters: ContentControllerCreateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف بانر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerDeleteBannerRaw(requestParameters: ContentControllerDeleteBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف بانر
     */
    contentControllerDeleteBanner(requestParameters: ContentControllerDeleteBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف سؤال شائع
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerDeleteFAQRaw(requestParameters: ContentControllerDeleteFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف سؤال شائع
     */
    contentControllerDeleteFAQ(requestParameters: ContentControllerDeleteFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف قسم
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerDeleteStoreSectionRaw(requestParameters: ContentControllerDeleteStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف قسم
     */
    contentControllerDeleteStoreSection(requestParameters: ContentControllerDeleteStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على البانرات النشطة (public)
     * @param {string} placement 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetActiveBannersRaw(requestParameters: ContentControllerGetActiveBannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على البانرات النشطة (public)
     */
    contentControllerGetActiveBanners(requestParameters: ContentControllerGetActiveBannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary كل البانرات (admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetAllBannersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * كل البانرات (admin)
     */
    contentControllerGetAllBanners(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إعدادات التطبيق (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetAppSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إعدادات التطبيق (public)
     */
    contentControllerGetAppSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على صفحة CMS بالـ slug
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetCMSPageBySlugRaw(requestParameters: ContentControllerGetCMSPageBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على صفحة CMS بالـ slug
     */
    contentControllerGetCMSPageBySlug(requestParameters: ContentControllerGetCMSPageBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على صفحات CMS (public)
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetCMSPagesRaw(requestParameters: ContentControllerGetCMSPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على صفحات CMS (public)
     */
    contentControllerGetCMSPages(requestParameters: ContentControllerGetCMSPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الأسئلة الشائعة (public)
     * @param {string} category 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetFAQsRaw(requestParameters: ContentControllerGetFAQsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الأسئلة الشائعة (public)
     */
    contentControllerGetFAQs(requestParameters: ContentControllerGetFAQsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على اشتراكي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetMySubscriptionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على اشتراكي
     */
    contentControllerGetMySubscription(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على أقسام المتجر (public)
     * @param {string} storeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetStoreSectionsRaw(requestParameters: ContentControllerGetStoreSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على أقسام المتجر (public)
     */
    contentControllerGetStoreSections(requestParameters: ContentControllerGetStoreSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على خطط الاشتراك (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerGetSubscriptionPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على خطط الاشتراك (public)
     */
    contentControllerGetSubscriptionPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل نقرة على بانر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerRecordBannerClickRaw(requestParameters: ContentControllerRecordBannerClickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل نقرة على بانر
     */
    contentControllerRecordBannerClick(requestParameters: ContentControllerRecordBannerClickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الاشتراك في خطة
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerSubscribeRaw(requestParameters: ContentControllerSubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الاشتراك في خطة
     */
    contentControllerSubscribe(requestParameters: ContentControllerSubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث إعدادات التطبيق
     * @param {ContentControllerUpdateAppSettingsRequest} contentControllerUpdateAppSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerUpdateAppSettingsRaw(requestParameters: ContentControllerUpdateAppSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث إعدادات التطبيق
     */
    contentControllerUpdateAppSettings(requestParameters: ContentControllerUpdateAppSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث بانر
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerUpdateBannerRaw(requestParameters: ContentControllerUpdateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث بانر
     */
    contentControllerUpdateBanner(requestParameters: ContentControllerUpdateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث صفحة CMS
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerUpdateCMSPageRaw(requestParameters: ContentControllerUpdateCMSPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث صفحة CMS
     */
    contentControllerUpdateCMSPage(requestParameters: ContentControllerUpdateCMSPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث سؤال شائع
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerUpdateFAQRaw(requestParameters: ContentControllerUpdateFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث سؤال شائع
     */
    contentControllerUpdateFAQ(requestParameters: ContentControllerUpdateFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث قسم
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApiInterface
     */
    contentControllerUpdateStoreSectionRaw(requestParameters: ContentControllerUpdateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث قسم
     */
    contentControllerUpdateStoreSection(requestParameters: ContentControllerUpdateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ContentApi extends runtime.BaseAPI implements ContentApiInterface {

    /**
     * إلغاء الاشتراك
     */
    async contentControllerCancelSubscriptionRaw(requestParameters: ContentControllerCancelSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contentControllerCancelSubscriptionRequest'] == null) {
            throw new runtime.RequiredError(
                'contentControllerCancelSubscriptionRequest',
                'Required parameter "contentControllerCancelSubscriptionRequest" was null or undefined when calling contentControllerCancelSubscription().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/my-subscription/cancel`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContentControllerCancelSubscriptionRequestToJSON(requestParameters['contentControllerCancelSubscriptionRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء الاشتراك
     */
    async contentControllerCancelSubscription(requestParameters: ContentControllerCancelSubscriptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerCancelSubscriptionRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء بانر جديد
     */
    async contentControllerCreateBannerRaw(requestParameters: ContentControllerCreateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createBannerDto'] == null) {
            throw new runtime.RequiredError(
                'createBannerDto',
                'Required parameter "createBannerDto" was null or undefined when calling contentControllerCreateBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/banners`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBannerDtoToJSON(requestParameters['createBannerDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء بانر جديد
     */
    async contentControllerCreateBanner(requestParameters: ContentControllerCreateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerCreateBannerRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء صفحة CMS
     */
    async contentControllerCreateCMSPageRaw(requestParameters: ContentControllerCreateCMSPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contentControllerCreateCMSPageRequest'] == null) {
            throw new runtime.RequiredError(
                'contentControllerCreateCMSPageRequest',
                'Required parameter "contentControllerCreateCMSPageRequest" was null or undefined when calling contentControllerCreateCMSPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/pages`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentControllerCreateCMSPageRequestToJSON(requestParameters['contentControllerCreateCMSPageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء صفحة CMS
     */
    async contentControllerCreateCMSPage(requestParameters: ContentControllerCreateCMSPageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerCreateCMSPageRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة سؤال شائع
     */
    async contentControllerCreateFAQRaw(requestParameters: ContentControllerCreateFAQOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contentControllerCreateFAQRequest'] == null) {
            throw new runtime.RequiredError(
                'contentControllerCreateFAQRequest',
                'Required parameter "contentControllerCreateFAQRequest" was null or undefined when calling contentControllerCreateFAQ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/faqs`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentControllerCreateFAQRequestToJSON(requestParameters['contentControllerCreateFAQRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة سؤال شائع
     */
    async contentControllerCreateFAQ(requestParameters: ContentControllerCreateFAQOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerCreateFAQRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء قسم متجر
     */
    async contentControllerCreateStoreSectionRaw(requestParameters: ContentControllerCreateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createStoreSectionDto'] == null) {
            throw new runtime.RequiredError(
                'createStoreSectionDto',
                'Required parameter "createStoreSectionDto" was null or undefined when calling contentControllerCreateStoreSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/sections`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStoreSectionDtoToJSON(requestParameters['createStoreSectionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء قسم متجر
     */
    async contentControllerCreateStoreSection(requestParameters: ContentControllerCreateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerCreateStoreSectionRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء خطة اشتراك
     */
    async contentControllerCreateSubscriptionPlanRaw(requestParameters: ContentControllerCreateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling contentControllerCreateSubscriptionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/subscription-plans`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء خطة اشتراك
     */
    async contentControllerCreateSubscriptionPlan(requestParameters: ContentControllerCreateSubscriptionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerCreateSubscriptionPlanRaw(requestParameters, initOverrides);
    }

    /**
     * حذف بانر
     */
    async contentControllerDeleteBannerRaw(requestParameters: ContentControllerDeleteBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerDeleteBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/banners/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف بانر
     */
    async contentControllerDeleteBanner(requestParameters: ContentControllerDeleteBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerDeleteBannerRaw(requestParameters, initOverrides);
    }

    /**
     * حذف سؤال شائع
     */
    async contentControllerDeleteFAQRaw(requestParameters: ContentControllerDeleteFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerDeleteFAQ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/faqs/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف سؤال شائع
     */
    async contentControllerDeleteFAQ(requestParameters: ContentControllerDeleteFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerDeleteFAQRaw(requestParameters, initOverrides);
    }

    /**
     * حذف قسم
     */
    async contentControllerDeleteStoreSectionRaw(requestParameters: ContentControllerDeleteStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerDeleteStoreSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/sections/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف قسم
     */
    async contentControllerDeleteStoreSection(requestParameters: ContentControllerDeleteStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerDeleteStoreSectionRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على البانرات النشطة (public)
     */
    async contentControllerGetActiveBannersRaw(requestParameters: ContentControllerGetActiveBannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['placement'] == null) {
            throw new runtime.RequiredError(
                'placement',
                'Required parameter "placement" was null or undefined when calling contentControllerGetActiveBanners().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['placement'] != null) {
            queryParameters['placement'] = requestParameters['placement'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/banners`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على البانرات النشطة (public)
     */
    async contentControllerGetActiveBanners(requestParameters: ContentControllerGetActiveBannersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetActiveBannersRaw(requestParameters, initOverrides);
    }

    /**
     * كل البانرات (admin)
     */
    async contentControllerGetAllBannersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/banners`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * كل البانرات (admin)
     */
    async contentControllerGetAllBanners(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetAllBannersRaw(initOverrides);
    }

    /**
     * إعدادات التطبيق (public)
     */
    async contentControllerGetAppSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/app-settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إعدادات التطبيق (public)
     */
    async contentControllerGetAppSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetAppSettingsRaw(initOverrides);
    }

    /**
     * الحصول على صفحة CMS بالـ slug
     */
    async contentControllerGetCMSPageBySlugRaw(requestParameters: ContentControllerGetCMSPageBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling contentControllerGetCMSPageBySlug().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/pages/{slug}`;
        urlPath = urlPath.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على صفحة CMS بالـ slug
     */
    async contentControllerGetCMSPageBySlug(requestParameters: ContentControllerGetCMSPageBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetCMSPageBySlugRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على صفحات CMS (public)
     */
    async contentControllerGetCMSPagesRaw(requestParameters: ContentControllerGetCMSPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling contentControllerGetCMSPages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/pages`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على صفحات CMS (public)
     */
    async contentControllerGetCMSPages(requestParameters: ContentControllerGetCMSPagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetCMSPagesRaw(requestParameters, initOverrides);
    }

    /**
     * الأسئلة الشائعة (public)
     */
    async contentControllerGetFAQsRaw(requestParameters: ContentControllerGetFAQsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling contentControllerGetFAQs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/faqs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الأسئلة الشائعة (public)
     */
    async contentControllerGetFAQs(requestParameters: ContentControllerGetFAQsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetFAQsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على اشتراكي
     */
    async contentControllerGetMySubscriptionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/my-subscription`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على اشتراكي
     */
    async contentControllerGetMySubscription(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetMySubscriptionRaw(initOverrides);
    }

    /**
     * الحصول على أقسام المتجر (public)
     */
    async contentControllerGetStoreSectionsRaw(requestParameters: ContentControllerGetStoreSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling contentControllerGetStoreSections().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/stores/{storeId}/sections`;
        urlPath = urlPath.replace(`{${"storeId"}}`, encodeURIComponent(String(requestParameters['storeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على أقسام المتجر (public)
     */
    async contentControllerGetStoreSections(requestParameters: ContentControllerGetStoreSectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetStoreSectionsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على خطط الاشتراك (public)
     */
    async contentControllerGetSubscriptionPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/subscription-plans`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على خطط الاشتراك (public)
     */
    async contentControllerGetSubscriptionPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerGetSubscriptionPlansRaw(initOverrides);
    }

    /**
     * تسجيل نقرة على بانر
     */
    async contentControllerRecordBannerClickRaw(requestParameters: ContentControllerRecordBannerClickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerRecordBannerClick().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/content/banners/{id}/click`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل نقرة على بانر
     */
    async contentControllerRecordBannerClick(requestParameters: ContentControllerRecordBannerClickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerRecordBannerClickRaw(requestParameters, initOverrides);
    }

    /**
     * الاشتراك في خطة
     */
    async contentControllerSubscribeRaw(requestParameters: ContentControllerSubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling contentControllerSubscribe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/subscribe`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الاشتراك في خطة
     */
    async contentControllerSubscribe(requestParameters: ContentControllerSubscribeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerSubscribeRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث إعدادات التطبيق
     */
    async contentControllerUpdateAppSettingsRaw(requestParameters: ContentControllerUpdateAppSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['contentControllerUpdateAppSettingsRequest'] == null) {
            throw new runtime.RequiredError(
                'contentControllerUpdateAppSettingsRequest',
                'Required parameter "contentControllerUpdateAppSettingsRequest" was null or undefined when calling contentControllerUpdateAppSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/app-settings`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContentControllerUpdateAppSettingsRequestToJSON(requestParameters['contentControllerUpdateAppSettingsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث إعدادات التطبيق
     */
    async contentControllerUpdateAppSettings(requestParameters: ContentControllerUpdateAppSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerUpdateAppSettingsRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث بانر
     */
    async contentControllerUpdateBannerRaw(requestParameters: ContentControllerUpdateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerUpdateBanner().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling contentControllerUpdateBanner().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/banners/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث بانر
     */
    async contentControllerUpdateBanner(requestParameters: ContentControllerUpdateBannerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerUpdateBannerRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث صفحة CMS
     */
    async contentControllerUpdateCMSPageRaw(requestParameters: ContentControllerUpdateCMSPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerUpdateCMSPage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/pages/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث صفحة CMS
     */
    async contentControllerUpdateCMSPage(requestParameters: ContentControllerUpdateCMSPageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerUpdateCMSPageRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث سؤال شائع
     */
    async contentControllerUpdateFAQRaw(requestParameters: ContentControllerUpdateFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerUpdateFAQ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/admin/faqs/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث سؤال شائع
     */
    async contentControllerUpdateFAQ(requestParameters: ContentControllerUpdateFAQRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerUpdateFAQRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث قسم
     */
    async contentControllerUpdateStoreSectionRaw(requestParameters: ContentControllerUpdateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling contentControllerUpdateStoreSection().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling contentControllerUpdateStoreSection().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/content/sections/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث قسم
     */
    async contentControllerUpdateStoreSection(requestParameters: ContentControllerUpdateStoreSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.contentControllerUpdateStoreSectionRaw(requestParameters, initOverrides);
    }

}
