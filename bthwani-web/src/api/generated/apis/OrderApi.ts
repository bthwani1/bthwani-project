/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrderDto,
  OrderControllerAddNoteRequest,
  OrderControllerAssignDriverRequest,
  OrderControllerRateOrderRequest,
  OrderControllerReturnOrderRequest,
  OrderControllerScheduleOrderRequest,
  OrderControllerSetProofOfDeliveryRequest,
  OrderControllerUpdateDriverLocationRequest,
  OrderControllerVendorCancelOrderRequest,
} from '../models/index';
import {
    CreateOrderDtoFromJSON,
    CreateOrderDtoToJSON,
    OrderControllerAddNoteRequestFromJSON,
    OrderControllerAddNoteRequestToJSON,
    OrderControllerAssignDriverRequestFromJSON,
    OrderControllerAssignDriverRequestToJSON,
    OrderControllerRateOrderRequestFromJSON,
    OrderControllerRateOrderRequestToJSON,
    OrderControllerReturnOrderRequestFromJSON,
    OrderControllerReturnOrderRequestToJSON,
    OrderControllerScheduleOrderRequestFromJSON,
    OrderControllerScheduleOrderRequestToJSON,
    OrderControllerSetProofOfDeliveryRequestFromJSON,
    OrderControllerSetProofOfDeliveryRequestToJSON,
    OrderControllerUpdateDriverLocationRequestFromJSON,
    OrderControllerUpdateDriverLocationRequestToJSON,
    OrderControllerVendorCancelOrderRequestFromJSON,
    OrderControllerVendorCancelOrderRequestToJSON,
} from '../models/index';

export interface OrderControllerAddNoteOperationRequest {
    id: string;
    orderControllerAddNoteRequest: OrderControllerAddNoteRequest;
}

export interface OrderControllerAdminChangeStatusRequest {
    id: string;
}

export interface OrderControllerAssignDriverOperationRequest {
    id: string;
    orderControllerAssignDriverRequest: OrderControllerAssignDriverRequest;
}

export interface OrderControllerCancelOrderRequest {
    id: string;
    orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest;
}

export interface OrderControllerCreateOrderRequest {
    createOrderDto: CreateOrderDto;
}

export interface OrderControllerExportOrdersRequest {
    startDate?: string;
    endDate?: string;
    status?: string;
}

export interface OrderControllerGetDeliveryTimelineRequest {
    id: string;
}

export interface OrderControllerGetDriverETARequest {
    id: string;
}

export interface OrderControllerGetLiveTrackingRequest {
    id: string;
}

export interface OrderControllerGetMyOrdersRequest {
    cursor?: string;
    limit?: number;
}

export interface OrderControllerGetMyOrdersShortRequest {
    cursor?: string;
    limit?: number;
}

export interface OrderControllerGetNotesRequest {
    id: string;
}

export interface OrderControllerGetOrderRequest {
    id: string;
}

export interface OrderControllerGetProofOfDeliveryRequest {
    id: string;
}

export interface OrderControllerGetPublicOrderStatusRequest {
    id: string;
}

export interface OrderControllerGetRouteHistoryRequest {
    id: string;
}

export interface OrderControllerGetUserOrdersRequest {
    userId: string;
    cursor?: string;
    limit?: number;
}

export interface OrderControllerGetVendorOrdersRequest {
    cursor?: string;
    limit?: number;
}

export interface OrderControllerRateOrderOperationRequest {
    id: string;
    orderControllerRateOrderRequest: OrderControllerRateOrderRequest;
}

export interface OrderControllerRepeatOrderRequest {
    id: string;
}

export interface OrderControllerReturnOrderOperationRequest {
    id: string;
    orderControllerReturnOrderRequest: OrderControllerReturnOrderRequest;
}

export interface OrderControllerScheduleOrderOperationRequest {
    id: string;
    orderControllerScheduleOrderRequest: OrderControllerScheduleOrderRequest;
}

export interface OrderControllerSetProofOfDeliveryOperationRequest {
    id: string;
    orderControllerSetProofOfDeliveryRequest: OrderControllerSetProofOfDeliveryRequest;
}

export interface OrderControllerTrackOrderRequest {
    id: string;
}

export interface OrderControllerUpdateDriverLocationOperationRequest {
    id: string;
    orderControllerUpdateDriverLocationRequest: OrderControllerUpdateDriverLocationRequest;
}

export interface OrderControllerVendorAcceptOrderRequest {
    id: string;
}

export interface OrderControllerVendorCancelOrderOperationRequest {
    id: string;
    orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest;
}

/**
 * OrderApi - interface
 * 
 * @export
 * @interface OrderApiInterface
 */
export interface OrderApiInterface {
    /**
     * إضافة ملاحظة عامة أو خاصة للطلب
     * @summary إضافة ملاحظة للطلب
     * @param {string} id معرّف الطلب
     * @param {OrderControllerAddNoteRequest} orderControllerAddNoteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerAddNoteRaw(requestParameters: OrderControllerAddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة ملاحظة عامة أو خاصة للطلب
     * إضافة ملاحظة للطلب
     */
    orderControllerAddNote(requestParameters: OrderControllerAddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تغيير حالة الطلب (admin)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerAdminChangeStatusRaw(requestParameters: OrderControllerAdminChangeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تغيير حالة الطلب (admin)
     */
    orderControllerAdminChangeStatus(requestParameters: OrderControllerAdminChangeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تعيين سائق متاح للطلب (Admin/Dispatcher)
     * @summary تعيين سائق للطلب
     * @param {string} id معرّف الطلب
     * @param {OrderControllerAssignDriverRequest} orderControllerAssignDriverRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerAssignDriverRaw(requestParameters: OrderControllerAssignDriverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعيين سائق متاح للطلب (Admin/Dispatcher)
     * تعيين سائق للطلب
     */
    orderControllerAssignDriver(requestParameters: OrderControllerAssignDriverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إلغاء الطلب من قبل العميل مع ذكر السبب
     * @summary إلغاء الطلب
     * @param {string} id معرّف الطلب
     * @param {OrderControllerVendorCancelOrderRequest} orderControllerVendorCancelOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerCancelOrderRaw(requestParameters: OrderControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء الطلب من قبل العميل مع ذكر السبب
     * إلغاء الطلب
     */
    orderControllerCancelOrder(requestParameters: OrderControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إنشاء طلب جديد مع العناصر والعنوان
     * @summary إنشاء طلب جديد
     * @param {CreateOrderDto} createOrderDto بيانات الطلب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerCreateOrderRaw(requestParameters: OrderControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء طلب جديد مع العناصر والعنوان
     * إنشاء طلب جديد
     */
    orderControllerCreateOrder(requestParameters: OrderControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تصدير قائمة الطلبات بصيغة CSV أو Excel
     * @summary تصدير الطلبات إلى Excel/CSV
     * @param {string} [startDate] تاريخ البداية (ISO format)
     * @param {string} [endDate] تاريخ النهاية (ISO format)
     * @param {string} [status] حالة الطلب للتصفية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerExportOrdersRaw(requestParameters: OrderControllerExportOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تصدير قائمة الطلبات بصيغة CSV أو Excel
     * تصدير الطلبات إلى Excel/CSV
     */
    orderControllerExportOrders(requestParameters: OrderControllerExportOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary خط زمني للتوصيل
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetDeliveryTimelineRaw(requestParameters: OrderControllerGetDeliveryTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * خط زمني للتوصيل
     */
    orderControllerGetDeliveryTimeline(requestParameters: OrderControllerGetDeliveryTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الوقت المتوقع للوصول
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetDriverETARaw(requestParameters: OrderControllerGetDriverETARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الوقت المتوقع للوصول
     */
    orderControllerGetDriverETA(requestParameters: OrderControllerGetDriverETARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التتبع المباشر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetLiveTrackingRaw(requestParameters: OrderControllerGetLiveTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التتبع المباشر
     */
    orderControllerGetLiveTracking(requestParameters: OrderControllerGetLiveTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * جلب جميع طلبات المستخدم الحالي مع pagination
     * @summary جلب طلبات المستخدم الحالي
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد النتائج (default: 20)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetMyOrdersRaw(requestParameters: OrderControllerGetMyOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب جميع طلبات المستخدم الحالي مع pagination
     * جلب طلبات المستخدم الحالي
     */
    orderControllerGetMyOrders(requestParameters: OrderControllerGetMyOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * جلب جميع طلبات المستخدم الحالي
     * @summary جلب طلبات المستخدم الحالي
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetMyOrdersShortRaw(requestParameters: OrderControllerGetMyOrdersShortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب جميع طلبات المستخدم الحالي
     * جلب طلبات المستخدم الحالي
     */
    orderControllerGetMyOrdersShort(requestParameters: OrderControllerGetMyOrdersShortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب الملاحظات
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetNotesRaw(requestParameters: OrderControllerGetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب الملاحظات
     */
    orderControllerGetNotes(requestParameters: OrderControllerGetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفاصيل الطلب
     * @param {string} id معرّف الطلب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetOrderRaw(requestParameters: OrderControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفاصيل الطلب
     */
    orderControllerGetOrder(requestParameters: OrderControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب إثبات التسليم
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetProofOfDeliveryRaw(requestParameters: OrderControllerGetProofOfDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب إثبات التسليم
     */
    orderControllerGetProofOfDelivery(requestParameters: OrderControllerGetProofOfDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على حالة الطلب للمشاركة العامة
     * @summary حالة الطلب (عام بدون مصادقة)
     * @param {string} id معرّف الطلب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetPublicOrderStatusRaw(requestParameters: OrderControllerGetPublicOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على حالة الطلب للمشاركة العامة
     * حالة الطلب (عام بدون مصادقة)
     */
    orderControllerGetPublicOrderStatus(requestParameters: OrderControllerGetPublicOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل المسار
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetRouteHistoryRaw(requestParameters: OrderControllerGetRouteHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل المسار
     */
    orderControllerGetRouteHistory(requestParameters: OrderControllerGetRouteHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * جلب جميع طلبات مستخدم معين
     * @summary جلب طلبات مستخدم محدد
     * @param {string} userId معرّف المستخدم
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetUserOrdersRaw(requestParameters: OrderControllerGetUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب جميع طلبات مستخدم معين
     * جلب طلبات مستخدم محدد
     */
    orderControllerGetUserOrders(requestParameters: OrderControllerGetUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب طلبات التاجر
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerGetVendorOrdersRaw(requestParameters: OrderControllerGetVendorOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب طلبات التاجر
     */
    orderControllerGetVendorOrders(requestParameters: OrderControllerGetVendorOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تقييم الطلب والخدمة بعد التسليم
     * @summary تقييم الطلب
     * @param {string} id معرّف الطلب
     * @param {OrderControllerRateOrderRequest} orderControllerRateOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerRateOrderRaw(requestParameters: OrderControllerRateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تقييم الطلب والخدمة بعد التسليم
     * تقييم الطلب
     */
    orderControllerRateOrder(requestParameters: OrderControllerRateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إعادة نفس الطلب بنفس العناصر
     * @summary إعادة طلب سابق
     * @param {string} id معرّف الطلب السابق
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerRepeatOrderRaw(requestParameters: OrderControllerRepeatOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إعادة نفس الطلب بنفس العناصر
     * إعادة طلب سابق
     */
    orderControllerRepeatOrder(requestParameters: OrderControllerRepeatOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إرجاع المنتج بعد التسليم مع ذكر السبب
     * @summary طلب إرجاع المنتج
     * @param {string} id معرّف الطلب
     * @param {OrderControllerReturnOrderRequest} orderControllerReturnOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerReturnOrderRaw(requestParameters: OrderControllerReturnOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إرجاع المنتج بعد التسليم مع ذكر السبب
     * طلب إرجاع المنتج
     */
    orderControllerReturnOrder(requestParameters: OrderControllerReturnOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تحديد موعد محدد لتوصيل الطلب
     * @summary جدولة طلب للتوصيل لاحقاً
     * @param {string} id معرّف الطلب
     * @param {OrderControllerScheduleOrderRequest} orderControllerScheduleOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerScheduleOrderRaw(requestParameters: OrderControllerScheduleOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديد موعد محدد لتوصيل الطلب
     * جدولة طلب للتوصيل لاحقاً
     */
    orderControllerScheduleOrder(requestParameters: OrderControllerScheduleOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إضافة صورة وتوقيع كإثبات على التسليم
     * @summary إضافة إثبات التسليم (POD)
     * @param {string} id معرّف الطلب
     * @param {OrderControllerSetProofOfDeliveryRequest} orderControllerSetProofOfDeliveryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerSetProofOfDeliveryRaw(requestParameters: OrderControllerSetProofOfDeliveryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة صورة وتوقيع كإثبات على التسليم
     * إضافة إثبات التسليم (POD)
     */
    orderControllerSetProofOfDelivery(requestParameters: OrderControllerSetProofOfDeliveryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تتبع الطلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerTrackOrderRaw(requestParameters: OrderControllerTrackOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تتبع الطلب
     */
    orderControllerTrackOrder(requestParameters: OrderControllerTrackOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تحديث موقع السائق أثناء التوصيل (GPS tracking)
     * @summary تحديث موقع السائق
     * @param {string} id معرّف الطلب
     * @param {OrderControllerUpdateDriverLocationRequest} orderControllerUpdateDriverLocationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerUpdateDriverLocationRaw(requestParameters: OrderControllerUpdateDriverLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث موقع السائق أثناء التوصيل (GPS tracking)
     * تحديث موقع السائق
     */
    orderControllerUpdateDriverLocation(requestParameters: OrderControllerUpdateDriverLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * قبول الطلب والبدء في التحضير
     * @summary قبول الطلب من قبل التاجر
     * @param {string} id معرّف الطلب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerVendorAcceptOrderRaw(requestParameters: OrderControllerVendorAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * قبول الطلب والبدء في التحضير
     * قبول الطلب من قبل التاجر
     */
    orderControllerVendorAcceptOrder(requestParameters: OrderControllerVendorAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إلغاء الطلب مع تحديد السبب
     * @summary إلغاء الطلب من قبل التاجر
     * @param {string} id معرّف الطلب
     * @param {OrderControllerVendorCancelOrderRequest} orderControllerVendorCancelOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderApiInterface
     */
    orderControllerVendorCancelOrderRaw(requestParameters: OrderControllerVendorCancelOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء الطلب مع تحديد السبب
     * إلغاء الطلب من قبل التاجر
     */
    orderControllerVendorCancelOrder(requestParameters: OrderControllerVendorCancelOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI implements OrderApiInterface {

    /**
     * إضافة ملاحظة عامة أو خاصة للطلب
     * إضافة ملاحظة للطلب
     */
    async orderControllerAddNoteRaw(requestParameters: OrderControllerAddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerAddNote().'
            );
        }

        if (requestParameters['orderControllerAddNoteRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerAddNoteRequest',
                'Required parameter "orderControllerAddNoteRequest" was null or undefined when calling orderControllerAddNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/notes`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerAddNoteRequestToJSON(requestParameters['orderControllerAddNoteRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة ملاحظة عامة أو خاصة للطلب
     * إضافة ملاحظة للطلب
     */
    async orderControllerAddNote(requestParameters: OrderControllerAddNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerAddNoteRaw(requestParameters, initOverrides);
    }

    /**
     * تغيير حالة الطلب (admin)
     */
    async orderControllerAdminChangeStatusRaw(requestParameters: OrderControllerAdminChangeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerAdminChangeStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/admin-status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تغيير حالة الطلب (admin)
     */
    async orderControllerAdminChangeStatus(requestParameters: OrderControllerAdminChangeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerAdminChangeStatusRaw(requestParameters, initOverrides);
    }

    /**
     * تعيين سائق متاح للطلب (Admin/Dispatcher)
     * تعيين سائق للطلب
     */
    async orderControllerAssignDriverRaw(requestParameters: OrderControllerAssignDriverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerAssignDriver().'
            );
        }

        if (requestParameters['orderControllerAssignDriverRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerAssignDriverRequest',
                'Required parameter "orderControllerAssignDriverRequest" was null or undefined when calling orderControllerAssignDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/assign-driver`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerAssignDriverRequestToJSON(requestParameters['orderControllerAssignDriverRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعيين سائق متاح للطلب (Admin/Dispatcher)
     * تعيين سائق للطلب
     */
    async orderControllerAssignDriver(requestParameters: OrderControllerAssignDriverOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerAssignDriverRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء الطلب من قبل العميل مع ذكر السبب
     * إلغاء الطلب
     */
    async orderControllerCancelOrderRaw(requestParameters: OrderControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerCancelOrder().'
            );
        }

        if (requestParameters['orderControllerVendorCancelOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerVendorCancelOrderRequest',
                'Required parameter "orderControllerVendorCancelOrderRequest" was null or undefined when calling orderControllerCancelOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerVendorCancelOrderRequestToJSON(requestParameters['orderControllerVendorCancelOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء الطلب من قبل العميل مع ذكر السبب
     * إلغاء الطلب
     */
    async orderControllerCancelOrder(requestParameters: OrderControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerCancelOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء طلب جديد مع العناصر والعنوان
     * إنشاء طلب جديد
     */
    async orderControllerCreateOrderRaw(requestParameters: OrderControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createOrderDto'] == null) {
            throw new runtime.RequiredError(
                'createOrderDto',
                'Required parameter "createOrderDto" was null or undefined when calling orderControllerCreateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrderDtoToJSON(requestParameters['createOrderDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء طلب جديد مع العناصر والعنوان
     * إنشاء طلب جديد
     */
    async orderControllerCreateOrder(requestParameters: OrderControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerCreateOrderRaw(requestParameters, initOverrides);
    }

    /**
     * تصدير قائمة الطلبات بصيغة CSV أو Excel
     * تصدير الطلبات إلى Excel/CSV
     */
    async orderControllerExportOrdersRaw(requestParameters: OrderControllerExportOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تصدير قائمة الطلبات بصيغة CSV أو Excel
     * تصدير الطلبات إلى Excel/CSV
     */
    async orderControllerExportOrders(requestParameters: OrderControllerExportOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerExportOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * خط زمني للتوصيل
     */
    async orderControllerGetDeliveryTimelineRaw(requestParameters: OrderControllerGetDeliveryTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetDeliveryTimeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/delivery-timeline`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * خط زمني للتوصيل
     */
    async orderControllerGetDeliveryTimeline(requestParameters: OrderControllerGetDeliveryTimelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetDeliveryTimelineRaw(requestParameters, initOverrides);
    }

    /**
     * الوقت المتوقع للوصول
     */
    async orderControllerGetDriverETARaw(requestParameters: OrderControllerGetDriverETARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetDriverETA().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/driver-eta`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الوقت المتوقع للوصول
     */
    async orderControllerGetDriverETA(requestParameters: OrderControllerGetDriverETARequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetDriverETARaw(requestParameters, initOverrides);
    }

    /**
     * التتبع المباشر
     */
    async orderControllerGetLiveTrackingRaw(requestParameters: OrderControllerGetLiveTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetLiveTracking().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/live-tracking`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التتبع المباشر
     */
    async orderControllerGetLiveTracking(requestParameters: OrderControllerGetLiveTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetLiveTrackingRaw(requestParameters, initOverrides);
    }

    /**
     * جلب جميع طلبات المستخدم الحالي مع pagination
     * جلب طلبات المستخدم الحالي
     */
    async orderControllerGetMyOrdersRaw(requestParameters: OrderControllerGetMyOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/my-orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب جميع طلبات المستخدم الحالي مع pagination
     * جلب طلبات المستخدم الحالي
     */
    async orderControllerGetMyOrders(requestParameters: OrderControllerGetMyOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetMyOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * جلب جميع طلبات المستخدم الحالي
     * جلب طلبات المستخدم الحالي
     */
    async orderControllerGetMyOrdersShortRaw(requestParameters: OrderControllerGetMyOrdersShortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب جميع طلبات المستخدم الحالي
     * جلب طلبات المستخدم الحالي
     */
    async orderControllerGetMyOrdersShort(requestParameters: OrderControllerGetMyOrdersShortRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetMyOrdersShortRaw(requestParameters, initOverrides);
    }

    /**
     * جلب الملاحظات
     */
    async orderControllerGetNotesRaw(requestParameters: OrderControllerGetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetNotes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/notes`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب الملاحظات
     */
    async orderControllerGetNotes(requestParameters: OrderControllerGetNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetNotesRaw(requestParameters, initOverrides);
    }

    /**
     * تفاصيل الطلب
     */
    async orderControllerGetOrderRaw(requestParameters: OrderControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفاصيل الطلب
     */
    async orderControllerGetOrder(requestParameters: OrderControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetOrderRaw(requestParameters, initOverrides);
    }

    /**
     * جلب إثبات التسليم
     */
    async orderControllerGetProofOfDeliveryRaw(requestParameters: OrderControllerGetProofOfDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetProofOfDelivery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/pod`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب إثبات التسليم
     */
    async orderControllerGetProofOfDelivery(requestParameters: OrderControllerGetProofOfDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetProofOfDeliveryRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على حالة الطلب للمشاركة العامة
     * حالة الطلب (عام بدون مصادقة)
     */
    async orderControllerGetPublicOrderStatusRaw(requestParameters: OrderControllerGetPublicOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetPublicOrderStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/public/{id}/status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على حالة الطلب للمشاركة العامة
     * حالة الطلب (عام بدون مصادقة)
     */
    async orderControllerGetPublicOrderStatus(requestParameters: OrderControllerGetPublicOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetPublicOrderStatusRaw(requestParameters, initOverrides);
    }

    /**
     * سجل المسار
     */
    async orderControllerGetRouteHistoryRaw(requestParameters: OrderControllerGetRouteHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerGetRouteHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/route-history`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل المسار
     */
    async orderControllerGetRouteHistory(requestParameters: OrderControllerGetRouteHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetRouteHistoryRaw(requestParameters, initOverrides);
    }

    /**
     * جلب جميع طلبات مستخدم معين
     * جلب طلبات مستخدم محدد
     */
    async orderControllerGetUserOrdersRaw(requestParameters: OrderControllerGetUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling orderControllerGetUserOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/user/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب جميع طلبات مستخدم معين
     * جلب طلبات مستخدم محدد
     */
    async orderControllerGetUserOrders(requestParameters: OrderControllerGetUserOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetUserOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * جلب طلبات التاجر
     */
    async orderControllerGetVendorOrdersRaw(requestParameters: OrderControllerGetVendorOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/vendor/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب طلبات التاجر
     */
    async orderControllerGetVendorOrders(requestParameters: OrderControllerGetVendorOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerGetVendorOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * تقييم الطلب والخدمة بعد التسليم
     * تقييم الطلب
     */
    async orderControllerRateOrderRaw(requestParameters: OrderControllerRateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerRateOrder().'
            );
        }

        if (requestParameters['orderControllerRateOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerRateOrderRequest',
                'Required parameter "orderControllerRateOrderRequest" was null or undefined when calling orderControllerRateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/rate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerRateOrderRequestToJSON(requestParameters['orderControllerRateOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تقييم الطلب والخدمة بعد التسليم
     * تقييم الطلب
     */
    async orderControllerRateOrder(requestParameters: OrderControllerRateOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerRateOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إعادة نفس الطلب بنفس العناصر
     * إعادة طلب سابق
     */
    async orderControllerRepeatOrderRaw(requestParameters: OrderControllerRepeatOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerRepeatOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/repeat`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إعادة نفس الطلب بنفس العناصر
     * إعادة طلب سابق
     */
    async orderControllerRepeatOrder(requestParameters: OrderControllerRepeatOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerRepeatOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إرجاع المنتج بعد التسليم مع ذكر السبب
     * طلب إرجاع المنتج
     */
    async orderControllerReturnOrderRaw(requestParameters: OrderControllerReturnOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerReturnOrder().'
            );
        }

        if (requestParameters['orderControllerReturnOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerReturnOrderRequest',
                'Required parameter "orderControllerReturnOrderRequest" was null or undefined when calling orderControllerReturnOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/return`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerReturnOrderRequestToJSON(requestParameters['orderControllerReturnOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إرجاع المنتج بعد التسليم مع ذكر السبب
     * طلب إرجاع المنتج
     */
    async orderControllerReturnOrder(requestParameters: OrderControllerReturnOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerReturnOrderRaw(requestParameters, initOverrides);
    }

    /**
     * تحديد موعد محدد لتوصيل الطلب
     * جدولة طلب للتوصيل لاحقاً
     */
    async orderControllerScheduleOrderRaw(requestParameters: OrderControllerScheduleOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerScheduleOrder().'
            );
        }

        if (requestParameters['orderControllerScheduleOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerScheduleOrderRequest',
                'Required parameter "orderControllerScheduleOrderRequest" was null or undefined when calling orderControllerScheduleOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/schedule`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerScheduleOrderRequestToJSON(requestParameters['orderControllerScheduleOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديد موعد محدد لتوصيل الطلب
     * جدولة طلب للتوصيل لاحقاً
     */
    async orderControllerScheduleOrder(requestParameters: OrderControllerScheduleOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerScheduleOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة صورة وتوقيع كإثبات على التسليم
     * إضافة إثبات التسليم (POD)
     */
    async orderControllerSetProofOfDeliveryRaw(requestParameters: OrderControllerSetProofOfDeliveryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerSetProofOfDelivery().'
            );
        }

        if (requestParameters['orderControllerSetProofOfDeliveryRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerSetProofOfDeliveryRequest',
                'Required parameter "orderControllerSetProofOfDeliveryRequest" was null or undefined when calling orderControllerSetProofOfDelivery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/pod`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerSetProofOfDeliveryRequestToJSON(requestParameters['orderControllerSetProofOfDeliveryRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة صورة وتوقيع كإثبات على التسليم
     * إضافة إثبات التسليم (POD)
     */
    async orderControllerSetProofOfDelivery(requestParameters: OrderControllerSetProofOfDeliveryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerSetProofOfDeliveryRaw(requestParameters, initOverrides);
    }

    /**
     * تتبع الطلب
     */
    async orderControllerTrackOrderRaw(requestParameters: OrderControllerTrackOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerTrackOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/tracking`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تتبع الطلب
     */
    async orderControllerTrackOrder(requestParameters: OrderControllerTrackOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerTrackOrderRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث موقع السائق أثناء التوصيل (GPS tracking)
     * تحديث موقع السائق
     */
    async orderControllerUpdateDriverLocationRaw(requestParameters: OrderControllerUpdateDriverLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerUpdateDriverLocation().'
            );
        }

        if (requestParameters['orderControllerUpdateDriverLocationRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerUpdateDriverLocationRequest',
                'Required parameter "orderControllerUpdateDriverLocationRequest" was null or undefined when calling orderControllerUpdateDriverLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/update-location`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerUpdateDriverLocationRequestToJSON(requestParameters['orderControllerUpdateDriverLocationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث موقع السائق أثناء التوصيل (GPS tracking)
     * تحديث موقع السائق
     */
    async orderControllerUpdateDriverLocation(requestParameters: OrderControllerUpdateDriverLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerUpdateDriverLocationRaw(requestParameters, initOverrides);
    }

    /**
     * قبول الطلب والبدء في التحضير
     * قبول الطلب من قبل التاجر
     */
    async orderControllerVendorAcceptOrderRaw(requestParameters: OrderControllerVendorAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerVendorAcceptOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/delivery/order/{id}/vendor-accept`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * قبول الطلب والبدء في التحضير
     * قبول الطلب من قبل التاجر
     */
    async orderControllerVendorAcceptOrder(requestParameters: OrderControllerVendorAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerVendorAcceptOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء الطلب مع تحديد السبب
     * إلغاء الطلب من قبل التاجر
     */
    async orderControllerVendorCancelOrderRaw(requestParameters: OrderControllerVendorCancelOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling orderControllerVendorCancelOrder().'
            );
        }

        if (requestParameters['orderControllerVendorCancelOrderRequest'] == null) {
            throw new runtime.RequiredError(
                'orderControllerVendorCancelOrderRequest',
                'Required parameter "orderControllerVendorCancelOrderRequest" was null or undefined when calling orderControllerVendorCancelOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/delivery/order/{id}/vendor-cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderControllerVendorCancelOrderRequestToJSON(requestParameters['orderControllerVendorCancelOrderRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء الطلب مع تحديد السبب
     * إلغاء الطلب من قبل التاجر
     */
    async orderControllerVendorCancelOrder(requestParameters: OrderControllerVendorCancelOrderOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.orderControllerVendorCancelOrderRaw(requestParameters, initOverrides);
    }

}
