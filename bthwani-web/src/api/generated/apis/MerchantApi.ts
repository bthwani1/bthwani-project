/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface MerchantControllerCreateAttributeRequest {
    body: object;
}

export interface MerchantControllerCreateCategoryRequest {
    body: object;
}

export interface MerchantControllerCreateMerchantRequest {
    body: object;
}

export interface MerchantControllerCreateMerchantProductRequest {
    body: object;
}

export interface MerchantControllerCreateProductCatalogRequest {
    body: object;
}

export interface MerchantControllerDeleteAttributeRequest {
    id: string;
}

export interface MerchantControllerDeleteCategoryRequest {
    id: string;
}

export interface MerchantControllerDeleteMerchantRequest {
    id: string;
}

export interface MerchantControllerDeleteMerchantProductRequest {
    id: string;
}

export interface MerchantControllerGetAllMerchantProductsRequest {
    merchantId: string;
    storeId: string;
    isAvailable: boolean;
}

export interface MerchantControllerGetAllMerchantsRequest {
    isActive: boolean;
}

export interface MerchantControllerGetAllProductCatalogsRequest {
    usageType: string;
}

export interface MerchantControllerGetCategoriesRequest {
    parent: string;
}

export interface MerchantControllerGetMerchantRequest {
    id: string;
}

export interface MerchantControllerGetMerchantProductRequest {
    id: string;
}

export interface MerchantControllerGetMerchantProductsRequest {
    merchantId: string;
    storeId: string;
    isAvailable: boolean;
}

export interface MerchantControllerGetProductCatalogRequest {
    id: string;
}

export interface MerchantControllerGetStoreProductsRequest {
    storeId: string;
    sectionId: string;
}

export interface MerchantControllerUpdateAttributeRequest {
    id: string;
    body: object;
}

export interface MerchantControllerUpdateCategoryRequest {
    id: string;
    body: object;
}

export interface MerchantControllerUpdateMerchantRequest {
    id: string;
    body: object;
}

export interface MerchantControllerUpdateMerchantProductRequest {
    id: string;
    body: object;
}

export interface MerchantControllerUpdateProductCatalogRequest {
    id: string;
    body: object;
}

export interface MerchantControllerUpdateStockRequest {
    id: string;
}

/**
 * MerchantApi - interface
 * 
 * @export
 * @interface MerchantApiInterface
 */
export interface MerchantApiInterface {
    /**
     * 
     * @summary إنشاء خاصية منتج
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerCreateAttributeRaw(requestParameters: MerchantControllerCreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء خاصية منتج
     */
    merchantControllerCreateAttribute(requestParameters: MerchantControllerCreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء فئة منتجات
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerCreateCategoryRaw(requestParameters: MerchantControllerCreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء فئة منتجات
     */
    merchantControllerCreateCategory(requestParameters: MerchantControllerCreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء تاجر جديد
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerCreateMerchantRaw(requestParameters: MerchantControllerCreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء تاجر جديد
     */
    merchantControllerCreateMerchant(requestParameters: MerchantControllerCreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة منتج لمتجر التاجر
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerCreateMerchantProductRaw(requestParameters: MerchantControllerCreateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة منتج لمتجر التاجر
     */
    merchantControllerCreateMerchantProduct(requestParameters: MerchantControllerCreateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة منتج للكتالوج
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerCreateProductCatalogRaw(requestParameters: MerchantControllerCreateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة منتج للكتالوج
     */
    merchantControllerCreateProductCatalog(requestParameters: MerchantControllerCreateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف خاصية
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerDeleteAttributeRaw(requestParameters: MerchantControllerDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف خاصية
     */
    merchantControllerDeleteAttribute(requestParameters: MerchantControllerDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف فئة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerDeleteCategoryRaw(requestParameters: MerchantControllerDeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف فئة
     */
    merchantControllerDeleteCategory(requestParameters: MerchantControllerDeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف تاجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerDeleteMerchantRaw(requestParameters: MerchantControllerDeleteMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف تاجر
     */
    merchantControllerDeleteMerchant(requestParameters: MerchantControllerDeleteMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف منتج تاجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerDeleteMerchantProductRaw(requestParameters: MerchantControllerDeleteMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف منتج تاجر
     */
    merchantControllerDeleteMerchantProduct(requestParameters: MerchantControllerDeleteMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على جميع منتجات التجار
     * @param {string} merchantId 
     * @param {string} storeId 
     * @param {boolean} isAvailable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetAllMerchantProductsRaw(requestParameters: MerchantControllerGetAllMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على جميع منتجات التجار
     */
    merchantControllerGetAllMerchantProducts(requestParameters: MerchantControllerGetAllMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على كل التجار
     * @param {boolean} isActive 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetAllMerchantsRaw(requestParameters: MerchantControllerGetAllMerchantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على كل التجار
     */
    merchantControllerGetAllMerchants(requestParameters: MerchantControllerGetAllMerchantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على منتجات الكتالوج (public)
     * @param {string} usageType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetAllProductCatalogsRaw(requestParameters: MerchantControllerGetAllProductCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على منتجات الكتالوج (public)
     */
    merchantControllerGetAllProductCatalogs(requestParameters: MerchantControllerGetAllProductCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على الخصائص (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على الخصائص (public)
     */
    merchantControllerGetAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على الفئات (public)
     * @param {string} parent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetCategoriesRaw(requestParameters: MerchantControllerGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على الفئات (public)
     */
    merchantControllerGetCategories(requestParameters: MerchantControllerGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على تاجر محدد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetMerchantRaw(requestParameters: MerchantControllerGetMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على تاجر محدد
     */
    merchantControllerGetMerchant(requestParameters: MerchantControllerGetMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على منتج تاجر محدد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetMerchantProductRaw(requestParameters: MerchantControllerGetMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على منتج تاجر محدد
     */
    merchantControllerGetMerchantProduct(requestParameters: MerchantControllerGetMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary منتجات التاجر (public)
     * @param {string} merchantId 
     * @param {string} storeId 
     * @param {boolean} isAvailable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetMerchantProductsRaw(requestParameters: MerchantControllerGetMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * منتجات التاجر (public)
     */
    merchantControllerGetMerchantProducts(requestParameters: MerchantControllerGetMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على منتج من الكتالوج (public)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetProductCatalogRaw(requestParameters: MerchantControllerGetProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على منتج من الكتالوج (public)
     */
    merchantControllerGetProductCatalog(requestParameters: MerchantControllerGetProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary منتجات المتجر (public)
     * @param {string} storeId 
     * @param {string} sectionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerGetStoreProductsRaw(requestParameters: MerchantControllerGetStoreProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * منتجات المتجر (public)
     */
    merchantControllerGetStoreProducts(requestParameters: MerchantControllerGetStoreProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث خاصية
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerUpdateAttributeRaw(requestParameters: MerchantControllerUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث خاصية
     */
    merchantControllerUpdateAttribute(requestParameters: MerchantControllerUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث فئة
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerUpdateCategoryRaw(requestParameters: MerchantControllerUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث فئة
     */
    merchantControllerUpdateCategory(requestParameters: MerchantControllerUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث تاجر
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerUpdateMerchantRaw(requestParameters: MerchantControllerUpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث تاجر
     */
    merchantControllerUpdateMerchant(requestParameters: MerchantControllerUpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث منتج التاجر
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerUpdateMerchantProductRaw(requestParameters: MerchantControllerUpdateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث منتج التاجر
     */
    merchantControllerUpdateMerchantProduct(requestParameters: MerchantControllerUpdateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث منتج في الكتالوج
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerUpdateProductCatalogRaw(requestParameters: MerchantControllerUpdateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث منتج في الكتالوج
     */
    merchantControllerUpdateProductCatalog(requestParameters: MerchantControllerUpdateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث مخزون منتج
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantApiInterface
     */
    merchantControllerUpdateStockRaw(requestParameters: MerchantControllerUpdateStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث مخزون منتج
     */
    merchantControllerUpdateStock(requestParameters: MerchantControllerUpdateStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class MerchantApi extends runtime.BaseAPI implements MerchantApiInterface {

    /**
     * إنشاء خاصية منتج
     */
    async merchantControllerCreateAttributeRaw(requestParameters: MerchantControllerCreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerCreateAttribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/attributes`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء خاصية منتج
     */
    async merchantControllerCreateAttribute(requestParameters: MerchantControllerCreateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerCreateAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء فئة منتجات
     */
    async merchantControllerCreateCategoryRaw(requestParameters: MerchantControllerCreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerCreateCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء فئة منتجات
     */
    async merchantControllerCreateCategory(requestParameters: MerchantControllerCreateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerCreateCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء تاجر جديد
     */
    async merchantControllerCreateMerchantRaw(requestParameters: MerchantControllerCreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerCreateMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء تاجر جديد
     */
    async merchantControllerCreateMerchant(requestParameters: MerchantControllerCreateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerCreateMerchantRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة منتج لمتجر التاجر
     */
    async merchantControllerCreateMerchantProductRaw(requestParameters: MerchantControllerCreateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerCreateMerchantProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/products`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة منتج لمتجر التاجر
     */
    async merchantControllerCreateMerchantProduct(requestParameters: MerchantControllerCreateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerCreateMerchantProductRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة منتج للكتالوج
     */
    async merchantControllerCreateProductCatalogRaw(requestParameters: MerchantControllerCreateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerCreateProductCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/catalog/products`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة منتج للكتالوج
     */
    async merchantControllerCreateProductCatalog(requestParameters: MerchantControllerCreateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerCreateProductCatalogRaw(requestParameters, initOverrides);
    }

    /**
     * حذف خاصية
     */
    async merchantControllerDeleteAttributeRaw(requestParameters: MerchantControllerDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerDeleteAttribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/attributes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف خاصية
     */
    async merchantControllerDeleteAttribute(requestParameters: MerchantControllerDeleteAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerDeleteAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * حذف فئة
     */
    async merchantControllerDeleteCategoryRaw(requestParameters: MerchantControllerDeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerDeleteCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف فئة
     */
    async merchantControllerDeleteCategory(requestParameters: MerchantControllerDeleteCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerDeleteCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * حذف تاجر
     */
    async merchantControllerDeleteMerchantRaw(requestParameters: MerchantControllerDeleteMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerDeleteMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف تاجر
     */
    async merchantControllerDeleteMerchant(requestParameters: MerchantControllerDeleteMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerDeleteMerchantRaw(requestParameters, initOverrides);
    }

    /**
     * حذف منتج تاجر
     */
    async merchantControllerDeleteMerchantProductRaw(requestParameters: MerchantControllerDeleteMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerDeleteMerchantProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/products/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف منتج تاجر
     */
    async merchantControllerDeleteMerchantProduct(requestParameters: MerchantControllerDeleteMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerDeleteMerchantProductRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على جميع منتجات التجار
     */
    async merchantControllerGetAllMerchantProductsRaw(requestParameters: MerchantControllerGetAllMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling merchantControllerGetAllMerchantProducts().'
            );
        }

        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling merchantControllerGetAllMerchantProducts().'
            );
        }

        if (requestParameters['isAvailable'] == null) {
            throw new runtime.RequiredError(
                'isAvailable',
                'Required parameter "isAvailable" was null or undefined when calling merchantControllerGetAllMerchantProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['merchantId'] != null) {
            queryParameters['merchantId'] = requestParameters['merchantId'];
        }

        if (requestParameters['storeId'] != null) {
            queryParameters['storeId'] = requestParameters['storeId'];
        }

        if (requestParameters['isAvailable'] != null) {
            queryParameters['isAvailable'] = requestParameters['isAvailable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على جميع منتجات التجار
     */
    async merchantControllerGetAllMerchantProducts(requestParameters: MerchantControllerGetAllMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetAllMerchantProductsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على كل التجار
     */
    async merchantControllerGetAllMerchantsRaw(requestParameters: MerchantControllerGetAllMerchantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['isActive'] == null) {
            throw new runtime.RequiredError(
                'isActive',
                'Required parameter "isActive" was null or undefined when calling merchantControllerGetAllMerchants().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على كل التجار
     */
    async merchantControllerGetAllMerchants(requestParameters: MerchantControllerGetAllMerchantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetAllMerchantsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على منتجات الكتالوج (public)
     */
    async merchantControllerGetAllProductCatalogsRaw(requestParameters: MerchantControllerGetAllProductCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['usageType'] == null) {
            throw new runtime.RequiredError(
                'usageType',
                'Required parameter "usageType" was null or undefined when calling merchantControllerGetAllProductCatalogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['usageType'] != null) {
            queryParameters['usageType'] = requestParameters['usageType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/catalog/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على منتجات الكتالوج (public)
     */
    async merchantControllerGetAllProductCatalogs(requestParameters: MerchantControllerGetAllProductCatalogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetAllProductCatalogsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على الخصائص (public)
     */
    async merchantControllerGetAttributesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/attributes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على الخصائص (public)
     */
    async merchantControllerGetAttributes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetAttributesRaw(initOverrides);
    }

    /**
     * الحصول على الفئات (public)
     */
    async merchantControllerGetCategoriesRaw(requestParameters: MerchantControllerGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['parent'] == null) {
            throw new runtime.RequiredError(
                'parent',
                'Required parameter "parent" was null or undefined when calling merchantControllerGetCategories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على الفئات (public)
     */
    async merchantControllerGetCategories(requestParameters: MerchantControllerGetCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetCategoriesRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على تاجر محدد
     */
    async merchantControllerGetMerchantRaw(requestParameters: MerchantControllerGetMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerGetMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على تاجر محدد
     */
    async merchantControllerGetMerchant(requestParameters: MerchantControllerGetMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetMerchantRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على منتج تاجر محدد
     */
    async merchantControllerGetMerchantProductRaw(requestParameters: MerchantControllerGetMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerGetMerchantProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/products/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على منتج تاجر محدد
     */
    async merchantControllerGetMerchantProduct(requestParameters: MerchantControllerGetMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetMerchantProductRaw(requestParameters, initOverrides);
    }

    /**
     * منتجات التاجر (public)
     */
    async merchantControllerGetMerchantProductsRaw(requestParameters: MerchantControllerGetMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['merchantId'] == null) {
            throw new runtime.RequiredError(
                'merchantId',
                'Required parameter "merchantId" was null or undefined when calling merchantControllerGetMerchantProducts().'
            );
        }

        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling merchantControllerGetMerchantProducts().'
            );
        }

        if (requestParameters['isAvailable'] == null) {
            throw new runtime.RequiredError(
                'isAvailable',
                'Required parameter "isAvailable" was null or undefined when calling merchantControllerGetMerchantProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['storeId'] != null) {
            queryParameters['storeId'] = requestParameters['storeId'];
        }

        if (requestParameters['isAvailable'] != null) {
            queryParameters['isAvailable'] = requestParameters['isAvailable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/{merchantId}/products`;
        urlPath = urlPath.replace(`{${"merchantId"}}`, encodeURIComponent(String(requestParameters['merchantId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * منتجات التاجر (public)
     */
    async merchantControllerGetMerchantProducts(requestParameters: MerchantControllerGetMerchantProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetMerchantProductsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على منتج من الكتالوج (public)
     */
    async merchantControllerGetProductCatalogRaw(requestParameters: MerchantControllerGetProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerGetProductCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/catalog/products/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على منتج من الكتالوج (public)
     */
    async merchantControllerGetProductCatalog(requestParameters: MerchantControllerGetProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetProductCatalogRaw(requestParameters, initOverrides);
    }

    /**
     * منتجات المتجر (public)
     */
    async merchantControllerGetStoreProductsRaw(requestParameters: MerchantControllerGetStoreProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['storeId'] == null) {
            throw new runtime.RequiredError(
                'storeId',
                'Required parameter "storeId" was null or undefined when calling merchantControllerGetStoreProducts().'
            );
        }

        if (requestParameters['sectionId'] == null) {
            throw new runtime.RequiredError(
                'sectionId',
                'Required parameter "sectionId" was null or undefined when calling merchantControllerGetStoreProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sectionId'] != null) {
            queryParameters['sectionId'] = requestParameters['sectionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/stores/{storeId}/products`;
        urlPath = urlPath.replace(`{${"storeId"}}`, encodeURIComponent(String(requestParameters['storeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * منتجات المتجر (public)
     */
    async merchantControllerGetStoreProducts(requestParameters: MerchantControllerGetStoreProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerGetStoreProductsRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث خاصية
     */
    async merchantControllerUpdateAttributeRaw(requestParameters: MerchantControllerUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerUpdateAttribute().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerUpdateAttribute().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/attributes/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث خاصية
     */
    async merchantControllerUpdateAttribute(requestParameters: MerchantControllerUpdateAttributeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerUpdateAttributeRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث فئة
     */
    async merchantControllerUpdateCategoryRaw(requestParameters: MerchantControllerUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerUpdateCategory().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerUpdateCategory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/categories/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث فئة
     */
    async merchantControllerUpdateCategory(requestParameters: MerchantControllerUpdateCategoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerUpdateCategoryRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث تاجر
     */
    async merchantControllerUpdateMerchantRaw(requestParameters: MerchantControllerUpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerUpdateMerchant().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerUpdateMerchant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث تاجر
     */
    async merchantControllerUpdateMerchant(requestParameters: MerchantControllerUpdateMerchantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerUpdateMerchantRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث منتج التاجر
     */
    async merchantControllerUpdateMerchantProductRaw(requestParameters: MerchantControllerUpdateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerUpdateMerchantProduct().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerUpdateMerchantProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/products/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث منتج التاجر
     */
    async merchantControllerUpdateMerchantProduct(requestParameters: MerchantControllerUpdateMerchantProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerUpdateMerchantProductRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث منتج في الكتالوج
     */
    async merchantControllerUpdateProductCatalogRaw(requestParameters: MerchantControllerUpdateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerUpdateProductCatalog().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling merchantControllerUpdateProductCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/merchants/catalog/products/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث منتج في الكتالوج
     */
    async merchantControllerUpdateProductCatalog(requestParameters: MerchantControllerUpdateProductCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerUpdateProductCatalogRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث مخزون منتج
     */
    async merchantControllerUpdateStockRaw(requestParameters: MerchantControllerUpdateStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling merchantControllerUpdateStock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/merchants/products/{id}/stock`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث مخزون منتج
     */
    async merchantControllerUpdateStock(requestParameters: MerchantControllerUpdateStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.merchantControllerUpdateStockRaw(requestParameters, initOverrides);
    }

}
