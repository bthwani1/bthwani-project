/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateChartAccountDto,
  CreateEmployeeDto,
  CreateJournalEntryDto,
  CreateLeaveRequestDto,
  ERControllerCheckInRequest,
  ERControllerGeneratePayrollRequest,
  UpdateEmployeeDto,
} from '../models/index';
import {
    CreateChartAccountDtoFromJSON,
    CreateChartAccountDtoToJSON,
    CreateEmployeeDtoFromJSON,
    CreateEmployeeDtoToJSON,
    CreateJournalEntryDtoFromJSON,
    CreateJournalEntryDtoToJSON,
    CreateLeaveRequestDtoFromJSON,
    CreateLeaveRequestDtoToJSON,
    ERControllerCheckInRequestFromJSON,
    ERControllerCheckInRequestToJSON,
    ERControllerGeneratePayrollRequestFromJSON,
    ERControllerGeneratePayrollRequestToJSON,
    UpdateEmployeeDtoFromJSON,
    UpdateEmployeeDtoToJSON,
} from '../models/index';

export interface ERControllerApproveLeaveRequestRequest {
    id: string;
}

export interface ERControllerApprovePayrollRequest {
    id: string;
}

export interface ERControllerCheckInOperationRequest {
    eRControllerCheckInRequest: ERControllerCheckInRequest;
}

export interface ERControllerCheckOutRequest {
    eRControllerCheckInRequest: ERControllerCheckInRequest;
}

export interface ERControllerCreateAccountRequest {
    createChartAccountDto: CreateChartAccountDto;
}

export interface ERControllerCreateEmployeeRequest {
    createEmployeeDto: CreateEmployeeDto;
}

export interface ERControllerCreateJournalEntryRequest {
    createJournalEntryDto: CreateJournalEntryDto;
}

export interface ERControllerCreateLeaveRequestRequest {
    createLeaveRequestDto: CreateLeaveRequestDto;
}

export interface ERControllerDeleteAssetRequest {
    id: string;
}

export interface ERControllerDeleteChartAccountRequest {
    id: string;
}

export interface ERControllerDeleteDocumentRequest {
    id: string;
}

export interface ERControllerDeleteEmployeeRequest {
    id: string;
}

export interface ERControllerDeletePayrollRequest {
    id: string;
}

export interface ERControllerDownloadDocumentRequest {
    id: string;
}

export interface ERControllerGeneratePayrollOperationRequest {
    eRControllerGeneratePayrollRequest: ERControllerGeneratePayrollRequest;
}

export interface ERControllerGetAccountRequest {
    id: string;
}

export interface ERControllerGetAccountsRequest {
    type: string;
}

export interface ERControllerGetAllEmployeesRequest {
    status: string;
}

export interface ERControllerGetEmployeeRequest {
    id: string;
}

export interface ERControllerGetEmployeeAttendanceRequest {
    employeeId: string;
    month: number;
    year: number;
}

export interface ERControllerGetJournalEntriesRequest {
    type: string;
    status: string;
    startDate: string;
    endDate: string;
}

export interface ERControllerGetTrialBalanceRequest {
    date: string;
}

export interface ERControllerMarkAsPaidRequest {
    id: string;
}

export interface ERControllerPostJournalEntryRequest {
    id: string;
}

export interface ERControllerRejectLeaveRequestRequest {
    id: string;
}

export interface ERControllerUpdateEmployeeRequest {
    id: string;
    updateEmployeeDto: UpdateEmployeeDto;
}

/**
 * ERSystemApi - interface
 * 
 * @export
 * @interface ERSystemApiInterface
 */
export interface ERSystemApiInterface {
    /**
     * 
     * @summary الموافقة على طلب إجازة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerApproveLeaveRequestRaw(requestParameters: ERControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على طلب إجازة
     */
    eRControllerApproveLeaveRequest(requestParameters: ERControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على كشف راتب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerApprovePayrollRaw(requestParameters: ERControllerApprovePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على كشف راتب
     */
    eRControllerApprovePayroll(requestParameters: ERControllerApprovePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل حضور
     * @param {ERControllerCheckInRequest} eRControllerCheckInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerCheckInRaw(requestParameters: ERControllerCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل حضور
     */
    eRControllerCheckIn(requestParameters: ERControllerCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل انصراف
     * @param {ERControllerCheckInRequest} eRControllerCheckInRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerCheckOutRaw(requestParameters: ERControllerCheckOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل انصراف
     */
    eRControllerCheckOut(requestParameters: ERControllerCheckOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء حساب
     * @param {CreateChartAccountDto} createChartAccountDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerCreateAccountRaw(requestParameters: ERControllerCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء حساب
     */
    eRControllerCreateAccount(requestParameters: ERControllerCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة موظف جديد
     * @param {CreateEmployeeDto} createEmployeeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerCreateEmployeeRaw(requestParameters: ERControllerCreateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة موظف جديد
     */
    eRControllerCreateEmployee(requestParameters: ERControllerCreateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء قيد يومية
     * @param {CreateJournalEntryDto} createJournalEntryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerCreateJournalEntryRaw(requestParameters: ERControllerCreateJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء قيد يومية
     */
    eRControllerCreateJournalEntry(requestParameters: ERControllerCreateJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تقديم طلب إجازة
     * @param {CreateLeaveRequestDto} createLeaveRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerCreateLeaveRequestRaw(requestParameters: ERControllerCreateLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تقديم طلب إجازة
     */
    eRControllerCreateLeaveRequest(requestParameters: ERControllerCreateLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف أصل
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDeleteAssetRaw(requestParameters: ERControllerDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف أصل
     */
    eRControllerDeleteAsset(requestParameters: ERControllerDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف مستندات متعددة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDeleteBulkDocumentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف مستندات متعددة
     */
    eRControllerDeleteBulkDocuments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف حساب من دليل الحسابات
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDeleteChartAccountRaw(requestParameters: ERControllerDeleteChartAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف حساب من دليل الحسابات
     */
    eRControllerDeleteChartAccount(requestParameters: ERControllerDeleteChartAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف مستند
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDeleteDocumentRaw(requestParameters: ERControllerDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف مستند
     */
    eRControllerDeleteDocument(requestParameters: ERControllerDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف موظف
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDeleteEmployeeRaw(requestParameters: ERControllerDeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف موظف
     */
    eRControllerDeleteEmployee(requestParameters: ERControllerDeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف كشف راتب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDeletePayrollRaw(requestParameters: ERControllerDeletePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف كشف راتب
     */
    eRControllerDeletePayroll(requestParameters: ERControllerDeletePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تنزيل مستند
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerDownloadDocumentRaw(requestParameters: ERControllerDownloadDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تنزيل مستند
     */
    eRControllerDownloadDocument(requestParameters: ERControllerDownloadDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تصدير مستندات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerExportDocumentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تصدير مستندات
     */
    eRControllerExportDocuments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء كشف راتب
     * @param {ERControllerGeneratePayrollRequest} eRControllerGeneratePayrollRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGeneratePayrollRaw(requestParameters: ERControllerGeneratePayrollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء كشف راتب
     */
    eRControllerGeneratePayroll(requestParameters: ERControllerGeneratePayrollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على حساب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetAccountRaw(requestParameters: ERControllerGetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على حساب
     */
    eRControllerGetAccount(requestParameters: ERControllerGetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary دليل الحسابات
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetAccountsRaw(requestParameters: ERControllerGetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * دليل الحسابات
     */
    eRControllerGetAccounts(requestParameters: ERControllerGetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على كل الموظفين
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetAllEmployeesRaw(requestParameters: ERControllerGetAllEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على كل الموظفين
     */
    eRControllerGetAllEmployees(requestParameters: ERControllerGetAllEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على موظف محدد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetEmployeeRaw(requestParameters: ERControllerGetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على موظف محدد
     */
    eRControllerGetEmployee(requestParameters: ERControllerGetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل حضور موظف
     * @param {string} employeeId 
     * @param {number} month 
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetEmployeeAttendanceRaw(requestParameters: ERControllerGetEmployeeAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل حضور موظف
     */
    eRControllerGetEmployeeAttendance(requestParameters: ERControllerGetEmployeeAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على قيود اليومية
     * @param {string} type 
     * @param {string} status 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetJournalEntriesRaw(requestParameters: ERControllerGetJournalEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على قيود اليومية
     */
    eRControllerGetJournalEntries(requestParameters: ERControllerGetJournalEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ميزان المراجعة
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerGetTrialBalanceRaw(requestParameters: ERControllerGetTrialBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ميزان المراجعة
     */
    eRControllerGetTrialBalance(requestParameters: ERControllerGetTrialBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديد كدفع
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerMarkAsPaidRaw(requestParameters: ERControllerMarkAsPaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديد كدفع
     */
    eRControllerMarkAsPaid(requestParameters: ERControllerMarkAsPaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ترحيل قيد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerPostJournalEntryRaw(requestParameters: ERControllerPostJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ترحيل قيد
     */
    eRControllerPostJournalEntry(requestParameters: ERControllerPostJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض طلب إجازة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerRejectLeaveRequestRaw(requestParameters: ERControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض طلب إجازة
     */
    eRControllerRejectLeaveRequest(requestParameters: ERControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث موظف
     * @param {string} id 
     * @param {UpdateEmployeeDto} updateEmployeeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ERSystemApiInterface
     */
    eRControllerUpdateEmployeeRaw(requestParameters: ERControllerUpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث موظف
     */
    eRControllerUpdateEmployee(requestParameters: ERControllerUpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class ERSystemApi extends runtime.BaseAPI implements ERSystemApiInterface {

    /**
     * الموافقة على طلب إجازة
     */
    async eRControllerApproveLeaveRequestRaw(requestParameters: ERControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerApproveLeaveRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/leave-requests/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على طلب إجازة
     */
    async eRControllerApproveLeaveRequest(requestParameters: ERControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerApproveLeaveRequestRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على كشف راتب
     */
    async eRControllerApprovePayrollRaw(requestParameters: ERControllerApprovePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerApprovePayroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/payroll/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على كشف راتب
     */
    async eRControllerApprovePayroll(requestParameters: ERControllerApprovePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerApprovePayrollRaw(requestParameters, initOverrides);
    }

    /**
     * تسجيل حضور
     */
    async eRControllerCheckInRaw(requestParameters: ERControllerCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eRControllerCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'eRControllerCheckInRequest',
                'Required parameter "eRControllerCheckInRequest" was null or undefined when calling eRControllerCheckIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/attendance/check-in`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ERControllerCheckInRequestToJSON(requestParameters['eRControllerCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل حضور
     */
    async eRControllerCheckIn(requestParameters: ERControllerCheckInOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerCheckInRaw(requestParameters, initOverrides);
    }

    /**
     * تسجيل انصراف
     */
    async eRControllerCheckOutRaw(requestParameters: ERControllerCheckOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eRControllerCheckInRequest'] == null) {
            throw new runtime.RequiredError(
                'eRControllerCheckInRequest',
                'Required parameter "eRControllerCheckInRequest" was null or undefined when calling eRControllerCheckOut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/attendance/check-out`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ERControllerCheckInRequestToJSON(requestParameters['eRControllerCheckInRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل انصراف
     */
    async eRControllerCheckOut(requestParameters: ERControllerCheckOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerCheckOutRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء حساب
     */
    async eRControllerCreateAccountRaw(requestParameters: ERControllerCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createChartAccountDto'] == null) {
            throw new runtime.RequiredError(
                'createChartAccountDto',
                'Required parameter "createChartAccountDto" was null or undefined when calling eRControllerCreateAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChartAccountDtoToJSON(requestParameters['createChartAccountDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء حساب
     */
    async eRControllerCreateAccount(requestParameters: ERControllerCreateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerCreateAccountRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة موظف جديد
     */
    async eRControllerCreateEmployeeRaw(requestParameters: ERControllerCreateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createEmployeeDto'] == null) {
            throw new runtime.RequiredError(
                'createEmployeeDto',
                'Required parameter "createEmployeeDto" was null or undefined when calling eRControllerCreateEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/employees`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmployeeDtoToJSON(requestParameters['createEmployeeDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة موظف جديد
     */
    async eRControllerCreateEmployee(requestParameters: ERControllerCreateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerCreateEmployeeRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء قيد يومية
     */
    async eRControllerCreateJournalEntryRaw(requestParameters: ERControllerCreateJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createJournalEntryDto'] == null) {
            throw new runtime.RequiredError(
                'createJournalEntryDto',
                'Required parameter "createJournalEntryDto" was null or undefined when calling eRControllerCreateJournalEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/journal-entries`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateJournalEntryDtoToJSON(requestParameters['createJournalEntryDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء قيد يومية
     */
    async eRControllerCreateJournalEntry(requestParameters: ERControllerCreateJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerCreateJournalEntryRaw(requestParameters, initOverrides);
    }

    /**
     * تقديم طلب إجازة
     */
    async eRControllerCreateLeaveRequestRaw(requestParameters: ERControllerCreateLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createLeaveRequestDto'] == null) {
            throw new runtime.RequiredError(
                'createLeaveRequestDto',
                'Required parameter "createLeaveRequestDto" was null or undefined when calling eRControllerCreateLeaveRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/leave-requests`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLeaveRequestDtoToJSON(requestParameters['createLeaveRequestDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تقديم طلب إجازة
     */
    async eRControllerCreateLeaveRequest(requestParameters: ERControllerCreateLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerCreateLeaveRequestRaw(requestParameters, initOverrides);
    }

    /**
     * حذف أصل
     */
    async eRControllerDeleteAssetRaw(requestParameters: ERControllerDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerDeleteAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/assets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف أصل
     */
    async eRControllerDeleteAsset(requestParameters: ERControllerDeleteAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDeleteAssetRaw(requestParameters, initOverrides);
    }

    /**
     * حذف مستندات متعددة
     */
    async eRControllerDeleteBulkDocumentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/documents/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف مستندات متعددة
     */
    async eRControllerDeleteBulkDocuments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDeleteBulkDocumentsRaw(initOverrides);
    }

    /**
     * حذف حساب من دليل الحسابات
     */
    async eRControllerDeleteChartAccountRaw(requestParameters: ERControllerDeleteChartAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerDeleteChartAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/accounts/chart/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف حساب من دليل الحسابات
     */
    async eRControllerDeleteChartAccount(requestParameters: ERControllerDeleteChartAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDeleteChartAccountRaw(requestParameters, initOverrides);
    }

    /**
     * حذف مستند
     */
    async eRControllerDeleteDocumentRaw(requestParameters: ERControllerDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerDeleteDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/documents/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف مستند
     */
    async eRControllerDeleteDocument(requestParameters: ERControllerDeleteDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDeleteDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * حذف موظف
     */
    async eRControllerDeleteEmployeeRaw(requestParameters: ERControllerDeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerDeleteEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/employees/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف موظف
     */
    async eRControllerDeleteEmployee(requestParameters: ERControllerDeleteEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDeleteEmployeeRaw(requestParameters, initOverrides);
    }

    /**
     * حذف كشف راتب
     */
    async eRControllerDeletePayrollRaw(requestParameters: ERControllerDeletePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerDeletePayroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/payroll/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف كشف راتب
     */
    async eRControllerDeletePayroll(requestParameters: ERControllerDeletePayrollRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDeletePayrollRaw(requestParameters, initOverrides);
    }

    /**
     * تنزيل مستند
     */
    async eRControllerDownloadDocumentRaw(requestParameters: ERControllerDownloadDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerDownloadDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/documents/{id}/download`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تنزيل مستند
     */
    async eRControllerDownloadDocument(requestParameters: ERControllerDownloadDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerDownloadDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * تصدير مستندات
     */
    async eRControllerExportDocumentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/documents/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تصدير مستندات
     */
    async eRControllerExportDocuments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerExportDocumentsRaw(initOverrides);
    }

    /**
     * إنشاء كشف راتب
     */
    async eRControllerGeneratePayrollRaw(requestParameters: ERControllerGeneratePayrollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eRControllerGeneratePayrollRequest'] == null) {
            throw new runtime.RequiredError(
                'eRControllerGeneratePayrollRequest',
                'Required parameter "eRControllerGeneratePayrollRequest" was null or undefined when calling eRControllerGeneratePayroll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/payroll/generate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ERControllerGeneratePayrollRequestToJSON(requestParameters['eRControllerGeneratePayrollRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء كشف راتب
     */
    async eRControllerGeneratePayroll(requestParameters: ERControllerGeneratePayrollOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGeneratePayrollRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على حساب
     */
    async eRControllerGetAccountRaw(requestParameters: ERControllerGetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerGetAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/accounts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على حساب
     */
    async eRControllerGetAccount(requestParameters: ERControllerGetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetAccountRaw(requestParameters, initOverrides);
    }

    /**
     * دليل الحسابات
     */
    async eRControllerGetAccountsRaw(requestParameters: ERControllerGetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling eRControllerGetAccounts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/accounts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * دليل الحسابات
     */
    async eRControllerGetAccounts(requestParameters: ERControllerGetAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetAccountsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على كل الموظفين
     */
    async eRControllerGetAllEmployeesRaw(requestParameters: ERControllerGetAllEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling eRControllerGetAllEmployees().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/employees`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على كل الموظفين
     */
    async eRControllerGetAllEmployees(requestParameters: ERControllerGetAllEmployeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetAllEmployeesRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على موظف محدد
     */
    async eRControllerGetEmployeeRaw(requestParameters: ERControllerGetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerGetEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/employees/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على موظف محدد
     */
    async eRControllerGetEmployee(requestParameters: ERControllerGetEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetEmployeeRaw(requestParameters, initOverrides);
    }

    /**
     * سجل حضور موظف
     */
    async eRControllerGetEmployeeAttendanceRaw(requestParameters: ERControllerGetEmployeeAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['employeeId'] == null) {
            throw new runtime.RequiredError(
                'employeeId',
                'Required parameter "employeeId" was null or undefined when calling eRControllerGetEmployeeAttendance().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling eRControllerGetEmployeeAttendance().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling eRControllerGetEmployeeAttendance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/attendance/{employeeId}`;
        urlPath = urlPath.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters['employeeId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل حضور موظف
     */
    async eRControllerGetEmployeeAttendance(requestParameters: ERControllerGetEmployeeAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetEmployeeAttendanceRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على قيود اليومية
     */
    async eRControllerGetJournalEntriesRaw(requestParameters: ERControllerGetJournalEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling eRControllerGetJournalEntries().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling eRControllerGetJournalEntries().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling eRControllerGetJournalEntries().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling eRControllerGetJournalEntries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/journal-entries`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على قيود اليومية
     */
    async eRControllerGetJournalEntries(requestParameters: ERControllerGetJournalEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetJournalEntriesRaw(requestParameters, initOverrides);
    }

    /**
     * ميزان المراجعة
     */
    async eRControllerGetTrialBalanceRaw(requestParameters: ERControllerGetTrialBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling eRControllerGetTrialBalance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/reports/trial-balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ميزان المراجعة
     */
    async eRControllerGetTrialBalance(requestParameters: ERControllerGetTrialBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerGetTrialBalanceRaw(requestParameters, initOverrides);
    }

    /**
     * تحديد كدفع
     */
    async eRControllerMarkAsPaidRaw(requestParameters: ERControllerMarkAsPaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerMarkAsPaid().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/payroll/{id}/mark-paid`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديد كدفع
     */
    async eRControllerMarkAsPaid(requestParameters: ERControllerMarkAsPaidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerMarkAsPaidRaw(requestParameters, initOverrides);
    }

    /**
     * ترحيل قيد
     */
    async eRControllerPostJournalEntryRaw(requestParameters: ERControllerPostJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerPostJournalEntry().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/journal-entries/{id}/post`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ترحيل قيد
     */
    async eRControllerPostJournalEntry(requestParameters: ERControllerPostJournalEntryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerPostJournalEntryRaw(requestParameters, initOverrides);
    }

    /**
     * رفض طلب إجازة
     */
    async eRControllerRejectLeaveRequestRaw(requestParameters: ERControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerRejectLeaveRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/leave-requests/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض طلب إجازة
     */
    async eRControllerRejectLeaveRequest(requestParameters: ERControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerRejectLeaveRequestRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث موظف
     */
    async eRControllerUpdateEmployeeRaw(requestParameters: ERControllerUpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eRControllerUpdateEmployee().'
            );
        }

        if (requestParameters['updateEmployeeDto'] == null) {
            throw new runtime.RequiredError(
                'updateEmployeeDto',
                'Required parameter "updateEmployeeDto" was null or undefined when calling eRControllerUpdateEmployee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/er/employees/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmployeeDtoToJSON(requestParameters['updateEmployeeDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث موظف
     */
    async eRControllerUpdateEmployee(requestParameters: ERControllerUpdateEmployeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eRControllerUpdateEmployeeRaw(requestParameters, initOverrides);
    }

}
