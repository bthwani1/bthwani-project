/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCommissionDto,
  CreateFinancialCouponDto,
  FinanceControllerCreateCommissionPlanRequest,
  FinanceControllerCreatePayoutBatchRequest,
  FinanceControllerCreateReconciliationRequest,
  FinanceControllerGenerateDailyReportRequest,
} from '../models/index';
import {
    CreateCommissionDtoFromJSON,
    CreateCommissionDtoToJSON,
    CreateFinancialCouponDtoFromJSON,
    CreateFinancialCouponDtoToJSON,
    FinanceControllerCreateCommissionPlanRequestFromJSON,
    FinanceControllerCreateCommissionPlanRequestToJSON,
    FinanceControllerCreatePayoutBatchRequestFromJSON,
    FinanceControllerCreatePayoutBatchRequestToJSON,
    FinanceControllerCreateReconciliationRequestFromJSON,
    FinanceControllerCreateReconciliationRequestToJSON,
    FinanceControllerGenerateDailyReportRequestFromJSON,
    FinanceControllerGenerateDailyReportRequestToJSON,
} from '../models/index';

export interface FinanceControllerAddActualTotalsRequest {
    id: string;
}

export interface FinanceControllerAddReconciliationIssueRequest {
    id: string;
}

export interface FinanceControllerApproveCommissionRequest {
    id: string;
}

export interface FinanceControllerApprovePayoutBatchRequest {
    id: string;
    body: object;
}

export interface FinanceControllerApproveSettlementRequest {
    id: string;
    body: object;
}

export interface FinanceControllerCancelCommissionRequest {
    id: string;
}

export interface FinanceControllerCompletePayoutBatchRequest {
    id: string;
}

export interface FinanceControllerCreateCommissionRequest {
    createCommissionDto: CreateCommissionDto;
}

export interface FinanceControllerCreateCommissionPlanOperationRequest {
    financeControllerCreateCommissionPlanRequest: FinanceControllerCreateCommissionPlanRequest;
}

export interface FinanceControllerCreateCouponRequest {
    createFinancialCouponDto: CreateFinancialCouponDto;
}

export interface FinanceControllerCreatePayoutBatchOperationRequest {
    financeControllerCreatePayoutBatchRequest: FinanceControllerCreatePayoutBatchRequest;
}

export interface FinanceControllerCreateReconciliationOperationRequest {
    financeControllerCreateReconciliationRequest: FinanceControllerCreateReconciliationRequest;
}

export interface FinanceControllerCreateSettlementRequest {
    body: object;
}

export interface FinanceControllerFinalizeReportRequest {
    id: string;
}

export interface FinanceControllerGenerateDailyReportOperationRequest {
    financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest;
}

export interface FinanceControllerGetCouponsRequest {
    isActive: boolean;
}

export interface FinanceControllerGetDailyReportRequest {
    date: string;
}

export interface FinanceControllerGetEntitySettlementsRequest {
    entityId: string;
    entityModel: string;
    status: string;
}

export interface FinanceControllerGetMyCommissionsRequest {
    status: string;
}

export interface FinanceControllerGetPayoutBatchRequest {
    id: string;
}

export interface FinanceControllerGetPayoutBatchItemsRequest {
    id: string;
}

export interface FinanceControllerGetPayoutBatchesRequest {
    status: string;
    limit: number;
    cursor: string;
}

export interface FinanceControllerGetReconciliationRequest {
    id: string;
}

export interface FinanceControllerGetReconciliationsRequest {
    status: string;
}

export interface FinanceControllerGetReportsRequest {
    startDate: string;
    endDate: string;
}

export interface FinanceControllerGetSettlementRequest {
    id: string;
}

export interface FinanceControllerResolveReconciliationIssueRequest {
    id: string;
    issueIndex: string;
}

export interface FinanceControllerUpdateCommissionPlanRequest {
    id: string;
}

export interface FinanceControllerUpdateCouponRequest {
    id: string;
    body: object;
}

export interface FinanceControllerValidateCouponRequest {
    body: object;
}

/**
 * FinanceApi - interface
 * 
 * @export
 * @interface FinanceApiInterface
 */
export interface FinanceApiInterface {
    /**
     * 
     * @summary إضافة الإجماليات الفعلية
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerAddActualTotalsRaw(requestParameters: FinanceControllerAddActualTotalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة الإجماليات الفعلية
     */
    financeControllerAddActualTotals(requestParameters: FinanceControllerAddActualTotalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة مشكلة للمطابقة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerAddReconciliationIssueRaw(requestParameters: FinanceControllerAddReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة مشكلة للمطابقة
     */
    financeControllerAddReconciliationIssue(requestParameters: FinanceControllerAddReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على عمولة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerApproveCommissionRaw(requestParameters: FinanceControllerApproveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على عمولة
     */
    financeControllerApproveCommission(requestParameters: FinanceControllerApproveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على دفعة
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerApprovePayoutBatchRaw(requestParameters: FinanceControllerApprovePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على دفعة
     */
    financeControllerApprovePayoutBatch(requestParameters: FinanceControllerApprovePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على تسوية
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerApproveSettlementRaw(requestParameters: FinanceControllerApproveSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على تسوية
     */
    financeControllerApproveSettlement(requestParameters: FinanceControllerApproveSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء عمولة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCancelCommissionRaw(requestParameters: FinanceControllerCancelCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء عمولة
     */
    financeControllerCancelCommission(requestParameters: FinanceControllerCancelCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إكمال دفعة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCompletePayoutBatchRaw(requestParameters: FinanceControllerCompletePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إكمال دفعة
     */
    financeControllerCompletePayoutBatch(requestParameters: FinanceControllerCompletePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء عمولة جديدة
     * @param {CreateCommissionDto} createCommissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCreateCommissionRaw(requestParameters: FinanceControllerCreateCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء عمولة جديدة
     */
    financeControllerCreateCommission(requestParameters: FinanceControllerCreateCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء خطة عمولة
     * @param {FinanceControllerCreateCommissionPlanRequest} financeControllerCreateCommissionPlanRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCreateCommissionPlanRaw(requestParameters: FinanceControllerCreateCommissionPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء خطة عمولة
     */
    financeControllerCreateCommissionPlan(requestParameters: FinanceControllerCreateCommissionPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء كوبون
     * @param {CreateFinancialCouponDto} createFinancialCouponDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCreateCouponRaw(requestParameters: FinanceControllerCreateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء كوبون
     */
    financeControllerCreateCoupon(requestParameters: FinanceControllerCreateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء دفعة من العمولات
     * @param {FinanceControllerCreatePayoutBatchRequest} financeControllerCreatePayoutBatchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCreatePayoutBatchRaw(requestParameters: FinanceControllerCreatePayoutBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء دفعة من العمولات
     */
    financeControllerCreatePayoutBatch(requestParameters: FinanceControllerCreatePayoutBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء مطابقة مالية
     * @param {FinanceControllerCreateReconciliationRequest} financeControllerCreateReconciliationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCreateReconciliationRaw(requestParameters: FinanceControllerCreateReconciliationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء مطابقة مالية
     */
    financeControllerCreateReconciliation(requestParameters: FinanceControllerCreateReconciliationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء تسوية
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerCreateSettlementRaw(requestParameters: FinanceControllerCreateSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء تسوية
     */
    financeControllerCreateSettlement(requestParameters: FinanceControllerCreateSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تثبيت تقرير
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerFinalizeReportRaw(requestParameters: FinanceControllerFinalizeReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تثبيت تقرير
     */
    financeControllerFinalizeReport(requestParameters: FinanceControllerFinalizeReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء تقرير يومي
     * @param {FinanceControllerGenerateDailyReportRequest} financeControllerGenerateDailyReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGenerateDailyReportRaw(requestParameters: FinanceControllerGenerateDailyReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء تقرير يومي
     */
    financeControllerGenerateDailyReport(requestParameters: FinanceControllerGenerateDailyReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary خطط العمولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetCommissionPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * خطط العمولات
     */
    financeControllerGetCommissionPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على كل الكوبونات
     * @param {boolean} isActive 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetCouponsRaw(requestParameters: FinanceControllerGetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على كل الكوبونات
     */
    financeControllerGetCoupons(requestParameters: FinanceControllerGetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على تقرير يومي
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetDailyReportRaw(requestParameters: FinanceControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على تقرير يومي
     */
    financeControllerGetDailyReport(requestParameters: FinanceControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على تسويات كيان
     * @param {string} entityId 
     * @param {string} entityModel 
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetEntitySettlementsRaw(requestParameters: FinanceControllerGetEntitySettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على تسويات كيان
     */
    financeControllerGetEntitySettlements(requestParameters: FinanceControllerGetEntitySettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائيات عمولاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetMyCommissionStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائيات عمولاتي
     */
    financeControllerGetMyCommissionStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على عمولاتي
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetMyCommissionsRaw(requestParameters: FinanceControllerGetMyCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على عمولاتي
     */
    financeControllerGetMyCommissions(requestParameters: FinanceControllerGetMyCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على دفعة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetPayoutBatchRaw(requestParameters: FinanceControllerGetPayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على دفعة
     */
    financeControllerGetPayoutBatch(requestParameters: FinanceControllerGetPayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على عناصر دفعة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetPayoutBatchItemsRaw(requestParameters: FinanceControllerGetPayoutBatchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على عناصر دفعة
     */
    financeControllerGetPayoutBatchItems(requestParameters: FinanceControllerGetPayoutBatchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على كل الدفعات
     * @param {string} status 
     * @param {number} limit 
     * @param {string} cursor 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetPayoutBatchesRaw(requestParameters: FinanceControllerGetPayoutBatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على كل الدفعات
     */
    financeControllerGetPayoutBatches(requestParameters: FinanceControllerGetPayoutBatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على مطابقة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetReconciliationRaw(requestParameters: FinanceControllerGetReconciliationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على مطابقة
     */
    financeControllerGetReconciliation(requestParameters: FinanceControllerGetReconciliationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على كل المطابقات
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetReconciliationsRaw(requestParameters: FinanceControllerGetReconciliationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على كل المطابقات
     */
    financeControllerGetReconciliations(requestParameters: FinanceControllerGetReconciliationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على التقارير
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetReportsRaw(requestParameters: FinanceControllerGetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على التقارير
     */
    financeControllerGetReports(requestParameters: FinanceControllerGetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على تسوية
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerGetSettlementRaw(requestParameters: FinanceControllerGetSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على تسوية
     */
    financeControllerGetSettlement(requestParameters: FinanceControllerGetSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حل مشكلة في المطابقة
     * @param {string} id 
     * @param {string} issueIndex 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerResolveReconciliationIssueRaw(requestParameters: FinanceControllerResolveReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حل مشكلة في المطابقة
     */
    financeControllerResolveReconciliationIssue(requestParameters: FinanceControllerResolveReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث خطة عمولة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerUpdateCommissionPlanRaw(requestParameters: FinanceControllerUpdateCommissionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث خطة عمولة
     */
    financeControllerUpdateCommissionPlan(requestParameters: FinanceControllerUpdateCommissionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث كوبون
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerUpdateCouponRaw(requestParameters: FinanceControllerUpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث كوبون
     */
    financeControllerUpdateCoupon(requestParameters: FinanceControllerUpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التحقق من كوبون
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceApiInterface
     */
    financeControllerValidateCouponRaw(requestParameters: FinanceControllerValidateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من كوبون
     */
    financeControllerValidateCoupon(requestParameters: FinanceControllerValidateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class FinanceApi extends runtime.BaseAPI implements FinanceApiInterface {

    /**
     * إضافة الإجماليات الفعلية
     */
    async financeControllerAddActualTotalsRaw(requestParameters: FinanceControllerAddActualTotalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerAddActualTotals().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reconciliations/{id}/actual-totals`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة الإجماليات الفعلية
     */
    async financeControllerAddActualTotals(requestParameters: FinanceControllerAddActualTotalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerAddActualTotalsRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة مشكلة للمطابقة
     */
    async financeControllerAddReconciliationIssueRaw(requestParameters: FinanceControllerAddReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerAddReconciliationIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reconciliations/{id}/issues`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة مشكلة للمطابقة
     */
    async financeControllerAddReconciliationIssue(requestParameters: FinanceControllerAddReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerAddReconciliationIssueRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على عمولة
     */
    async financeControllerApproveCommissionRaw(requestParameters: FinanceControllerApproveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerApproveCommission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commissions/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على عمولة
     */
    async financeControllerApproveCommission(requestParameters: FinanceControllerApproveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerApproveCommissionRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على دفعة
     */
    async financeControllerApprovePayoutBatchRaw(requestParameters: FinanceControllerApprovePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerApprovePayoutBatch().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling financeControllerApprovePayoutBatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/payouts/batches/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على دفعة
     */
    async financeControllerApprovePayoutBatch(requestParameters: FinanceControllerApprovePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerApprovePayoutBatchRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على تسوية
     */
    async financeControllerApproveSettlementRaw(requestParameters: FinanceControllerApproveSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerApproveSettlement().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling financeControllerApproveSettlement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/settlements/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على تسوية
     */
    async financeControllerApproveSettlement(requestParameters: FinanceControllerApproveSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerApproveSettlementRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء عمولة
     */
    async financeControllerCancelCommissionRaw(requestParameters: FinanceControllerCancelCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerCancelCommission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commissions/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء عمولة
     */
    async financeControllerCancelCommission(requestParameters: FinanceControllerCancelCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCancelCommissionRaw(requestParameters, initOverrides);
    }

    /**
     * إكمال دفعة
     */
    async financeControllerCompletePayoutBatchRaw(requestParameters: FinanceControllerCompletePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerCompletePayoutBatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/payouts/batches/{id}/complete`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إكمال دفعة
     */
    async financeControllerCompletePayoutBatch(requestParameters: FinanceControllerCompletePayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCompletePayoutBatchRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء عمولة جديدة
     */
    async financeControllerCreateCommissionRaw(requestParameters: FinanceControllerCreateCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createCommissionDto'] == null) {
            throw new runtime.RequiredError(
                'createCommissionDto',
                'Required parameter "createCommissionDto" was null or undefined when calling financeControllerCreateCommission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commissions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommissionDtoToJSON(requestParameters['createCommissionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء عمولة جديدة
     */
    async financeControllerCreateCommission(requestParameters: FinanceControllerCreateCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCreateCommissionRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء خطة عمولة
     */
    async financeControllerCreateCommissionPlanRaw(requestParameters: FinanceControllerCreateCommissionPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['financeControllerCreateCommissionPlanRequest'] == null) {
            throw new runtime.RequiredError(
                'financeControllerCreateCommissionPlanRequest',
                'Required parameter "financeControllerCreateCommissionPlanRequest" was null or undefined when calling financeControllerCreateCommissionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commission-plans`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinanceControllerCreateCommissionPlanRequestToJSON(requestParameters['financeControllerCreateCommissionPlanRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء خطة عمولة
     */
    async financeControllerCreateCommissionPlan(requestParameters: FinanceControllerCreateCommissionPlanOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCreateCommissionPlanRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء كوبون
     */
    async financeControllerCreateCouponRaw(requestParameters: FinanceControllerCreateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createFinancialCouponDto'] == null) {
            throw new runtime.RequiredError(
                'createFinancialCouponDto',
                'Required parameter "createFinancialCouponDto" was null or undefined when calling financeControllerCreateCoupon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/coupons`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFinancialCouponDtoToJSON(requestParameters['createFinancialCouponDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء كوبون
     */
    async financeControllerCreateCoupon(requestParameters: FinanceControllerCreateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCreateCouponRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء دفعة من العمولات
     */
    async financeControllerCreatePayoutBatchRaw(requestParameters: FinanceControllerCreatePayoutBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['financeControllerCreatePayoutBatchRequest'] == null) {
            throw new runtime.RequiredError(
                'financeControllerCreatePayoutBatchRequest',
                'Required parameter "financeControllerCreatePayoutBatchRequest" was null or undefined when calling financeControllerCreatePayoutBatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/payouts/batches`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinanceControllerCreatePayoutBatchRequestToJSON(requestParameters['financeControllerCreatePayoutBatchRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء دفعة من العمولات
     */
    async financeControllerCreatePayoutBatch(requestParameters: FinanceControllerCreatePayoutBatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCreatePayoutBatchRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء مطابقة مالية
     */
    async financeControllerCreateReconciliationRaw(requestParameters: FinanceControllerCreateReconciliationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['financeControllerCreateReconciliationRequest'] == null) {
            throw new runtime.RequiredError(
                'financeControllerCreateReconciliationRequest',
                'Required parameter "financeControllerCreateReconciliationRequest" was null or undefined when calling financeControllerCreateReconciliation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reconciliations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinanceControllerCreateReconciliationRequestToJSON(requestParameters['financeControllerCreateReconciliationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء مطابقة مالية
     */
    async financeControllerCreateReconciliation(requestParameters: FinanceControllerCreateReconciliationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCreateReconciliationRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء تسوية
     */
    async financeControllerCreateSettlementRaw(requestParameters: FinanceControllerCreateSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling financeControllerCreateSettlement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/settlements`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء تسوية
     */
    async financeControllerCreateSettlement(requestParameters: FinanceControllerCreateSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerCreateSettlementRaw(requestParameters, initOverrides);
    }

    /**
     * تثبيت تقرير
     */
    async financeControllerFinalizeReportRaw(requestParameters: FinanceControllerFinalizeReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerFinalizeReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reports/{id}/finalize`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تثبيت تقرير
     */
    async financeControllerFinalizeReport(requestParameters: FinanceControllerFinalizeReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerFinalizeReportRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء تقرير يومي
     */
    async financeControllerGenerateDailyReportRaw(requestParameters: FinanceControllerGenerateDailyReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['financeControllerGenerateDailyReportRequest'] == null) {
            throw new runtime.RequiredError(
                'financeControllerGenerateDailyReportRequest',
                'Required parameter "financeControllerGenerateDailyReportRequest" was null or undefined when calling financeControllerGenerateDailyReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reports/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinanceControllerGenerateDailyReportRequestToJSON(requestParameters['financeControllerGenerateDailyReportRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء تقرير يومي
     */
    async financeControllerGenerateDailyReport(requestParameters: FinanceControllerGenerateDailyReportOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGenerateDailyReportRaw(requestParameters, initOverrides);
    }

    /**
     * خطط العمولات
     */
    async financeControllerGetCommissionPlansRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commission-plans`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * خطط العمولات
     */
    async financeControllerGetCommissionPlans(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetCommissionPlansRaw(initOverrides);
    }

    /**
     * الحصول على كل الكوبونات
     */
    async financeControllerGetCouponsRaw(requestParameters: FinanceControllerGetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['isActive'] == null) {
            throw new runtime.RequiredError(
                'isActive',
                'Required parameter "isActive" was null or undefined when calling financeControllerGetCoupons().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/coupons`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على كل الكوبونات
     */
    async financeControllerGetCoupons(requestParameters: FinanceControllerGetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetCouponsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على تقرير يومي
     */
    async financeControllerGetDailyReportRaw(requestParameters: FinanceControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling financeControllerGetDailyReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reports/daily/{date}`;
        urlPath = urlPath.replace(`{${"date"}}`, encodeURIComponent(String(requestParameters['date'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على تقرير يومي
     */
    async financeControllerGetDailyReport(requestParameters: FinanceControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetDailyReportRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على تسويات كيان
     */
    async financeControllerGetEntitySettlementsRaw(requestParameters: FinanceControllerGetEntitySettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['entityId'] == null) {
            throw new runtime.RequiredError(
                'entityId',
                'Required parameter "entityId" was null or undefined when calling financeControllerGetEntitySettlements().'
            );
        }

        if (requestParameters['entityModel'] == null) {
            throw new runtime.RequiredError(
                'entityModel',
                'Required parameter "entityModel" was null or undefined when calling financeControllerGetEntitySettlements().'
            );
        }

        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling financeControllerGetEntitySettlements().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['entityModel'] != null) {
            queryParameters['entityModel'] = requestParameters['entityModel'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/settlements/entity/{entityId}`;
        urlPath = urlPath.replace(`{${"entityId"}}`, encodeURIComponent(String(requestParameters['entityId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على تسويات كيان
     */
    async financeControllerGetEntitySettlements(requestParameters: FinanceControllerGetEntitySettlementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetEntitySettlementsRaw(requestParameters, initOverrides);
    }

    /**
     * إحصائيات عمولاتي
     */
    async financeControllerGetMyCommissionStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commissions/stats/my`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائيات عمولاتي
     */
    async financeControllerGetMyCommissionStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetMyCommissionStatsRaw(initOverrides);
    }

    /**
     * الحصول على عمولاتي
     */
    async financeControllerGetMyCommissionsRaw(requestParameters: FinanceControllerGetMyCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling financeControllerGetMyCommissions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commissions/my`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على عمولاتي
     */
    async financeControllerGetMyCommissions(requestParameters: FinanceControllerGetMyCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetMyCommissionsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على دفعة
     */
    async financeControllerGetPayoutBatchRaw(requestParameters: FinanceControllerGetPayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerGetPayoutBatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/payouts/batches/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على دفعة
     */
    async financeControllerGetPayoutBatch(requestParameters: FinanceControllerGetPayoutBatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetPayoutBatchRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على عناصر دفعة
     */
    async financeControllerGetPayoutBatchItemsRaw(requestParameters: FinanceControllerGetPayoutBatchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerGetPayoutBatchItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/payouts/batches/{id}/items`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على عناصر دفعة
     */
    async financeControllerGetPayoutBatchItems(requestParameters: FinanceControllerGetPayoutBatchItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetPayoutBatchItemsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على كل الدفعات
     */
    async financeControllerGetPayoutBatchesRaw(requestParameters: FinanceControllerGetPayoutBatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling financeControllerGetPayoutBatches().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling financeControllerGetPayoutBatches().'
            );
        }

        if (requestParameters['cursor'] == null) {
            throw new runtime.RequiredError(
                'cursor',
                'Required parameter "cursor" was null or undefined when calling financeControllerGetPayoutBatches().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/payouts/batches`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على كل الدفعات
     */
    async financeControllerGetPayoutBatches(requestParameters: FinanceControllerGetPayoutBatchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetPayoutBatchesRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على مطابقة
     */
    async financeControllerGetReconciliationRaw(requestParameters: FinanceControllerGetReconciliationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerGetReconciliation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reconciliations/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على مطابقة
     */
    async financeControllerGetReconciliation(requestParameters: FinanceControllerGetReconciliationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetReconciliationRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على كل المطابقات
     */
    async financeControllerGetReconciliationsRaw(requestParameters: FinanceControllerGetReconciliationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling financeControllerGetReconciliations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reconciliations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على كل المطابقات
     */
    async financeControllerGetReconciliations(requestParameters: FinanceControllerGetReconciliationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetReconciliationsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على التقارير
     */
    async financeControllerGetReportsRaw(requestParameters: FinanceControllerGetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling financeControllerGetReports().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling financeControllerGetReports().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reports`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على التقارير
     */
    async financeControllerGetReports(requestParameters: FinanceControllerGetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetReportsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على تسوية
     */
    async financeControllerGetSettlementRaw(requestParameters: FinanceControllerGetSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerGetSettlement().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/settlements/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على تسوية
     */
    async financeControllerGetSettlement(requestParameters: FinanceControllerGetSettlementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerGetSettlementRaw(requestParameters, initOverrides);
    }

    /**
     * حل مشكلة في المطابقة
     */
    async financeControllerResolveReconciliationIssueRaw(requestParameters: FinanceControllerResolveReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerResolveReconciliationIssue().'
            );
        }

        if (requestParameters['issueIndex'] == null) {
            throw new runtime.RequiredError(
                'issueIndex',
                'Required parameter "issueIndex" was null or undefined when calling financeControllerResolveReconciliationIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/reconciliations/{id}/issues/{issueIndex}/resolve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"issueIndex"}}`, encodeURIComponent(String(requestParameters['issueIndex'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حل مشكلة في المطابقة
     */
    async financeControllerResolveReconciliationIssue(requestParameters: FinanceControllerResolveReconciliationIssueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerResolveReconciliationIssueRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث خطة عمولة
     */
    async financeControllerUpdateCommissionPlanRaw(requestParameters: FinanceControllerUpdateCommissionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerUpdateCommissionPlan().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/commission-plans/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث خطة عمولة
     */
    async financeControllerUpdateCommissionPlan(requestParameters: FinanceControllerUpdateCommissionPlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerUpdateCommissionPlanRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث كوبون
     */
    async financeControllerUpdateCouponRaw(requestParameters: FinanceControllerUpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling financeControllerUpdateCoupon().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling financeControllerUpdateCoupon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/coupons/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث كوبون
     */
    async financeControllerUpdateCoupon(requestParameters: FinanceControllerUpdateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerUpdateCouponRaw(requestParameters, initOverrides);
    }

    /**
     * التحقق من كوبون
     */
    async financeControllerValidateCouponRaw(requestParameters: FinanceControllerValidateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling financeControllerValidateCoupon().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/finance/coupons/validate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من كوبون
     */
    async financeControllerValidateCoupon(requestParameters: FinanceControllerValidateCouponRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.financeControllerValidateCouponRaw(requestParameters, initOverrides);
    }

}
