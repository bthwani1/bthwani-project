/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAddressDto,
  DeleteUserResponse,
  SetPinDto,
  UpdateUserDto,
  UserControllerChangePinRequest,
  UserControllerSetDefaultAddressAliasRequest,
  VerifyPinDto,
} from '../models/index';
import {
    AddAddressDtoFromJSON,
    AddAddressDtoToJSON,
    DeleteUserResponseFromJSON,
    DeleteUserResponseToJSON,
    SetPinDtoFromJSON,
    SetPinDtoToJSON,
    UpdateUserDtoFromJSON,
    UpdateUserDtoToJSON,
    UserControllerChangePinRequestFromJSON,
    UserControllerChangePinRequestToJSON,
    UserControllerSetDefaultAddressAliasRequestFromJSON,
    UserControllerSetDefaultAddressAliasRequestToJSON,
    VerifyPinDtoFromJSON,
    VerifyPinDtoToJSON,
} from '../models/index';

export interface UserControllerAddAddressRequest {
    addAddressDto: AddAddressDto;
}

export interface UserControllerChangePinOperationRequest {
    userControllerChangePinRequest: UserControllerChangePinRequest;
}

export interface UserControllerDeleteAddressRequest {
    addressId: string;
}

export interface UserControllerDeleteAddressAliasRequest {
    id: string;
}

export interface UserControllerResetPinRequest {
    userId: string;
}

export interface UserControllerSearchUsersRequest {
    q: string;
    cursor?: string;
    limit?: number;
}

export interface UserControllerSetDefaultAddressRequest {
    addressId: string;
}

export interface UserControllerSetDefaultAddressAliasOperationRequest {
    userControllerSetDefaultAddressAliasRequest: UserControllerSetDefaultAddressAliasRequest;
}

export interface UserControllerSetPinRequest {
    setPinDto: SetPinDto;
}

export interface UserControllerUpdateAddressRequest {
    addressId: string;
    addAddressDto: AddAddressDto;
}

export interface UserControllerUpdateAddressAliasRequest {
    id: string;
}

export interface UserControllerUpdateProfileRequest {
    updateUserDto: UpdateUserDto;
}

export interface UserControllerVerifyPinRequest {
    verifyPinDto: VerifyPinDto;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
     * @summary إضافة عنوان توصيل جديد
     * @param {AddAddressDto} addAddressDto بيانات العنوان
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerAddAddressRaw(requestParameters: UserControllerAddAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
     * إضافة عنوان توصيل جديد
     */
    userControllerAddAddress(requestParameters: UserControllerAddAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تغيير PIN الحالي (يتطلب PIN القديم)
     * @summary تغيير رمز PIN
     * @param {UserControllerChangePinRequest} userControllerChangePinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerChangePinRaw(requestParameters: UserControllerChangePinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تغيير PIN الحالي (يتطلب PIN القديم)
     * تغيير رمز PIN
     */
    userControllerChangePin(requestParameters: UserControllerChangePinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تعطيل حساب المستخدم بشكل مؤقت أو دائم
     * @summary إلغاء تفعيل الحساب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerDeactivateAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعطيل حساب المستخدم بشكل مؤقت أو دائم
     * إلغاء تفعيل الحساب
     */
    userControllerDeactivateAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * حذف عنوان توصيل من القائمة
     * @summary حذف عنوان
     * @param {string} addressId معرّف العنوان
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerDeleteAddressRaw(requestParameters: UserControllerDeleteAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف عنوان توصيل من القائمة
     * حذف عنوان
     */
    userControllerDeleteAddress(requestParameters: UserControllerDeleteAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف عنوان (alias)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerDeleteAddressAliasRaw(requestParameters: UserControllerDeleteAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف عنوان (alias)
     */
    userControllerDeleteAddressAlias(requestParameters: UserControllerDeleteAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف حساب المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerDeleteCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserResponse>>;

    /**
     * حذف حساب المستخدم
     */
    userControllerDeleteCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserResponse>;

    /**
     * الحصول على قائمة عناوين التوصيل المحفوظة
     * @summary جلب جميع عناوين المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerGetAddressesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على قائمة عناوين التوصيل المحفوظة
     * جلب جميع عناوين المستخدم
     */
    userControllerGetAddresses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على جميع بيانات المستخدم الحالي
     * @summary جلب بيانات المستخدم الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerGetCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على جميع بيانات المستخدم الحالي
     * جلب بيانات المستخدم الحالي
     */
    userControllerGetCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * التحقق من وجود PIN وحالة القفل
     * @summary حالة رمز PIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerGetPinStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من وجود PIN وحالة القفل
     * حالة رمز PIN
     */
    userControllerGetPinStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إعادة تعيين PIN لمستخدم معين (admin only)
     * @summary إعادة تعيين PIN (للمسؤولين)
     * @param {string} userId معرّف المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerResetPinRaw(requestParameters: UserControllerResetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إعادة تعيين PIN لمستخدم معين (admin only)
     * إعادة تعيين PIN (للمسؤولين)
     */
    userControllerResetPin(requestParameters: UserControllerResetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * البحث في قاعدة بيانات المستخدمين (admin only)
     * @summary البحث عن مستخدمين
     * @param {string} q نص البحث (اسم، رقم، email)
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد النتائج
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerSearchUsersRaw(requestParameters: UserControllerSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * البحث في قاعدة بيانات المستخدمين (admin only)
     * البحث عن مستخدمين
     */
    userControllerSearchUsers(requestParameters: UserControllerSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * جعل عنوان معين هو العنوان الافتراضي للتوصيل
     * @summary تعيين العنوان الافتراضي
     * @param {string} addressId معرّف العنوان
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerSetDefaultAddressRaw(requestParameters: UserControllerSetDefaultAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جعل عنوان معين هو العنوان الافتراضي للتوصيل
     * تعيين العنوان الافتراضي
     */
    userControllerSetDefaultAddress(requestParameters: UserControllerSetDefaultAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعيين العنوان الافتراضي (alias)
     * @param {UserControllerSetDefaultAddressAliasRequest} userControllerSetDefaultAddressAliasRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerSetDefaultAddressAliasRaw(requestParameters: UserControllerSetDefaultAddressAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعيين العنوان الافتراضي (alias)
     */
    userControllerSetDefaultAddressAlias(requestParameters: UserControllerSetDefaultAddressAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
     * @summary تعيين رمز PIN مشفر
     * @param {SetPinDto} setPinDto بيانات PIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerSetPinRaw(requestParameters: UserControllerSetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
     * تعيين رمز PIN مشفر
     */
    userControllerSetPin(requestParameters: UserControllerSetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تعديل بيانات عنوان توصيل محفوظ
     * @summary تحديث عنوان موجود
     * @param {string} addressId معرّف العنوان
     * @param {AddAddressDto} addAddressDto البيانات المراد تحديثها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerUpdateAddressRaw(requestParameters: UserControllerUpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعديل بيانات عنوان توصيل محفوظ
     * تحديث عنوان موجود
     */
    userControllerUpdateAddress(requestParameters: UserControllerUpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث عنوان موجود (alias)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerUpdateAddressAliasRaw(requestParameters: UserControllerUpdateAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث عنوان موجود (alias)
     */
    userControllerUpdateAddressAlias(requestParameters: UserControllerUpdateAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * تحديث بيانات المستخدم الحالي
     * @summary تحديث الملف الشخصي
     * @param {UpdateUserDto} updateUserDto البيانات المراد تحديثها
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerUpdateProfileRaw(requestParameters: UserControllerUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث بيانات المستخدم الحالي
     * تحديث الملف الشخصي
     */
    userControllerUpdateProfile(requestParameters: UserControllerUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * التحقق من صحة رمز PIN مع حماية من Brute Force
     * @summary التحقق من رمز PIN
     * @param {VerifyPinDto} verifyPinDto رمز PIN للتحقق
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    userControllerVerifyPinRaw(requestParameters: UserControllerVerifyPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من صحة رمز PIN مع حماية من Brute Force
     * التحقق من رمز PIN
     */
    userControllerVerifyPin(requestParameters: UserControllerVerifyPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
     * إضافة عنوان توصيل جديد
     */
    async userControllerAddAddressRaw(requestParameters: UserControllerAddAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addAddressDto'] == null) {
            throw new runtime.RequiredError(
                'addAddressDto',
                'Required parameter "addAddressDto" was null or undefined when calling userControllerAddAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/addresses`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAddressDtoToJSON(requestParameters['addAddressDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
     * إضافة عنوان توصيل جديد
     */
    async userControllerAddAddress(requestParameters: UserControllerAddAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerAddAddressRaw(requestParameters, initOverrides);
    }

    /**
     * تغيير PIN الحالي (يتطلب PIN القديم)
     * تغيير رمز PIN
     */
    async userControllerChangePinRaw(requestParameters: UserControllerChangePinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userControllerChangePinRequest'] == null) {
            throw new runtime.RequiredError(
                'userControllerChangePinRequest',
                'Required parameter "userControllerChangePinRequest" was null or undefined when calling userControllerChangePin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/pin/change`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserControllerChangePinRequestToJSON(requestParameters['userControllerChangePinRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تغيير PIN الحالي (يتطلب PIN القديم)
     * تغيير رمز PIN
     */
    async userControllerChangePin(requestParameters: UserControllerChangePinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerChangePinRaw(requestParameters, initOverrides);
    }

    /**
     * تعطيل حساب المستخدم بشكل مؤقت أو دائم
     * إلغاء تفعيل الحساب
     */
    async userControllerDeactivateAccountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/deactivate`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعطيل حساب المستخدم بشكل مؤقت أو دائم
     * إلغاء تفعيل الحساب
     */
    async userControllerDeactivateAccount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerDeactivateAccountRaw(initOverrides);
    }

    /**
     * حذف عنوان توصيل من القائمة
     * حذف عنوان
     */
    async userControllerDeleteAddressRaw(requestParameters: UserControllerDeleteAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling userControllerDeleteAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/addresses/{addressId}`;
        urlPath = urlPath.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف عنوان توصيل من القائمة
     * حذف عنوان
     */
    async userControllerDeleteAddress(requestParameters: UserControllerDeleteAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerDeleteAddressRaw(requestParameters, initOverrides);
    }

    /**
     * حذف عنوان (alias)
     */
    async userControllerDeleteAddressAliasRaw(requestParameters: UserControllerDeleteAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerDeleteAddressAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/address/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف عنوان (alias)
     */
    async userControllerDeleteAddressAlias(requestParameters: UserControllerDeleteAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerDeleteAddressAliasRaw(requestParameters, initOverrides);
    }

    /**
     * حذف حساب المستخدم
     */
    async userControllerDeleteCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserResponseFromJSON(jsonValue));
    }

    /**
     * حذف حساب المستخدم
     */
    async userControllerDeleteCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteUserResponse> {
        const response = await this.userControllerDeleteCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * الحصول على قائمة عناوين التوصيل المحفوظة
     * جلب جميع عناوين المستخدم
     */
    async userControllerGetAddressesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/addresses`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على قائمة عناوين التوصيل المحفوظة
     * جلب جميع عناوين المستخدم
     */
    async userControllerGetAddresses(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerGetAddressesRaw(initOverrides);
    }

    /**
     * الحصول على جميع بيانات المستخدم الحالي
     * جلب بيانات المستخدم الحالي
     */
    async userControllerGetCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على جميع بيانات المستخدم الحالي
     * جلب بيانات المستخدم الحالي
     */
    async userControllerGetCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerGetCurrentUserRaw(initOverrides);
    }

    /**
     * التحقق من وجود PIN وحالة القفل
     * حالة رمز PIN
     */
    async userControllerGetPinStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/pin/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من وجود PIN وحالة القفل
     * حالة رمز PIN
     */
    async userControllerGetPinStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerGetPinStatusRaw(initOverrides);
    }

    /**
     * إعادة تعيين PIN لمستخدم معين (admin only)
     * إعادة تعيين PIN (للمسؤولين)
     */
    async userControllerResetPinRaw(requestParameters: UserControllerResetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling userControllerResetPin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/pin/reset/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إعادة تعيين PIN لمستخدم معين (admin only)
     * إعادة تعيين PIN (للمسؤولين)
     */
    async userControllerResetPin(requestParameters: UserControllerResetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerResetPinRaw(requestParameters, initOverrides);
    }

    /**
     * البحث في قاعدة بيانات المستخدمين (admin only)
     * البحث عن مستخدمين
     */
    async userControllerSearchUsersRaw(requestParameters: UserControllerSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling userControllerSearchUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * البحث في قاعدة بيانات المستخدمين (admin only)
     * البحث عن مستخدمين
     */
    async userControllerSearchUsers(requestParameters: UserControllerSearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerSearchUsersRaw(requestParameters, initOverrides);
    }

    /**
     * جعل عنوان معين هو العنوان الافتراضي للتوصيل
     * تعيين العنوان الافتراضي
     */
    async userControllerSetDefaultAddressRaw(requestParameters: UserControllerSetDefaultAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling userControllerSetDefaultAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/addresses/{addressId}/set-default`;
        urlPath = urlPath.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جعل عنوان معين هو العنوان الافتراضي للتوصيل
     * تعيين العنوان الافتراضي
     */
    async userControllerSetDefaultAddress(requestParameters: UserControllerSetDefaultAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerSetDefaultAddressRaw(requestParameters, initOverrides);
    }

    /**
     * تعيين العنوان الافتراضي (alias)
     */
    async userControllerSetDefaultAddressAliasRaw(requestParameters: UserControllerSetDefaultAddressAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userControllerSetDefaultAddressAliasRequest'] == null) {
            throw new runtime.RequiredError(
                'userControllerSetDefaultAddressAliasRequest',
                'Required parameter "userControllerSetDefaultAddressAliasRequest" was null or undefined when calling userControllerSetDefaultAddressAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/default-address`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserControllerSetDefaultAddressAliasRequestToJSON(requestParameters['userControllerSetDefaultAddressAliasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعيين العنوان الافتراضي (alias)
     */
    async userControllerSetDefaultAddressAlias(requestParameters: UserControllerSetDefaultAddressAliasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerSetDefaultAddressAliasRaw(requestParameters, initOverrides);
    }

    /**
     * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
     * تعيين رمز PIN مشفر
     */
    async userControllerSetPinRaw(requestParameters: UserControllerSetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['setPinDto'] == null) {
            throw new runtime.RequiredError(
                'setPinDto',
                'Required parameter "setPinDto" was null or undefined when calling userControllerSetPin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/pin/set`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetPinDtoToJSON(requestParameters['setPinDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
     * تعيين رمز PIN مشفر
     */
    async userControllerSetPin(requestParameters: UserControllerSetPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerSetPinRaw(requestParameters, initOverrides);
    }

    /**
     * تعديل بيانات عنوان توصيل محفوظ
     * تحديث عنوان موجود
     */
    async userControllerUpdateAddressRaw(requestParameters: UserControllerUpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['addressId'] == null) {
            throw new runtime.RequiredError(
                'addressId',
                'Required parameter "addressId" was null or undefined when calling userControllerUpdateAddress().'
            );
        }

        if (requestParameters['addAddressDto'] == null) {
            throw new runtime.RequiredError(
                'addAddressDto',
                'Required parameter "addAddressDto" was null or undefined when calling userControllerUpdateAddress().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/addresses/{addressId}`;
        urlPath = urlPath.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters['addressId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AddAddressDtoToJSON(requestParameters['addAddressDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعديل بيانات عنوان توصيل محفوظ
     * تحديث عنوان موجود
     */
    async userControllerUpdateAddress(requestParameters: UserControllerUpdateAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUpdateAddressRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث عنوان موجود (alias)
     */
    async userControllerUpdateAddressAliasRaw(requestParameters: UserControllerUpdateAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling userControllerUpdateAddressAlias().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/users/address/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث عنوان موجود (alias)
     */
    async userControllerUpdateAddressAlias(requestParameters: UserControllerUpdateAddressAliasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUpdateAddressAliasRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث بيانات المستخدم الحالي
     * تحديث الملف الشخصي
     */
    async userControllerUpdateProfileRaw(requestParameters: UserControllerUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateUserDto'] == null) {
            throw new runtime.RequiredError(
                'updateUserDto',
                'Required parameter "updateUserDto" was null or undefined when calling userControllerUpdateProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/me`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDtoToJSON(requestParameters['updateUserDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث بيانات المستخدم الحالي
     * تحديث الملف الشخصي
     */
    async userControllerUpdateProfile(requestParameters: UserControllerUpdateProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerUpdateProfileRaw(requestParameters, initOverrides);
    }

    /**
     * التحقق من صحة رمز PIN مع حماية من Brute Force
     * التحقق من رمز PIN
     */
    async userControllerVerifyPinRaw(requestParameters: UserControllerVerifyPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyPinDto'] == null) {
            throw new runtime.RequiredError(
                'verifyPinDto',
                'Required parameter "verifyPinDto" was null or undefined when calling userControllerVerifyPin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/users/pin/verify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyPinDtoToJSON(requestParameters['verifyPinDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من صحة رمز PIN مع حماية من Brute Force
     * التحقق من رمز PIN
     */
    async userControllerVerifyPin(requestParameters: UserControllerVerifyPinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userControllerVerifyPinRaw(requestParameters, initOverrides);
    }

}
