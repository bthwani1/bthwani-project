/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UtilityControllerUpsertGasRequest,
} from '../models/index';
import {
    UtilityControllerUpsertGasRequestFromJSON,
    UtilityControllerUpsertGasRequestToJSON,
} from '../models/index';

export interface UtilityControllerAssignDriverRequest {
    id: string;
}

export interface UtilityControllerCalculatePriceRequest {
    body: object;
}

export interface UtilityControllerCancelOrderRequest {
    id: string;
}

export interface UtilityControllerCreateOrderRequest {
    body: object;
}

export interface UtilityControllerCreatePricingRequest {
    body: object;
}

export interface UtilityControllerDeleteDailyRequest {
    id: string;
}

export interface UtilityControllerDeleteDailyByKeyRequest {
    kind: string;
    city: string;
    date: string;
    variant: string;
}

export interface UtilityControllerDeletePricingRequest {
    city: string;
}

export interface UtilityControllerGetAllOrdersRequest {
    limit?: number;
    cursor?: string;
}

export interface UtilityControllerGetOrderRequest {
    id: string;
}

export interface UtilityControllerGetPricingByCityRequest {
    city: string;
}

export interface UtilityControllerGetUtilityOptionsRequest {
    city: string;
}

export interface UtilityControllerListDailyRequest {
    kind: string;
    city: string;
}

export interface UtilityControllerRateOrderRequest {
    id: string;
}

export interface UtilityControllerUpdateOrderStatusRequest {
    id: string;
}

export interface UtilityControllerUpdatePricingRequest {
    city: string;
    body: object;
}

export interface UtilityControllerUpsertDailyRequest {
    body: object;
}

export interface UtilityControllerUpsertGasOperationRequest {
    utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest;
}

export interface UtilityControllerUpsertWaterRequest {
    utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest;
}

/**
 * UtilityApi - interface
 * 
 * @export
 * @interface UtilityApiInterface
 */
export interface UtilityApiInterface {
    /**
     * 
     * @summary تعيين سائق للطلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerAssignDriverRaw(requestParameters: UtilityControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعيين سائق للطلب
     */
    utilityControllerAssignDriver(requestParameters: UtilityControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حساب سعر خدمة الغاز أو الماء
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerCalculatePriceRaw(requestParameters: UtilityControllerCalculatePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حساب سعر خدمة الغاز أو الماء
     */
    utilityControllerCalculatePrice(requestParameters: UtilityControllerCalculatePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء الطلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerCancelOrderRaw(requestParameters: UtilityControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء الطلب
     */
    utilityControllerCancelOrder(requestParameters: UtilityControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء طلب غاز أو ماء
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerCreateOrderRaw(requestParameters: UtilityControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء طلب غاز أو ماء
     */
    utilityControllerCreateOrder(requestParameters: UtilityControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء تسعير لمدينة
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerCreatePricingRaw(requestParameters: UtilityControllerCreatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء تسعير لمدينة
     */
    utilityControllerCreatePricing(requestParameters: UtilityControllerCreatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف سعر يومي حسب ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerDeleteDailyRaw(requestParameters: UtilityControllerDeleteDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف سعر يومي حسب ID
     */
    utilityControllerDeleteDaily(requestParameters: UtilityControllerDeleteDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف سعر يومي حسب المفتاح المركب
     * @param {string} kind 
     * @param {string} city 
     * @param {string} date 
     * @param {string} variant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerDeleteDailyByKeyRaw(requestParameters: UtilityControllerDeleteDailyByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف سعر يومي حسب المفتاح المركب
     */
    utilityControllerDeleteDailyByKey(requestParameters: UtilityControllerDeleteDailyByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف تسعير مدينة
     * @param {string} city 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerDeletePricingRaw(requestParameters: UtilityControllerDeletePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف تسعير مدينة
     */
    utilityControllerDeletePricing(requestParameters: UtilityControllerDeletePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب جميع الطلبات (admin)
     * @param {number} [limit] 
     * @param {string} [cursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerGetAllOrdersRaw(requestParameters: UtilityControllerGetAllOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب جميع الطلبات (admin)
     */
    utilityControllerGetAllOrders(requestParameters: UtilityControllerGetAllOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على كل التسعيرات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerGetAllPricingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على كل التسعيرات
     */
    utilityControllerGetAllPricing(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب تفاصيل طلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerGetOrderRaw(requestParameters: UtilityControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب تفاصيل طلب
     */
    utilityControllerGetOrder(requestParameters: UtilityControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على تسعير مدينة
     * @param {string} city 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerGetPricingByCityRaw(requestParameters: UtilityControllerGetPricingByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على تسعير مدينة
     */
    utilityControllerGetPricingByCity(requestParameters: UtilityControllerGetPricingByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب طلبات المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerGetUserOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب طلبات المستخدم
     */
    utilityControllerGetUserOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على خيارات الغاز والماء (public)
     * @param {string} city 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerGetUtilityOptionsRaw(requestParameters: UtilityControllerGetUtilityOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على خيارات الغاز والماء (public)
     */
    utilityControllerGetUtilityOptions(requestParameters: UtilityControllerGetUtilityOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على قائمة الأسعار اليومية
     * @param {string} kind 
     * @param {string} city 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerListDailyRaw(requestParameters: UtilityControllerListDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على قائمة الأسعار اليومية
     */
    utilityControllerListDaily(requestParameters: UtilityControllerListDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تقييم الطلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerRateOrderRaw(requestParameters: UtilityControllerRateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تقييم الطلب
     */
    utilityControllerRateOrder(requestParameters: UtilityControllerRateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث حالة الطلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerUpdateOrderStatusRaw(requestParameters: UtilityControllerUpdateOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث حالة الطلب
     */
    utilityControllerUpdateOrderStatus(requestParameters: UtilityControllerUpdateOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث تسعير مدينة
     * @param {string} city 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerUpdatePricingRaw(requestParameters: UtilityControllerUpdatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث تسعير مدينة
     */
    utilityControllerUpdatePricing(requestParameters: UtilityControllerUpdatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة/تحديث سعر يومي
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerUpsertDailyRaw(requestParameters: UtilityControllerUpsertDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة/تحديث سعر يومي
     */
    utilityControllerUpsertDaily(requestParameters: UtilityControllerUpsertDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث/إنشاء إعدادات الغاز
     * @param {UtilityControllerUpsertGasRequest} utilityControllerUpsertGasRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerUpsertGasRaw(requestParameters: UtilityControllerUpsertGasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث/إنشاء إعدادات الغاز
     */
    utilityControllerUpsertGas(requestParameters: UtilityControllerUpsertGasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث/إنشاء إعدادات الماء
     * @param {UtilityControllerUpsertGasRequest} utilityControllerUpsertGasRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilityApiInterface
     */
    utilityControllerUpsertWaterRaw(requestParameters: UtilityControllerUpsertWaterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث/إنشاء إعدادات الماء
     */
    utilityControllerUpsertWater(requestParameters: UtilityControllerUpsertWaterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class UtilityApi extends runtime.BaseAPI implements UtilityApiInterface {

    /**
     * تعيين سائق للطلب
     */
    async utilityControllerAssignDriverRaw(requestParameters: UtilityControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling utilityControllerAssignDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/order/{id}/assign-driver`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعيين سائق للطلب
     */
    async utilityControllerAssignDriver(requestParameters: UtilityControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerAssignDriverRaw(requestParameters, initOverrides);
    }

    /**
     * حساب سعر خدمة الغاز أو الماء
     */
    async utilityControllerCalculatePriceRaw(requestParameters: UtilityControllerCalculatePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling utilityControllerCalculatePrice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/utility/calculate-price`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حساب سعر خدمة الغاز أو الماء
     */
    async utilityControllerCalculatePrice(requestParameters: UtilityControllerCalculatePriceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerCalculatePriceRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء الطلب
     */
    async utilityControllerCancelOrderRaw(requestParameters: UtilityControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling utilityControllerCancelOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/order/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء الطلب
     */
    async utilityControllerCancelOrder(requestParameters: UtilityControllerCancelOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerCancelOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء طلب غاز أو ماء
     */
    async utilityControllerCreateOrderRaw(requestParameters: UtilityControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling utilityControllerCreateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/order`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء طلب غاز أو ماء
     */
    async utilityControllerCreateOrder(requestParameters: UtilityControllerCreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerCreateOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء تسعير لمدينة
     */
    async utilityControllerCreatePricingRaw(requestParameters: UtilityControllerCreatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling utilityControllerCreatePricing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/pricing`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء تسعير لمدينة
     */
    async utilityControllerCreatePricing(requestParameters: UtilityControllerCreatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerCreatePricingRaw(requestParameters, initOverrides);
    }

    /**
     * حذف سعر يومي حسب ID
     */
    async utilityControllerDeleteDailyRaw(requestParameters: UtilityControllerDeleteDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling utilityControllerDeleteDaily().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/daily/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف سعر يومي حسب ID
     */
    async utilityControllerDeleteDaily(requestParameters: UtilityControllerDeleteDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerDeleteDailyRaw(requestParameters, initOverrides);
    }

    /**
     * حذف سعر يومي حسب المفتاح المركب
     */
    async utilityControllerDeleteDailyByKeyRaw(requestParameters: UtilityControllerDeleteDailyByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kind'] == null) {
            throw new runtime.RequiredError(
                'kind',
                'Required parameter "kind" was null or undefined when calling utilityControllerDeleteDailyByKey().'
            );
        }

        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling utilityControllerDeleteDailyByKey().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling utilityControllerDeleteDailyByKey().'
            );
        }

        if (requestParameters['variant'] == null) {
            throw new runtime.RequiredError(
                'variant',
                'Required parameter "variant" was null or undefined when calling utilityControllerDeleteDailyByKey().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['kind'] != null) {
            queryParameters['kind'] = requestParameters['kind'];
        }

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['variant'] != null) {
            queryParameters['variant'] = requestParameters['variant'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف سعر يومي حسب المفتاح المركب
     */
    async utilityControllerDeleteDailyByKey(requestParameters: UtilityControllerDeleteDailyByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerDeleteDailyByKeyRaw(requestParameters, initOverrides);
    }

    /**
     * حذف تسعير مدينة
     */
    async utilityControllerDeletePricingRaw(requestParameters: UtilityControllerDeletePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling utilityControllerDeletePricing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/pricing/{city}`;
        urlPath = urlPath.replace(`{${"city"}}`, encodeURIComponent(String(requestParameters['city'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف تسعير مدينة
     */
    async utilityControllerDeletePricing(requestParameters: UtilityControllerDeletePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerDeletePricingRaw(requestParameters, initOverrides);
    }

    /**
     * جلب جميع الطلبات (admin)
     */
    async utilityControllerGetAllOrdersRaw(requestParameters: UtilityControllerGetAllOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/admin/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب جميع الطلبات (admin)
     */
    async utilityControllerGetAllOrders(requestParameters: UtilityControllerGetAllOrdersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerGetAllOrdersRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على كل التسعيرات
     */
    async utilityControllerGetAllPricingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/pricing`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على كل التسعيرات
     */
    async utilityControllerGetAllPricing(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerGetAllPricingRaw(initOverrides);
    }

    /**
     * جلب تفاصيل طلب
     */
    async utilityControllerGetOrderRaw(requestParameters: UtilityControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling utilityControllerGetOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/order/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب تفاصيل طلب
     */
    async utilityControllerGetOrder(requestParameters: UtilityControllerGetOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerGetOrderRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على تسعير مدينة
     */
    async utilityControllerGetPricingByCityRaw(requestParameters: UtilityControllerGetPricingByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling utilityControllerGetPricingByCity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/pricing/{city}`;
        urlPath = urlPath.replace(`{${"city"}}`, encodeURIComponent(String(requestParameters['city'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على تسعير مدينة
     */
    async utilityControllerGetPricingByCity(requestParameters: UtilityControllerGetPricingByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerGetPricingByCityRaw(requestParameters, initOverrides);
    }

    /**
     * جلب طلبات المستخدم
     */
    async utilityControllerGetUserOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/orders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب طلبات المستخدم
     */
    async utilityControllerGetUserOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerGetUserOrdersRaw(initOverrides);
    }

    /**
     * الحصول على خيارات الغاز والماء (public)
     */
    async utilityControllerGetUtilityOptionsRaw(requestParameters: UtilityControllerGetUtilityOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling utilityControllerGetUtilityOptions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/utility/options`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على خيارات الغاز والماء (public)
     */
    async utilityControllerGetUtilityOptions(requestParameters: UtilityControllerGetUtilityOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerGetUtilityOptionsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على قائمة الأسعار اليومية
     */
    async utilityControllerListDailyRaw(requestParameters: UtilityControllerListDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['kind'] == null) {
            throw new runtime.RequiredError(
                'kind',
                'Required parameter "kind" was null or undefined when calling utilityControllerListDaily().'
            );
        }

        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling utilityControllerListDaily().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['kind'] != null) {
            queryParameters['kind'] = requestParameters['kind'];
        }

        if (requestParameters['city'] != null) {
            queryParameters['city'] = requestParameters['city'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على قائمة الأسعار اليومية
     */
    async utilityControllerListDaily(requestParameters: UtilityControllerListDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerListDailyRaw(requestParameters, initOverrides);
    }

    /**
     * تقييم الطلب
     */
    async utilityControllerRateOrderRaw(requestParameters: UtilityControllerRateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling utilityControllerRateOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/order/{id}/rate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تقييم الطلب
     */
    async utilityControllerRateOrder(requestParameters: UtilityControllerRateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerRateOrderRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث حالة الطلب
     */
    async utilityControllerUpdateOrderStatusRaw(requestParameters: UtilityControllerUpdateOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling utilityControllerUpdateOrderStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/order/{id}/status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث حالة الطلب
     */
    async utilityControllerUpdateOrderStatus(requestParameters: UtilityControllerUpdateOrderStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerUpdateOrderStatusRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث تسعير مدينة
     */
    async utilityControllerUpdatePricingRaw(requestParameters: UtilityControllerUpdatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['city'] == null) {
            throw new runtime.RequiredError(
                'city',
                'Required parameter "city" was null or undefined when calling utilityControllerUpdatePricing().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling utilityControllerUpdatePricing().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/pricing/{city}`;
        urlPath = urlPath.replace(`{${"city"}}`, encodeURIComponent(String(requestParameters['city'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث تسعير مدينة
     */
    async utilityControllerUpdatePricing(requestParameters: UtilityControllerUpdatePricingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerUpdatePricingRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة/تحديث سعر يومي
     */
    async utilityControllerUpsertDailyRaw(requestParameters: UtilityControllerUpsertDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling utilityControllerUpsertDaily().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة/تحديث سعر يومي
     */
    async utilityControllerUpsertDaily(requestParameters: UtilityControllerUpsertDailyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerUpsertDailyRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث/إنشاء إعدادات الغاز
     */
    async utilityControllerUpsertGasRaw(requestParameters: UtilityControllerUpsertGasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['utilityControllerUpsertGasRequest'] == null) {
            throw new runtime.RequiredError(
                'utilityControllerUpsertGasRequest',
                'Required parameter "utilityControllerUpsertGasRequest" was null or undefined when calling utilityControllerUpsertGas().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/options/gas`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UtilityControllerUpsertGasRequestToJSON(requestParameters['utilityControllerUpsertGasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث/إنشاء إعدادات الغاز
     */
    async utilityControllerUpsertGas(requestParameters: UtilityControllerUpsertGasOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerUpsertGasRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث/إنشاء إعدادات الماء
     */
    async utilityControllerUpsertWaterRaw(requestParameters: UtilityControllerUpsertWaterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['utilityControllerUpsertGasRequest'] == null) {
            throw new runtime.RequiredError(
                'utilityControllerUpsertGasRequest',
                'Required parameter "utilityControllerUpsertGasRequest" was null or undefined when calling utilityControllerUpsertWater().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/utility/options/water`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UtilityControllerUpsertGasRequestToJSON(requestParameters['utilityControllerUpsertGasRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث/إنشاء إعدادات الماء
     */
    async utilityControllerUpsertWater(requestParameters: UtilityControllerUpsertWaterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.utilityControllerUpsertWaterRaw(requestParameters, initOverrides);
    }

}
