/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePrivacyPolicyDto,
  CreateTermsOfServiceDto,
  RecordConsentDto,
} from '../models/index';
import {
    CreatePrivacyPolicyDtoFromJSON,
    CreatePrivacyPolicyDtoToJSON,
    CreateTermsOfServiceDtoFromJSON,
    CreateTermsOfServiceDtoToJSON,
    RecordConsentDtoFromJSON,
    RecordConsentDtoToJSON,
} from '../models/index';

export interface LegalControllerActivatePrivacyPolicyRequest {
    id: string;
}

export interface LegalControllerActivateTermsOfServiceRequest {
    id: string;
}

export interface LegalControllerCheckConsentRequest {
    type: string;
}

export interface LegalControllerCreatePrivacyPolicyRequest {
    createPrivacyPolicyDto: CreatePrivacyPolicyDto;
}

export interface LegalControllerCreateTermsOfServiceRequest {
    createTermsOfServiceDto: CreateTermsOfServiceDto;
}

export interface LegalControllerGetPrivacyPolicyRequest {
    lang?: LegalControllerGetPrivacyPolicyLangEnum;
}

export interface LegalControllerGetTermsOfServiceRequest {
    lang?: LegalControllerGetTermsOfServiceLangEnum;
}

export interface LegalControllerRecordConsentRequest {
    recordConsentDto: RecordConsentDto;
}

/**
 * LegalApi - interface
 * 
 * @export
 * @interface LegalApiInterface
 */
export interface LegalApiInterface {
    /**
     * 
     * @summary تفعيل سياسة خصوصية معينة (للإدارة)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerActivatePrivacyPolicyRaw(requestParameters: LegalControllerActivatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفعيل سياسة خصوصية معينة (للإدارة)
     */
    legalControllerActivatePrivacyPolicy(requestParameters: LegalControllerActivatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفعيل شروط خدمة معينة (للإدارة)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerActivateTermsOfServiceRaw(requestParameters: LegalControllerActivateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفعيل شروط خدمة معينة (للإدارة)
     */
    legalControllerActivateTermsOfService(requestParameters: LegalControllerActivateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التحقق من موافقة المستخدم على الإصدار الحالي
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerCheckConsentRaw(requestParameters: LegalControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من موافقة المستخدم على الإصدار الحالي
     */
    legalControllerCheckConsent(requestParameters: LegalControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء سياسة خصوصية جديدة (للإدارة)
     * @param {CreatePrivacyPolicyDto} createPrivacyPolicyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerCreatePrivacyPolicyRaw(requestParameters: LegalControllerCreatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء سياسة خصوصية جديدة (للإدارة)
     */
    legalControllerCreatePrivacyPolicy(requestParameters: LegalControllerCreatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء شروط خدمة جديدة (للإدارة)
     * @param {CreateTermsOfServiceDto} createTermsOfServiceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerCreateTermsOfServiceRaw(requestParameters: LegalControllerCreateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء شروط خدمة جديدة (للإدارة)
     */
    legalControllerCreateTermsOfService(requestParameters: LegalControllerCreateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على جميع سياسات الخصوصية (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerGetAllPrivacyPoliciesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على جميع سياسات الخصوصية (للإدارة)
     */
    legalControllerGetAllPrivacyPolicies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على جميع شروط الخدمة (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerGetAllTermsOfServiceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على جميع شروط الخدمة (للإدارة)
     */
    legalControllerGetAllTermsOfService(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على إحصائيات الموافقات (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerGetConsentStatisticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على إحصائيات الموافقات (للإدارة)
     */
    legalControllerGetConsentStatistics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على موافقات المستخدم الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerGetMyConsentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على موافقات المستخدم الحالي
     */
    legalControllerGetMyConsents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على سياسة الخصوصية النشطة
     * @param {'ar' | 'en'} [lang] اللغة (ar أو en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerGetPrivacyPolicyRaw(requestParameters: LegalControllerGetPrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على سياسة الخصوصية النشطة
     */
    legalControllerGetPrivacyPolicy(requestParameters: LegalControllerGetPrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على شروط الخدمة النشطة
     * @param {'ar' | 'en'} [lang] اللغة (ar أو en)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerGetTermsOfServiceRaw(requestParameters: LegalControllerGetTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على شروط الخدمة النشطة
     */
    legalControllerGetTermsOfService(requestParameters: LegalControllerGetTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل موافقة المستخدم
     * @param {RecordConsentDto} recordConsentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApiInterface
     */
    legalControllerRecordConsentRaw(requestParameters: LegalControllerRecordConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل موافقة المستخدم
     */
    legalControllerRecordConsent(requestParameters: LegalControllerRecordConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class LegalApi extends runtime.BaseAPI implements LegalApiInterface {

    /**
     * تفعيل سياسة خصوصية معينة (للإدارة)
     */
    async legalControllerActivatePrivacyPolicyRaw(requestParameters: LegalControllerActivatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling legalControllerActivatePrivacyPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/privacy-policy/{id}/activate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفعيل سياسة خصوصية معينة (للإدارة)
     */
    async legalControllerActivatePrivacyPolicy(requestParameters: LegalControllerActivatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerActivatePrivacyPolicyRaw(requestParameters, initOverrides);
    }

    /**
     * تفعيل شروط خدمة معينة (للإدارة)
     */
    async legalControllerActivateTermsOfServiceRaw(requestParameters: LegalControllerActivateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling legalControllerActivateTermsOfService().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/terms-of-service/{id}/activate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفعيل شروط خدمة معينة (للإدارة)
     */
    async legalControllerActivateTermsOfService(requestParameters: LegalControllerActivateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerActivateTermsOfServiceRaw(requestParameters, initOverrides);
    }

    /**
     * التحقق من موافقة المستخدم على الإصدار الحالي
     */
    async legalControllerCheckConsentRaw(requestParameters: LegalControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling legalControllerCheckConsent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/consent/check/{type}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من موافقة المستخدم على الإصدار الحالي
     */
    async legalControllerCheckConsent(requestParameters: LegalControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerCheckConsentRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء سياسة خصوصية جديدة (للإدارة)
     */
    async legalControllerCreatePrivacyPolicyRaw(requestParameters: LegalControllerCreatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createPrivacyPolicyDto'] == null) {
            throw new runtime.RequiredError(
                'createPrivacyPolicyDto',
                'Required parameter "createPrivacyPolicyDto" was null or undefined when calling legalControllerCreatePrivacyPolicy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/privacy-policy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrivacyPolicyDtoToJSON(requestParameters['createPrivacyPolicyDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء سياسة خصوصية جديدة (للإدارة)
     */
    async legalControllerCreatePrivacyPolicy(requestParameters: LegalControllerCreatePrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerCreatePrivacyPolicyRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء شروط خدمة جديدة (للإدارة)
     */
    async legalControllerCreateTermsOfServiceRaw(requestParameters: LegalControllerCreateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createTermsOfServiceDto'] == null) {
            throw new runtime.RequiredError(
                'createTermsOfServiceDto',
                'Required parameter "createTermsOfServiceDto" was null or undefined when calling legalControllerCreateTermsOfService().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/terms-of-service`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTermsOfServiceDtoToJSON(requestParameters['createTermsOfServiceDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء شروط خدمة جديدة (للإدارة)
     */
    async legalControllerCreateTermsOfService(requestParameters: LegalControllerCreateTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerCreateTermsOfServiceRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على جميع سياسات الخصوصية (للإدارة)
     */
    async legalControllerGetAllPrivacyPoliciesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/privacy-policies`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على جميع سياسات الخصوصية (للإدارة)
     */
    async legalControllerGetAllPrivacyPolicies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerGetAllPrivacyPoliciesRaw(initOverrides);
    }

    /**
     * الحصول على جميع شروط الخدمة (للإدارة)
     */
    async legalControllerGetAllTermsOfServiceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/terms-of-service`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على جميع شروط الخدمة (للإدارة)
     */
    async legalControllerGetAllTermsOfService(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerGetAllTermsOfServiceRaw(initOverrides);
    }

    /**
     * الحصول على إحصائيات الموافقات (للإدارة)
     */
    async legalControllerGetConsentStatisticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/admin/consent/statistics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على إحصائيات الموافقات (للإدارة)
     */
    async legalControllerGetConsentStatistics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerGetConsentStatisticsRaw(initOverrides);
    }

    /**
     * الحصول على موافقات المستخدم الحالي
     */
    async legalControllerGetMyConsentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/consent/my`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على موافقات المستخدم الحالي
     */
    async legalControllerGetMyConsents(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerGetMyConsentsRaw(initOverrides);
    }

    /**
     * الحصول على سياسة الخصوصية النشطة
     */
    async legalControllerGetPrivacyPolicyRaw(requestParameters: LegalControllerGetPrivacyPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/legal/privacy-policy`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على سياسة الخصوصية النشطة
     */
    async legalControllerGetPrivacyPolicy(requestParameters: LegalControllerGetPrivacyPolicyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerGetPrivacyPolicyRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على شروط الخدمة النشطة
     */
    async legalControllerGetTermsOfServiceRaw(requestParameters: LegalControllerGetTermsOfServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['lang'] != null) {
            queryParameters['lang'] = requestParameters['lang'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/legal/terms-of-service`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على شروط الخدمة النشطة
     */
    async legalControllerGetTermsOfService(requestParameters: LegalControllerGetTermsOfServiceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerGetTermsOfServiceRaw(requestParameters, initOverrides);
    }

    /**
     * تسجيل موافقة المستخدم
     */
    async legalControllerRecordConsentRaw(requestParameters: LegalControllerRecordConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['recordConsentDto'] == null) {
            throw new runtime.RequiredError(
                'recordConsentDto',
                'Required parameter "recordConsentDto" was null or undefined when calling legalControllerRecordConsent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/legal/consent`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecordConsentDtoToJSON(requestParameters['recordConsentDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل موافقة المستخدم
     */
    async legalControllerRecordConsent(requestParameters: LegalControllerRecordConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.legalControllerRecordConsentRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const LegalControllerGetPrivacyPolicyLangEnum = {
    Ar: 'ar',
    En: 'en'
} as const;
export type LegalControllerGetPrivacyPolicyLangEnum = typeof LegalControllerGetPrivacyPolicyLangEnum[keyof typeof LegalControllerGetPrivacyPolicyLangEnum];
/**
 * @export
 */
export const LegalControllerGetTermsOfServiceLangEnum = {
    Ar: 'ar',
    En: 'en'
} as const;
export type LegalControllerGetTermsOfServiceLangEnum = typeof LegalControllerGetTermsOfServiceLangEnum[keyof typeof LegalControllerGetTermsOfServiceLangEnum];
