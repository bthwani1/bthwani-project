/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTransactionDto,
  WalletControllerHoldFundsRequest,
  WalletControllerPayBillRequest,
  WalletControllerRefundFundsRequest,
  WalletControllerRequestWithdrawalRequest,
  WalletControllerTopupViaKuraimiRequest,
  WalletControllerVerifyTopupRequest,
} from '../models/index';
import {
    CreateTransactionDtoFromJSON,
    CreateTransactionDtoToJSON,
    WalletControllerHoldFundsRequestFromJSON,
    WalletControllerHoldFundsRequestToJSON,
    WalletControllerPayBillRequestFromJSON,
    WalletControllerPayBillRequestToJSON,
    WalletControllerRefundFundsRequestFromJSON,
    WalletControllerRefundFundsRequestToJSON,
    WalletControllerRequestWithdrawalRequestFromJSON,
    WalletControllerRequestWithdrawalRequestToJSON,
    WalletControllerTopupViaKuraimiRequestFromJSON,
    WalletControllerTopupViaKuraimiRequestToJSON,
    WalletControllerVerifyTopupRequestFromJSON,
    WalletControllerVerifyTopupRequestToJSON,
} from '../models/index';

export interface WalletControllerCancelWithdrawalRequest {
    id: string;
}

export interface WalletControllerCreateTransactionRequest {
    createTransactionDto: CreateTransactionDto;
}

export interface WalletControllerGetBillsRequest {
    cursor?: string;
    limit?: number;
}

export interface WalletControllerGetMyWithdrawalsRequest {
    cursor?: string;
    limit?: number;
}

export interface WalletControllerGetTopupHistoryRequest {
    cursor?: string;
    limit?: number;
}

export interface WalletControllerGetTransactionDetailsRequest {
    id: string;
}

export interface WalletControllerGetTransactionsRequest {
    cursor?: string;
    limit?: number;
}

export interface WalletControllerGetTransfersRequest {
    cursor?: string;
    limit?: number;
}

export interface WalletControllerHoldFundsOperationRequest {
    walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest;
}

export interface WalletControllerPayBillOperationRequest {
    walletControllerPayBillRequest: WalletControllerPayBillRequest;
}

export interface WalletControllerRefundFundsOperationRequest {
    walletControllerRefundFundsRequest: WalletControllerRefundFundsRequest;
}

export interface WalletControllerReleaseFundsRequest {
    walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest;
}

export interface WalletControllerRequestWithdrawalOperationRequest {
    walletControllerRequestWithdrawalRequest: WalletControllerRequestWithdrawalRequest;
}

export interface WalletControllerTopupViaKuraimiOperationRequest {
    walletControllerTopupViaKuraimiRequest: WalletControllerTopupViaKuraimiRequest;
}

export interface WalletControllerVerifyTopupOperationRequest {
    walletControllerVerifyTopupRequest: WalletControllerVerifyTopupRequest;
}

/**
 * WalletApi - interface
 * 
 * @export
 * @interface WalletApiInterface
 */
export interface WalletApiInterface {
    /**
     * إلغاء طلب سحب قيد المعالجة
     * @summary إلغاء طلب سحب
     * @param {string} id معرّف طلب السحب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerCancelWithdrawalRaw(requestParameters: WalletControllerCancelWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء طلب سحب قيد المعالجة
     * إلغاء طلب سحب
     */
    walletControllerCancelWithdrawal(requestParameters: WalletControllerCancelWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إنشاء معاملة credit/debit يدوياً (admin only)
     * @summary إنشاء معاملة جديدة (للإدارة)
     * @param {CreateTransactionDto} createTransactionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerCreateTransactionRaw(requestParameters: WalletControllerCreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء معاملة credit/debit يدوياً (admin only)
     * إنشاء معاملة جديدة (للإدارة)
     */
    walletControllerCreateTransaction(requestParameters: WalletControllerCreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على الرصيد الحالي والرصيد المحجوز
     * @summary جلب رصيد المحفظة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على الرصيد الحالي والرصيد المحجوز
     * جلب رصيد المحفظة
     */
    walletControllerGetBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على سجل جميع الفواتير المدفوعة
     * @summary سجل الفواتير المدفوعة
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetBillsRaw(requestParameters: WalletControllerGetBillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على سجل جميع الفواتير المدفوعة
     * سجل الفواتير المدفوعة
     */
    walletControllerGetBills(requestParameters: WalletControllerGetBillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على قائمة طلبات السحب مع حالاتها
     * @summary طلبات السحب الخاصة بي
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetMyWithdrawalsRaw(requestParameters: WalletControllerGetMyWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على قائمة طلبات السحب مع حالاتها
     * طلبات السحب الخاصة بي
     */
    walletControllerGetMyWithdrawals(requestParameters: WalletControllerGetMyWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على سجل جميع عمليات الشحن السابقة
     * @summary سجل عمليات الشحن
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetTopupHistoryRaw(requestParameters: WalletControllerGetTopupHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على سجل جميع عمليات الشحن السابقة
     * سجل عمليات الشحن
     */
    walletControllerGetTopupHistory(requestParameters: WalletControllerGetTopupHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
     * @summary طرق الشحن المتاحة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetTopupMethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
     * طرق الشحن المتاحة
     */
    walletControllerGetTopupMethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفاصيل معاملة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetTransactionDetailsRaw(requestParameters: WalletControllerGetTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفاصيل معاملة
     */
    walletControllerGetTransactionDetails(requestParameters: WalletControllerGetTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على جميع معاملات المحفظة مع pagination
     * @summary جلب سجل المعاملات
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetTransactionsRaw(requestParameters: WalletControllerGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على جميع معاملات المحفظة مع pagination
     * جلب سجل المعاملات
     */
    walletControllerGetTransactions(requestParameters: WalletControllerGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل التحويلات
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetTransfersRaw(requestParameters: WalletControllerGetTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل التحويلات
     */
    walletControllerGetTransfers(requestParameters: WalletControllerGetTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * الحصول على قائمة طرق السحب المدعومة
     * @summary طرق السحب المتاحة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerGetWithdrawMethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على قائمة طرق السحب المدعومة
     * طرق السحب المتاحة
     */
    walletControllerGetWithdrawMethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * حجز مبلغ من المحفظة لضمان الدفع
     * @summary حجز مبلغ (Escrow)
     * @param {WalletControllerHoldFundsRequest} walletControllerHoldFundsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerHoldFundsRaw(requestParameters: WalletControllerHoldFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حجز مبلغ من المحفظة لضمان الدفع
     * حجز مبلغ (Escrow)
     */
    walletControllerHoldFunds(requestParameters: WalletControllerHoldFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * دفع الفواتير من المحفظة
     * @summary دفع فاتورة (كهرباء، ماء، إنترنت)
     * @param {WalletControllerPayBillRequest} walletControllerPayBillRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerPayBillRaw(requestParameters: WalletControllerPayBillOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * دفع الفواتير من المحفظة
     * دفع فاتورة (كهرباء، ماء، إنترنت)
     */
    walletControllerPayBill(requestParameters: WalletControllerPayBillOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
     * @summary إرجاع المبلغ المحجوز
     * @param {WalletControllerRefundFundsRequest} walletControllerRefundFundsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerRefundFundsRaw(requestParameters: WalletControllerRefundFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
     * إرجاع المبلغ المحجوز
     */
    walletControllerRefundFunds(requestParameters: WalletControllerRefundFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إطلاق المبلغ المحجوز بعد تأكيد الطلب
     * @summary إطلاق المبلغ المحجوز
     * @param {WalletControllerHoldFundsRequest} walletControllerHoldFundsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerReleaseFundsRaw(requestParameters: WalletControllerReleaseFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إطلاق المبلغ المحجوز بعد تأكيد الطلب
     * إطلاق المبلغ المحجوز
     */
    walletControllerReleaseFunds(requestParameters: WalletControllerReleaseFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلب استرجاع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerRequestRefundRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلب استرجاع
     */
    walletControllerRequestRefund(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * إنشاء طلب سحب مبلغ إلى الحساب البنكي
     * @summary طلب سحب من المحفظة
     * @param {WalletControllerRequestWithdrawalRequest} walletControllerRequestWithdrawalRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerRequestWithdrawalRaw(requestParameters: WalletControllerRequestWithdrawalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء طلب سحب مبلغ إلى الحساب البنكي
     * طلب سحب من المحفظة
     */
    walletControllerRequestWithdrawal(requestParameters: WalletControllerRequestWithdrawalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * شحن المحفظة باستخدام بطاقة كريمي
     * @summary شحن المحفظة عبر كريمي
     * @param {WalletControllerTopupViaKuraimiRequest} walletControllerTopupViaKuraimiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerTopupViaKuraimiRaw(requestParameters: WalletControllerTopupViaKuraimiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * شحن المحفظة باستخدام بطاقة كريمي
     * شحن المحفظة عبر كريمي
     */
    walletControllerTopupViaKuraimi(requestParameters: WalletControllerTopupViaKuraimiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحويل رصيد
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerTransferFundsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحويل رصيد
     */
    walletControllerTransferFunds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
     * @summary التحقق من عملية الشحن
     * @param {WalletControllerVerifyTopupRequest} walletControllerVerifyTopupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApiInterface
     */
    walletControllerVerifyTopupRaw(requestParameters: WalletControllerVerifyTopupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
     * التحقق من عملية الشحن
     */
    walletControllerVerifyTopup(requestParameters: WalletControllerVerifyTopupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class WalletApi extends runtime.BaseAPI implements WalletApiInterface {

    /**
     * إلغاء طلب سحب قيد المعالجة
     * إلغاء طلب سحب
     */
    async walletControllerCancelWithdrawalRaw(requestParameters: WalletControllerCancelWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling walletControllerCancelWithdrawal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/withdraw/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء طلب سحب قيد المعالجة
     * إلغاء طلب سحب
     */
    async walletControllerCancelWithdrawal(requestParameters: WalletControllerCancelWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerCancelWithdrawalRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء معاملة credit/debit يدوياً (admin only)
     * إنشاء معاملة جديدة (للإدارة)
     */
    async walletControllerCreateTransactionRaw(requestParameters: WalletControllerCreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createTransactionDto'] == null) {
            throw new runtime.RequiredError(
                'createTransactionDto',
                'Required parameter "createTransactionDto" was null or undefined when calling walletControllerCreateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/transaction`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTransactionDtoToJSON(requestParameters['createTransactionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء معاملة credit/debit يدوياً (admin only)
     * إنشاء معاملة جديدة (للإدارة)
     */
    async walletControllerCreateTransaction(requestParameters: WalletControllerCreateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerCreateTransactionRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على الرصيد الحالي والرصيد المحجوز
     * جلب رصيد المحفظة
     */
    async walletControllerGetBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على الرصيد الحالي والرصيد المحجوز
     * جلب رصيد المحفظة
     */
    async walletControllerGetBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetBalanceRaw(initOverrides);
    }

    /**
     * الحصول على سجل جميع الفواتير المدفوعة
     * سجل الفواتير المدفوعة
     */
    async walletControllerGetBillsRaw(requestParameters: WalletControllerGetBillsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/bills`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على سجل جميع الفواتير المدفوعة
     * سجل الفواتير المدفوعة
     */
    async walletControllerGetBills(requestParameters: WalletControllerGetBillsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetBillsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على قائمة طلبات السحب مع حالاتها
     * طلبات السحب الخاصة بي
     */
    async walletControllerGetMyWithdrawalsRaw(requestParameters: WalletControllerGetMyWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/withdraw/my`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على قائمة طلبات السحب مع حالاتها
     * طلبات السحب الخاصة بي
     */
    async walletControllerGetMyWithdrawals(requestParameters: WalletControllerGetMyWithdrawalsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetMyWithdrawalsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على سجل جميع عمليات الشحن السابقة
     * سجل عمليات الشحن
     */
    async walletControllerGetTopupHistoryRaw(requestParameters: WalletControllerGetTopupHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/topup/history`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على سجل جميع عمليات الشحن السابقة
     * سجل عمليات الشحن
     */
    async walletControllerGetTopupHistory(requestParameters: WalletControllerGetTopupHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetTopupHistoryRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
     * طرق الشحن المتاحة
     */
    async walletControllerGetTopupMethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/topup/methods`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
     * طرق الشحن المتاحة
     */
    async walletControllerGetTopupMethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetTopupMethodsRaw(initOverrides);
    }

    /**
     * تفاصيل معاملة
     */
    async walletControllerGetTransactionDetailsRaw(requestParameters: WalletControllerGetTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling walletControllerGetTransactionDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/transaction/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفاصيل معاملة
     */
    async walletControllerGetTransactionDetails(requestParameters: WalletControllerGetTransactionDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetTransactionDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على جميع معاملات المحفظة مع pagination
     * جلب سجل المعاملات
     */
    async walletControllerGetTransactionsRaw(requestParameters: WalletControllerGetTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على جميع معاملات المحفظة مع pagination
     * جلب سجل المعاملات
     */
    async walletControllerGetTransactions(requestParameters: WalletControllerGetTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetTransactionsRaw(requestParameters, initOverrides);
    }

    /**
     * سجل التحويلات
     */
    async walletControllerGetTransfersRaw(requestParameters: WalletControllerGetTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/transfers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل التحويلات
     */
    async walletControllerGetTransfers(requestParameters: WalletControllerGetTransfersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetTransfersRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على قائمة طرق السحب المدعومة
     * طرق السحب المتاحة
     */
    async walletControllerGetWithdrawMethodsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/withdraw/methods`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على قائمة طرق السحب المدعومة
     * طرق السحب المتاحة
     */
    async walletControllerGetWithdrawMethods(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerGetWithdrawMethodsRaw(initOverrides);
    }

    /**
     * حجز مبلغ من المحفظة لضمان الدفع
     * حجز مبلغ (Escrow)
     */
    async walletControllerHoldFundsRaw(requestParameters: WalletControllerHoldFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerHoldFundsRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerHoldFundsRequest',
                'Required parameter "walletControllerHoldFundsRequest" was null or undefined when calling walletControllerHoldFunds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/hold`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerHoldFundsRequestToJSON(requestParameters['walletControllerHoldFundsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حجز مبلغ من المحفظة لضمان الدفع
     * حجز مبلغ (Escrow)
     */
    async walletControllerHoldFunds(requestParameters: WalletControllerHoldFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerHoldFundsRaw(requestParameters, initOverrides);
    }

    /**
     * دفع الفواتير من المحفظة
     * دفع فاتورة (كهرباء، ماء، إنترنت)
     */
    async walletControllerPayBillRaw(requestParameters: WalletControllerPayBillOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerPayBillRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerPayBillRequest',
                'Required parameter "walletControllerPayBillRequest" was null or undefined when calling walletControllerPayBill().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/pay-bill`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerPayBillRequestToJSON(requestParameters['walletControllerPayBillRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * دفع الفواتير من المحفظة
     * دفع فاتورة (كهرباء، ماء، إنترنت)
     */
    async walletControllerPayBill(requestParameters: WalletControllerPayBillOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerPayBillRaw(requestParameters, initOverrides);
    }

    /**
     * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
     * إرجاع المبلغ المحجوز
     */
    async walletControllerRefundFundsRaw(requestParameters: WalletControllerRefundFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerRefundFundsRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerRefundFundsRequest',
                'Required parameter "walletControllerRefundFundsRequest" was null or undefined when calling walletControllerRefundFunds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/refund`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerRefundFundsRequestToJSON(requestParameters['walletControllerRefundFundsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
     * إرجاع المبلغ المحجوز
     */
    async walletControllerRefundFunds(requestParameters: WalletControllerRefundFundsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerRefundFundsRaw(requestParameters, initOverrides);
    }

    /**
     * إطلاق المبلغ المحجوز بعد تأكيد الطلب
     * إطلاق المبلغ المحجوز
     */
    async walletControllerReleaseFundsRaw(requestParameters: WalletControllerReleaseFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerHoldFundsRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerHoldFundsRequest',
                'Required parameter "walletControllerHoldFundsRequest" was null or undefined when calling walletControllerReleaseFunds().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/release`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerHoldFundsRequestToJSON(requestParameters['walletControllerHoldFundsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إطلاق المبلغ المحجوز بعد تأكيد الطلب
     * إطلاق المبلغ المحجوز
     */
    async walletControllerReleaseFunds(requestParameters: WalletControllerReleaseFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerReleaseFundsRaw(requestParameters, initOverrides);
    }

    /**
     * طلب استرجاع
     */
    async walletControllerRequestRefundRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/refund/request`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلب استرجاع
     */
    async walletControllerRequestRefund(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerRequestRefundRaw(initOverrides);
    }

    /**
     * إنشاء طلب سحب مبلغ إلى الحساب البنكي
     * طلب سحب من المحفظة
     */
    async walletControllerRequestWithdrawalRaw(requestParameters: WalletControllerRequestWithdrawalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerRequestWithdrawalRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerRequestWithdrawalRequest',
                'Required parameter "walletControllerRequestWithdrawalRequest" was null or undefined when calling walletControllerRequestWithdrawal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/withdraw/request`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerRequestWithdrawalRequestToJSON(requestParameters['walletControllerRequestWithdrawalRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء طلب سحب مبلغ إلى الحساب البنكي
     * طلب سحب من المحفظة
     */
    async walletControllerRequestWithdrawal(requestParameters: WalletControllerRequestWithdrawalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerRequestWithdrawalRaw(requestParameters, initOverrides);
    }

    /**
     * شحن المحفظة باستخدام بطاقة كريمي
     * شحن المحفظة عبر كريمي
     */
    async walletControllerTopupViaKuraimiRaw(requestParameters: WalletControllerTopupViaKuraimiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerTopupViaKuraimiRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerTopupViaKuraimiRequest',
                'Required parameter "walletControllerTopupViaKuraimiRequest" was null or undefined when calling walletControllerTopupViaKuraimi().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/topup/kuraimi`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerTopupViaKuraimiRequestToJSON(requestParameters['walletControllerTopupViaKuraimiRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * شحن المحفظة باستخدام بطاقة كريمي
     * شحن المحفظة عبر كريمي
     */
    async walletControllerTopupViaKuraimi(requestParameters: WalletControllerTopupViaKuraimiOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerTopupViaKuraimiRaw(requestParameters, initOverrides);
    }

    /**
     * تحويل رصيد
     */
    async walletControllerTransferFundsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/wallet/transfer`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحويل رصيد
     */
    async walletControllerTransferFunds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerTransferFundsRaw(initOverrides);
    }

    /**
     * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
     * التحقق من عملية الشحن
     */
    async walletControllerVerifyTopupRaw(requestParameters: WalletControllerVerifyTopupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['walletControllerVerifyTopupRequest'] == null) {
            throw new runtime.RequiredError(
                'walletControllerVerifyTopupRequest',
                'Required parameter "walletControllerVerifyTopupRequest" was null or undefined when calling walletControllerVerifyTopup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/wallet/topup/verify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletControllerVerifyTopupRequestToJSON(requestParameters['walletControllerVerifyTopupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
     * التحقق من عملية الشحن
     */
    async walletControllerVerifyTopup(requestParameters: WalletControllerVerifyTopupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.walletControllerVerifyTopupRaw(requestParameters, initOverrides);
    }

}
