/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDriverDto,
  DriverControllerChangePasswordRequest,
  DriverControllerReportIssueRequest,
  DriverControllerRequestVacationRequest,
  DriverControllerUpdateAvailabilityRequest,
  DriverControllerUpdateProfileRequest,
  DriverControllerUploadDocumentRequest,
  UpdateLocationDto,
} from '../models/index';
import {
    CreateDriverDtoFromJSON,
    CreateDriverDtoToJSON,
    DriverControllerChangePasswordRequestFromJSON,
    DriverControllerChangePasswordRequestToJSON,
    DriverControllerReportIssueRequestFromJSON,
    DriverControllerReportIssueRequestToJSON,
    DriverControllerRequestVacationRequestFromJSON,
    DriverControllerRequestVacationRequestToJSON,
    DriverControllerUpdateAvailabilityRequestFromJSON,
    DriverControllerUpdateAvailabilityRequestToJSON,
    DriverControllerUpdateProfileRequestFromJSON,
    DriverControllerUpdateProfileRequestToJSON,
    DriverControllerUploadDocumentRequestFromJSON,
    DriverControllerUploadDocumentRequestToJSON,
    UpdateLocationDtoFromJSON,
    UpdateLocationDtoToJSON,
} from '../models/index';

export interface DriverControllerAcceptOrderRequest {
    id: string;
}

export interface DriverControllerCancelVacationRequest {
    id: string;
}

export interface DriverControllerChangePasswordOperationRequest {
    driverControllerChangePasswordRequest: DriverControllerChangePasswordRequest;
}

export interface DriverControllerCompleteDeliveryRequest {
    id: string;
}

export interface DriverControllerCreateRequest {
    createDriverDto: CreateDriverDto;
}

export interface DriverControllerFindAvailableRequest {
    cursor?: string;
    limit?: number;
}

export interface DriverControllerFindOneRequest {
    id: string;
}

export interface DriverControllerGetDriverDocumentsAdminRequest {
    driverId: string;
}

export interface DriverControllerGetEarningsRequest {
    startDate: string;
    endDate: string;
}

export interface DriverControllerGetOrdersHistoryRequest {
    cursor?: string;
    limit?: number;
}

export interface DriverControllerRejectOrderRequest {
    id: string;
}

export interface DriverControllerReportIssueOperationRequest {
    driverControllerReportIssueRequest: DriverControllerReportIssueRequest;
}

export interface DriverControllerRequestVacationOperationRequest {
    driverControllerRequestVacationRequest: DriverControllerRequestVacationRequest;
}

export interface DriverControllerStartDeliveryRequest {
    id: string;
}

export interface DriverControllerUpdateAvailabilityOperationRequest {
    driverControllerUpdateAvailabilityRequest: DriverControllerUpdateAvailabilityRequest;
}

export interface DriverControllerUpdateLocationRequest {
    updateLocationDto: UpdateLocationDto;
}

export interface DriverControllerUpdateProfileOperationRequest {
    driverControllerUpdateProfileRequest: DriverControllerUpdateProfileRequest;
}

export interface DriverControllerUploadDocumentOperationRequest {
    driverControllerUploadDocumentRequest: DriverControllerUploadDocumentRequest;
}

export interface DriverControllerVerifyDocumentRequest {
    driverId: string;
    docId: string;
}

/**
 * DriverApi - interface
 * 
 * @export
 * @interface DriverApiInterface
 */
export interface DriverApiInterface {
    /**
     * 
     * @summary قبول طلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerAcceptOrderRaw(requestParameters: DriverControllerAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * قبول طلب
     */
    driverControllerAcceptOrder(requestParameters: DriverControllerAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء طلب إجازة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerCancelVacationRaw(requestParameters: DriverControllerCancelVacationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء طلب إجازة
     */
    driverControllerCancelVacation(requestParameters: DriverControllerCancelVacationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تغيير كلمة المرور
     * @param {DriverControllerChangePasswordRequest} driverControllerChangePasswordRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerChangePasswordRaw(requestParameters: DriverControllerChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تغيير كلمة المرور
     */
    driverControllerChangePassword(requestParameters: DriverControllerChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إتمام التوصيل
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerCompleteDeliveryRaw(requestParameters: DriverControllerCompleteDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إتمام التوصيل
     */
    driverControllerCompleteDelivery(requestParameters: DriverControllerCompleteDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء سائق جديد (للإدارة)
     * @param {CreateDriverDto} createDriverDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerCreateRaw(requestParameters: DriverControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء سائق جديد (للإدارة)
     */
    driverControllerCreate(requestParameters: DriverControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب السائقين المتاحين
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerFindAvailableRaw(requestParameters: DriverControllerFindAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب السائقين المتاحين
     */
    driverControllerFindAvailable(requestParameters: DriverControllerFindAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب سائق محدد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerFindOneRaw(requestParameters: DriverControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب سائق محدد
     */
    driverControllerFindOne(requestParameters: DriverControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الطلبات المتاحة للاستلام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetAvailableOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الطلبات المتاحة للاستلام
     */
    driverControllerGetAvailableOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أرباح اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetDailyEarningsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أرباح اليوم
     */
    driverControllerGetDailyEarnings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مستنداتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetDocumentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مستنداتي
     */
    driverControllerGetDocuments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مستندات سائق (Admin)
     * @param {string} driverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetDriverDocumentsAdminRaw(requestParameters: DriverControllerGetDriverDocumentsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مستندات سائق (Admin)
     */
    driverControllerGetDriverDocumentsAdmin(requestParameters: DriverControllerGetDriverDocumentsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أرباحي
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetEarningsRaw(requestParameters: DriverControllerGetEarningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أرباحي
     */
    driverControllerGetEarnings(requestParameters: DriverControllerGetEarningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إجازاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetMyVacationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إجازاتي
     */
    driverControllerGetMyVacations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل الطلبات
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetOrdersHistoryRaw(requestParameters: DriverControllerGetOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل الطلبات
     */
    driverControllerGetOrdersHistory(requestParameters: DriverControllerGetOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ملفي الشخصي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ملفي الشخصي
     */
    driverControllerGetProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائياتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetStatisticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائياتي
     */
    driverControllerGetStatistics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رصيد الإجازات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetVacationBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رصيد الإجازات
     */
    driverControllerGetVacationBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سياسة الإجازات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetVacationPolicyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سياسة الإجازات
     */
    driverControllerGetVacationPolicy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أرباح الأسبوع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerGetWeeklyEarningsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أرباح الأسبوع
     */
    driverControllerGetWeeklyEarnings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض طلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerRejectOrderRaw(requestParameters: DriverControllerRejectOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض طلب
     */
    driverControllerRejectOrder(requestParameters: DriverControllerRejectOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الإبلاغ عن مشكلة
     * @param {DriverControllerReportIssueRequest} driverControllerReportIssueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerReportIssueRaw(requestParameters: DriverControllerReportIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الإبلاغ عن مشكلة
     */
    driverControllerReportIssue(requestParameters: DriverControllerReportIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلب إجازة
     * @param {DriverControllerRequestVacationRequest} driverControllerRequestVacationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerRequestVacationRaw(requestParameters: DriverControllerRequestVacationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلب إجازة
     */
    driverControllerRequestVacation(requestParameters: DriverControllerRequestVacationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary بدء التوصيل
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerStartDeliveryRaw(requestParameters: DriverControllerStartDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * بدء التوصيل
     */
    driverControllerStartDelivery(requestParameters: DriverControllerStartDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث حالة التوفر
     * @param {DriverControllerUpdateAvailabilityRequest} driverControllerUpdateAvailabilityRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerUpdateAvailabilityRaw(requestParameters: DriverControllerUpdateAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث حالة التوفر
     */
    driverControllerUpdateAvailability(requestParameters: DriverControllerUpdateAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث موقع السائق
     * @param {UpdateLocationDto} updateLocationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerUpdateLocationRaw(requestParameters: DriverControllerUpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث موقع السائق
     */
    driverControllerUpdateLocation(requestParameters: DriverControllerUpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث الملف الشخصي
     * @param {DriverControllerUpdateProfileRequest} driverControllerUpdateProfileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerUpdateProfileRaw(requestParameters: DriverControllerUpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث الملف الشخصي
     */
    driverControllerUpdateProfile(requestParameters: DriverControllerUpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفع مستند
     * @param {DriverControllerUploadDocumentRequest} driverControllerUploadDocumentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerUploadDocumentRaw(requestParameters: DriverControllerUploadDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفع مستند
     */
    driverControllerUploadDocument(requestParameters: DriverControllerUploadDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التحقق من مستند (Admin)
     * @param {string} driverId 
     * @param {string} docId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverApiInterface
     */
    driverControllerVerifyDocumentRaw(requestParameters: DriverControllerVerifyDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من مستند (Admin)
     */
    driverControllerVerifyDocument(requestParameters: DriverControllerVerifyDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DriverApi extends runtime.BaseAPI implements DriverApiInterface {

    /**
     * قبول طلب
     */
    async driverControllerAcceptOrderRaw(requestParameters: DriverControllerAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling driverControllerAcceptOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/orders/{id}/accept`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * قبول طلب
     */
    async driverControllerAcceptOrder(requestParameters: DriverControllerAcceptOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerAcceptOrderRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء طلب إجازة
     */
    async driverControllerCancelVacationRaw(requestParameters: DriverControllerCancelVacationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling driverControllerCancelVacation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/vacations/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء طلب إجازة
     */
    async driverControllerCancelVacation(requestParameters: DriverControllerCancelVacationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerCancelVacationRaw(requestParameters, initOverrides);
    }

    /**
     * تغيير كلمة المرور
     */
    async driverControllerChangePasswordRaw(requestParameters: DriverControllerChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverControllerChangePasswordRequest'] == null) {
            throw new runtime.RequiredError(
                'driverControllerChangePasswordRequest',
                'Required parameter "driverControllerChangePasswordRequest" was null or undefined when calling driverControllerChangePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/change-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DriverControllerChangePasswordRequestToJSON(requestParameters['driverControllerChangePasswordRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تغيير كلمة المرور
     */
    async driverControllerChangePassword(requestParameters: DriverControllerChangePasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerChangePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * إتمام التوصيل
     */
    async driverControllerCompleteDeliveryRaw(requestParameters: DriverControllerCompleteDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling driverControllerCompleteDelivery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/orders/{id}/complete`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إتمام التوصيل
     */
    async driverControllerCompleteDelivery(requestParameters: DriverControllerCompleteDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerCompleteDeliveryRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء سائق جديد (للإدارة)
     */
    async driverControllerCreateRaw(requestParameters: DriverControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createDriverDto'] == null) {
            throw new runtime.RequiredError(
                'createDriverDto',
                'Required parameter "createDriverDto" was null or undefined when calling driverControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDriverDtoToJSON(requestParameters['createDriverDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء سائق جديد (للإدارة)
     */
    async driverControllerCreate(requestParameters: DriverControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * جلب السائقين المتاحين
     */
    async driverControllerFindAvailableRaw(requestParameters: DriverControllerFindAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/available`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب السائقين المتاحين
     */
    async driverControllerFindAvailable(requestParameters: DriverControllerFindAvailableRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerFindAvailableRaw(requestParameters, initOverrides);
    }

    /**
     * جلب سائق محدد
     */
    async driverControllerFindOneRaw(requestParameters: DriverControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling driverControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب سائق محدد
     */
    async driverControllerFindOne(requestParameters: DriverControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerFindOneRaw(requestParameters, initOverrides);
    }

    /**
     * الطلبات المتاحة للاستلام
     */
    async driverControllerGetAvailableOrdersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/orders/available`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الطلبات المتاحة للاستلام
     */
    async driverControllerGetAvailableOrders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetAvailableOrdersRaw(initOverrides);
    }

    /**
     * أرباح اليوم
     */
    async driverControllerGetDailyEarningsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/earnings/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أرباح اليوم
     */
    async driverControllerGetDailyEarnings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetDailyEarningsRaw(initOverrides);
    }

    /**
     * مستنداتي
     */
    async driverControllerGetDocumentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مستنداتي
     */
    async driverControllerGetDocuments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetDocumentsRaw(initOverrides);
    }

    /**
     * مستندات سائق (Admin)
     */
    async driverControllerGetDriverDocumentsAdminRaw(requestParameters: DriverControllerGetDriverDocumentsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverId'] == null) {
            throw new runtime.RequiredError(
                'driverId',
                'Required parameter "driverId" was null or undefined when calling driverControllerGetDriverDocumentsAdmin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/{driverId}/documents`;
        urlPath = urlPath.replace(`{${"driverId"}}`, encodeURIComponent(String(requestParameters['driverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مستندات سائق (Admin)
     */
    async driverControllerGetDriverDocumentsAdmin(requestParameters: DriverControllerGetDriverDocumentsAdminRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetDriverDocumentsAdminRaw(requestParameters, initOverrides);
    }

    /**
     * أرباحي
     */
    async driverControllerGetEarningsRaw(requestParameters: DriverControllerGetEarningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling driverControllerGetEarnings().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling driverControllerGetEarnings().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/earnings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أرباحي
     */
    async driverControllerGetEarnings(requestParameters: DriverControllerGetEarningsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetEarningsRaw(requestParameters, initOverrides);
    }

    /**
     * إجازاتي
     */
    async driverControllerGetMyVacationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/vacations/my`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إجازاتي
     */
    async driverControllerGetMyVacations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetMyVacationsRaw(initOverrides);
    }

    /**
     * سجل الطلبات
     */
    async driverControllerGetOrdersHistoryRaw(requestParameters: DriverControllerGetOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/orders/history`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل الطلبات
     */
    async driverControllerGetOrdersHistory(requestParameters: DriverControllerGetOrdersHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetOrdersHistoryRaw(requestParameters, initOverrides);
    }

    /**
     * ملفي الشخصي
     */
    async driverControllerGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/profile`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ملفي الشخصي
     */
    async driverControllerGetProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetProfileRaw(initOverrides);
    }

    /**
     * إحصائياتي
     */
    async driverControllerGetStatisticsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/statistics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائياتي
     */
    async driverControllerGetStatistics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetStatisticsRaw(initOverrides);
    }

    /**
     * رصيد الإجازات
     */
    async driverControllerGetVacationBalanceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/vacations/balance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رصيد الإجازات
     */
    async driverControllerGetVacationBalance(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetVacationBalanceRaw(initOverrides);
    }

    /**
     * سياسة الإجازات
     */
    async driverControllerGetVacationPolicyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/vacations/policy`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سياسة الإجازات
     */
    async driverControllerGetVacationPolicy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetVacationPolicyRaw(initOverrides);
    }

    /**
     * أرباح الأسبوع
     */
    async driverControllerGetWeeklyEarningsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/earnings/weekly`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أرباح الأسبوع
     */
    async driverControllerGetWeeklyEarnings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerGetWeeklyEarningsRaw(initOverrides);
    }

    /**
     * رفض طلب
     */
    async driverControllerRejectOrderRaw(requestParameters: DriverControllerRejectOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling driverControllerRejectOrder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/orders/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض طلب
     */
    async driverControllerRejectOrder(requestParameters: DriverControllerRejectOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerRejectOrderRaw(requestParameters, initOverrides);
    }

    /**
     * الإبلاغ عن مشكلة
     */
    async driverControllerReportIssueRaw(requestParameters: DriverControllerReportIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverControllerReportIssueRequest'] == null) {
            throw new runtime.RequiredError(
                'driverControllerReportIssueRequest',
                'Required parameter "driverControllerReportIssueRequest" was null or undefined when calling driverControllerReportIssue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/issues/report`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DriverControllerReportIssueRequestToJSON(requestParameters['driverControllerReportIssueRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الإبلاغ عن مشكلة
     */
    async driverControllerReportIssue(requestParameters: DriverControllerReportIssueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerReportIssueRaw(requestParameters, initOverrides);
    }

    /**
     * طلب إجازة
     */
    async driverControllerRequestVacationRaw(requestParameters: DriverControllerRequestVacationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverControllerRequestVacationRequest'] == null) {
            throw new runtime.RequiredError(
                'driverControllerRequestVacationRequest',
                'Required parameter "driverControllerRequestVacationRequest" was null or undefined when calling driverControllerRequestVacation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/vacations/request`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DriverControllerRequestVacationRequestToJSON(requestParameters['driverControllerRequestVacationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلب إجازة
     */
    async driverControllerRequestVacation(requestParameters: DriverControllerRequestVacationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerRequestVacationRaw(requestParameters, initOverrides);
    }

    /**
     * بدء التوصيل
     */
    async driverControllerStartDeliveryRaw(requestParameters: DriverControllerStartDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling driverControllerStartDelivery().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/orders/{id}/start-delivery`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * بدء التوصيل
     */
    async driverControllerStartDelivery(requestParameters: DriverControllerStartDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerStartDeliveryRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث حالة التوفر
     */
    async driverControllerUpdateAvailabilityRaw(requestParameters: DriverControllerUpdateAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverControllerUpdateAvailabilityRequest'] == null) {
            throw new runtime.RequiredError(
                'driverControllerUpdateAvailabilityRequest',
                'Required parameter "driverControllerUpdateAvailabilityRequest" was null or undefined when calling driverControllerUpdateAvailability().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/availability`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DriverControllerUpdateAvailabilityRequestToJSON(requestParameters['driverControllerUpdateAvailabilityRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث حالة التوفر
     */
    async driverControllerUpdateAvailability(requestParameters: DriverControllerUpdateAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerUpdateAvailabilityRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث موقع السائق
     */
    async driverControllerUpdateLocationRaw(requestParameters: DriverControllerUpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['updateLocationDto'] == null) {
            throw new runtime.RequiredError(
                'updateLocationDto',
                'Required parameter "updateLocationDto" was null or undefined when calling driverControllerUpdateLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/location`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLocationDtoToJSON(requestParameters['updateLocationDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث موقع السائق
     */
    async driverControllerUpdateLocation(requestParameters: DriverControllerUpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerUpdateLocationRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث الملف الشخصي
     */
    async driverControllerUpdateProfileRaw(requestParameters: DriverControllerUpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverControllerUpdateProfileRequest'] == null) {
            throw new runtime.RequiredError(
                'driverControllerUpdateProfileRequest',
                'Required parameter "driverControllerUpdateProfileRequest" was null or undefined when calling driverControllerUpdateProfile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/profile`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DriverControllerUpdateProfileRequestToJSON(requestParameters['driverControllerUpdateProfileRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث الملف الشخصي
     */
    async driverControllerUpdateProfile(requestParameters: DriverControllerUpdateProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerUpdateProfileRaw(requestParameters, initOverrides);
    }

    /**
     * رفع مستند
     */
    async driverControllerUploadDocumentRaw(requestParameters: DriverControllerUploadDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverControllerUploadDocumentRequest'] == null) {
            throw new runtime.RequiredError(
                'driverControllerUploadDocumentRequest',
                'Required parameter "driverControllerUploadDocumentRequest" was null or undefined when calling driverControllerUploadDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/documents/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DriverControllerUploadDocumentRequestToJSON(requestParameters['driverControllerUploadDocumentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفع مستند
     */
    async driverControllerUploadDocument(requestParameters: DriverControllerUploadDocumentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerUploadDocumentRaw(requestParameters, initOverrides);
    }

    /**
     * التحقق من مستند (Admin)
     */
    async driverControllerVerifyDocumentRaw(requestParameters: DriverControllerVerifyDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['driverId'] == null) {
            throw new runtime.RequiredError(
                'driverId',
                'Required parameter "driverId" was null or undefined when calling driverControllerVerifyDocument().'
            );
        }

        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling driverControllerVerifyDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/drivers/{driverId}/documents/{docId}/verify`;
        urlPath = urlPath.replace(`{${"driverId"}}`, encodeURIComponent(String(requestParameters['driverId'])));
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من مستند (Admin)
     */
    async driverControllerVerifyDocument(requestParameters: DriverControllerVerifyDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.driverControllerVerifyDocumentRaw(requestParameters, initOverrides);
    }

}
