/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalyticsControllerRecordAdSpendRequest,
  AnalyticsControllerTrackEventRequest,
  FinanceControllerGenerateDailyReportRequest,
} from '../models/index';
import {
    AnalyticsControllerRecordAdSpendRequestFromJSON,
    AnalyticsControllerRecordAdSpendRequestToJSON,
    AnalyticsControllerTrackEventRequestFromJSON,
    AnalyticsControllerTrackEventRequestToJSON,
    FinanceControllerGenerateDailyReportRequestFromJSON,
    FinanceControllerGenerateDailyReportRequestToJSON,
} from '../models/index';

export interface AnalyticsControllerCalculateRoasRequest {
    financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest;
}

export interface AnalyticsControllerGetAdSpendRequest {
    startDate: string;
    endDate: string;
    platform: string;
}

export interface AnalyticsControllerGetAdSpendSummaryRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetChurnRateRequest {
    period: string;
}

export interface AnalyticsControllerGetCohortAnalysisRequest {
    cohortDate: string;
}

export interface AnalyticsControllerGetCohortAnalysisAdvancedRequest {
    type: string;
}

export interface AnalyticsControllerGetConversionFunnelRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetDailyRoasRequest {
    startDate: string;
    endDate: string;
    platform: string;
}

export interface AnalyticsControllerGetDashboardOverviewRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetDriverPerformanceRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetEventsRequest {
    eventType: string;
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetEventsSummaryRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetFunnelAnalysisRequest {
    funnelType: string;
}

export interface AnalyticsControllerGetGeographicDistributionRequest {
    metric: string;
}

export interface AnalyticsControllerGetKPITrendsRequest {
    metric: string;
    period: string;
}

export interface AnalyticsControllerGetKPIsRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetProductPerformanceRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetRetentionRateRequest {
    period: string;
}

export interface AnalyticsControllerGetRevenueBreakdownRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetRoasByPlatformRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetRoasSummaryRequest {
    startDate: string;
    endDate: string;
}

export interface AnalyticsControllerGetUserGrowthRequest {
    period: string;
}

export interface AnalyticsControllerRecordAdSpendOperationRequest {
    analyticsControllerRecordAdSpendRequest: AnalyticsControllerRecordAdSpendRequest;
}

export interface AnalyticsControllerTrackEventOperationRequest {
    analyticsControllerTrackEventRequest: AnalyticsControllerTrackEventRequest;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary حساب ROAS
     * @param {FinanceControllerGenerateDailyReportRequest} financeControllerGenerateDailyReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerCalculateRoasRaw(requestParameters: AnalyticsControllerCalculateRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حساب ROAS
     */
    analyticsControllerCalculateRoas(requestParameters: AnalyticsControllerCalculateRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الإنفاق الإعلاني
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {string} platform 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetAdSpendRaw(requestParameters: AnalyticsControllerGetAdSpendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الإنفاق الإعلاني
     */
    analyticsControllerGetAdSpend(requestParameters: AnalyticsControllerGetAdSpendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ملخص الإنفاق الإعلاني
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetAdSpendSummaryRaw(requestParameters: AnalyticsControllerGetAdSpendSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ملخص الإنفاق الإعلاني
     */
    analyticsControllerGetAdSpendSummary(requestParameters: AnalyticsControllerGetAdSpendSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary معدل التراجع
     * @param {string} period 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetChurnRateRaw(requestParameters: AnalyticsControllerGetChurnRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * معدل التراجع
     */
    analyticsControllerGetChurnRate(requestParameters: AnalyticsControllerGetChurnRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحليل الأفواج
     * @param {string} cohortDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetCohortAnalysisRaw(requestParameters: AnalyticsControllerGetCohortAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحليل الأفواج
     */
    analyticsControllerGetCohortAnalysis(requestParameters: AnalyticsControllerGetCohortAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحليل المجموعات المتقدم
     * @param {string} type 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetCohortAnalysisAdvancedRaw(requestParameters: AnalyticsControllerGetCohortAnalysisAdvancedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحليل المجموعات المتقدم
     */
    analyticsControllerGetCohortAnalysisAdvanced(requestParameters: AnalyticsControllerGetCohortAnalysisAdvancedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary قمع التحويل
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetConversionFunnelRaw(requestParameters: AnalyticsControllerGetConversionFunnelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * قمع التحويل
     */
    analyticsControllerGetConversionFunnel(requestParameters: AnalyticsControllerGetConversionFunnelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary القيمة الدائمة للعميل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetCustomerLTVRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * القيمة الدائمة للعميل
     */
    analyticsControllerGetCustomerLTV(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ROAS اليومي
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {string} platform 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetDailyRoasRaw(requestParameters: AnalyticsControllerGetDailyRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ROAS اليومي
     */
    analyticsControllerGetDailyRoas(requestParameters: AnalyticsControllerGetDailyRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary نظرة عامة متقدمة
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetDashboardOverviewRaw(requestParameters: AnalyticsControllerGetDashboardOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * نظرة عامة متقدمة
     */
    analyticsControllerGetDashboardOverview(requestParameters: AnalyticsControllerGetDashboardOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أداء السائقين
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetDriverPerformanceRaw(requestParameters: AnalyticsControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أداء السائقين
     */
    analyticsControllerGetDriverPerformance(requestParameters: AnalyticsControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary نقاط الانسحاب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetDropOffPointsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * نقاط الانسحاب
     */
    analyticsControllerGetDropOffPoints(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الأحداث التسويقية
     * @param {string} eventType 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetEventsRaw(requestParameters: AnalyticsControllerGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الأحداث التسويقية
     */
    analyticsControllerGetEvents(requestParameters: AnalyticsControllerGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ملخص الأحداث
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetEventsSummaryRaw(requestParameters: AnalyticsControllerGetEventsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ملخص الأحداث
     */
    analyticsControllerGetEventsSummary(requestParameters: AnalyticsControllerGetEventsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحليل القمع
     * @param {string} funnelType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetFunnelAnalysisRaw(requestParameters: AnalyticsControllerGetFunnelAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحليل القمع
     */
    analyticsControllerGetFunnelAnalysis(requestParameters: AnalyticsControllerGetFunnelAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التوزيع الجغرافي
     * @param {string} metric 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetGeographicDistributionRaw(requestParameters: AnalyticsControllerGetGeographicDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التوزيع الجغرافي
     */
    analyticsControllerGetGeographicDistribution(requestParameters: AnalyticsControllerGetGeographicDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary اتجاهات الأداء
     * @param {string} metric 
     * @param {string} period 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetKPITrendsRaw(requestParameters: AnalyticsControllerGetKPITrendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * اتجاهات الأداء
     */
    analyticsControllerGetKPITrends(requestParameters: AnalyticsControllerGetKPITrendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مؤشرات الأداء الرئيسية
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetKPIsRaw(requestParameters: AnalyticsControllerGetKPIsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مؤشرات الأداء الرئيسية
     */
    analyticsControllerGetKPIs(requestParameters: AnalyticsControllerGetKPIsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ساعات الذروة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetPeakHoursRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ساعات الذروة
     */
    analyticsControllerGetPeakHours(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أداء المنتجات
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetProductPerformanceRaw(requestParameters: AnalyticsControllerGetProductPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أداء المنتجات
     */
    analyticsControllerGetProductPerformance(requestParameters: AnalyticsControllerGetProductPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مؤشرات الأداء الحية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetRealTimeKPIsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مؤشرات الأداء الحية
     */
    analyticsControllerGetRealTimeKPIs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary معدل الاحتفاظ
     * @param {string} period 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetRetentionRateRaw(requestParameters: AnalyticsControllerGetRetentionRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * معدل الاحتفاظ
     */
    analyticsControllerGetRetentionRate(requestParameters: AnalyticsControllerGetRetentionRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفصيل الإيرادات
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetRevenueBreakdownRaw(requestParameters: AnalyticsControllerGetRevenueBreakdownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفصيل الإيرادات
     */
    analyticsControllerGetRevenueBreakdown(requestParameters: AnalyticsControllerGetRevenueBreakdownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary توقعات الإيرادات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetRevenueForecastRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * توقعات الإيرادات
     */
    analyticsControllerGetRevenueForecast(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ROAS حسب المنصة
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetRoasByPlatformRaw(requestParameters: AnalyticsControllerGetRoasByPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ROAS حسب المنصة
     */
    analyticsControllerGetRoasByPlatform(requestParameters: AnalyticsControllerGetRoasByPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ملخص ROAS
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetRoasSummaryRaw(requestParameters: AnalyticsControllerGetRoasSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ملخص ROAS
     */
    analyticsControllerGetRoasSummary(requestParameters: AnalyticsControllerGetRoasSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary نمو المستخدمين
     * @param {string} period 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetUserGrowthRaw(requestParameters: AnalyticsControllerGetUserGrowthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * نمو المستخدمين
     */
    analyticsControllerGetUserGrowth(requestParameters: AnalyticsControllerGetUserGrowthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary معدل الاحتفاظ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerGetUserRetentionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * معدل الاحتفاظ
     */
    analyticsControllerGetUserRetention(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل إنفاق إعلاني
     * @param {AnalyticsControllerRecordAdSpendRequest} analyticsControllerRecordAdSpendRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerRecordAdSpendRaw(requestParameters: AnalyticsControllerRecordAdSpendOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل إنفاق إعلاني
     */
    analyticsControllerRecordAdSpend(requestParameters: AnalyticsControllerRecordAdSpendOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تتبع حدث تسويقي
     * @param {AnalyticsControllerTrackEventRequest} analyticsControllerTrackEventRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    analyticsControllerTrackEventRaw(requestParameters: AnalyticsControllerTrackEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تتبع حدث تسويقي
     */
    analyticsControllerTrackEvent(requestParameters: AnalyticsControllerTrackEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * حساب ROAS
     */
    async analyticsControllerCalculateRoasRaw(requestParameters: AnalyticsControllerCalculateRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['financeControllerGenerateDailyReportRequest'] == null) {
            throw new runtime.RequiredError(
                'financeControllerGenerateDailyReportRequest',
                'Required parameter "financeControllerGenerateDailyReportRequest" was null or undefined when calling analyticsControllerCalculateRoas().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/roas/calculate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FinanceControllerGenerateDailyReportRequestToJSON(requestParameters['financeControllerGenerateDailyReportRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حساب ROAS
     */
    async analyticsControllerCalculateRoas(requestParameters: AnalyticsControllerCalculateRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerCalculateRoasRaw(requestParameters, initOverrides);
    }

    /**
     * الإنفاق الإعلاني
     */
    async analyticsControllerGetAdSpendRaw(requestParameters: AnalyticsControllerGetAdSpendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetAdSpend().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetAdSpend().'
            );
        }

        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling analyticsControllerGetAdSpend().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/adspend`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الإنفاق الإعلاني
     */
    async analyticsControllerGetAdSpend(requestParameters: AnalyticsControllerGetAdSpendRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetAdSpendRaw(requestParameters, initOverrides);
    }

    /**
     * ملخص الإنفاق الإعلاني
     */
    async analyticsControllerGetAdSpendSummaryRaw(requestParameters: AnalyticsControllerGetAdSpendSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetAdSpendSummary().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetAdSpendSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/adspend/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ملخص الإنفاق الإعلاني
     */
    async analyticsControllerGetAdSpendSummary(requestParameters: AnalyticsControllerGetAdSpendSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetAdSpendSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * معدل التراجع
     */
    async analyticsControllerGetChurnRateRaw(requestParameters: AnalyticsControllerGetChurnRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling analyticsControllerGetChurnRate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/churn-rate`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * معدل التراجع
     */
    async analyticsControllerGetChurnRate(requestParameters: AnalyticsControllerGetChurnRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetChurnRateRaw(requestParameters, initOverrides);
    }

    /**
     * تحليل الأفواج
     */
    async analyticsControllerGetCohortAnalysisRaw(requestParameters: AnalyticsControllerGetCohortAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['cohortDate'] == null) {
            throw new runtime.RequiredError(
                'cohortDate',
                'Required parameter "cohortDate" was null or undefined when calling analyticsControllerGetCohortAnalysis().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cohortDate'] != null) {
            queryParameters['cohortDate'] = requestParameters['cohortDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/users/cohort`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحليل الأفواج
     */
    async analyticsControllerGetCohortAnalysis(requestParameters: AnalyticsControllerGetCohortAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetCohortAnalysisRaw(requestParameters, initOverrides);
    }

    /**
     * تحليل المجموعات المتقدم
     */
    async analyticsControllerGetCohortAnalysisAdvancedRaw(requestParameters: AnalyticsControllerGetCohortAnalysisAdvancedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling analyticsControllerGetCohortAnalysisAdvanced().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/cohort-analysis-advanced`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحليل المجموعات المتقدم
     */
    async analyticsControllerGetCohortAnalysisAdvanced(requestParameters: AnalyticsControllerGetCohortAnalysisAdvancedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetCohortAnalysisAdvancedRaw(requestParameters, initOverrides);
    }

    /**
     * قمع التحويل
     */
    async analyticsControllerGetConversionFunnelRaw(requestParameters: AnalyticsControllerGetConversionFunnelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetConversionFunnel().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetConversionFunnel().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/funnel/conversion`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * قمع التحويل
     */
    async analyticsControllerGetConversionFunnel(requestParameters: AnalyticsControllerGetConversionFunnelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetConversionFunnelRaw(requestParameters, initOverrides);
    }

    /**
     * القيمة الدائمة للعميل
     */
    async analyticsControllerGetCustomerLTVRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/ltv`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * القيمة الدائمة للعميل
     */
    async analyticsControllerGetCustomerLTV(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetCustomerLTVRaw(initOverrides);
    }

    /**
     * ROAS اليومي
     */
    async analyticsControllerGetDailyRoasRaw(requestParameters: AnalyticsControllerGetDailyRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetDailyRoas().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetDailyRoas().'
            );
        }

        if (requestParameters['platform'] == null) {
            throw new runtime.RequiredError(
                'platform',
                'Required parameter "platform" was null or undefined when calling analyticsControllerGetDailyRoas().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        if (requestParameters['platform'] != null) {
            queryParameters['platform'] = requestParameters['platform'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/roas/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ROAS اليومي
     */
    async analyticsControllerGetDailyRoas(requestParameters: AnalyticsControllerGetDailyRoasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetDailyRoasRaw(requestParameters, initOverrides);
    }

    /**
     * نظرة عامة متقدمة
     */
    async analyticsControllerGetDashboardOverviewRaw(requestParameters: AnalyticsControllerGetDashboardOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetDashboardOverview().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetDashboardOverview().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/dashboard-overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * نظرة عامة متقدمة
     */
    async analyticsControllerGetDashboardOverview(requestParameters: AnalyticsControllerGetDashboardOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetDashboardOverviewRaw(requestParameters, initOverrides);
    }

    /**
     * أداء السائقين
     */
    async analyticsControllerGetDriverPerformanceRaw(requestParameters: AnalyticsControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetDriverPerformance().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetDriverPerformance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/driver-performance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أداء السائقين
     */
    async analyticsControllerGetDriverPerformance(requestParameters: AnalyticsControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetDriverPerformanceRaw(requestParameters, initOverrides);
    }

    /**
     * نقاط الانسحاب
     */
    async analyticsControllerGetDropOffPointsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/funnel/drop-off`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * نقاط الانسحاب
     */
    async analyticsControllerGetDropOffPoints(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetDropOffPointsRaw(initOverrides);
    }

    /**
     * الأحداث التسويقية
     */
    async analyticsControllerGetEventsRaw(requestParameters: AnalyticsControllerGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventType'] == null) {
            throw new runtime.RequiredError(
                'eventType',
                'Required parameter "eventType" was null or undefined when calling analyticsControllerGetEvents().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetEvents().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetEvents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['eventType'] != null) {
            queryParameters['eventType'] = requestParameters['eventType'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/events`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الأحداث التسويقية
     */
    async analyticsControllerGetEvents(requestParameters: AnalyticsControllerGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetEventsRaw(requestParameters, initOverrides);
    }

    /**
     * ملخص الأحداث
     */
    async analyticsControllerGetEventsSummaryRaw(requestParameters: AnalyticsControllerGetEventsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetEventsSummary().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetEventsSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/events/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ملخص الأحداث
     */
    async analyticsControllerGetEventsSummary(requestParameters: AnalyticsControllerGetEventsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetEventsSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * تحليل القمع
     */
    async analyticsControllerGetFunnelAnalysisRaw(requestParameters: AnalyticsControllerGetFunnelAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['funnelType'] == null) {
            throw new runtime.RequiredError(
                'funnelType',
                'Required parameter "funnelType" was null or undefined when calling analyticsControllerGetFunnelAnalysis().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['funnelType'] != null) {
            queryParameters['funnelType'] = requestParameters['funnelType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/funnel-analysis`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحليل القمع
     */
    async analyticsControllerGetFunnelAnalysis(requestParameters: AnalyticsControllerGetFunnelAnalysisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetFunnelAnalysisRaw(requestParameters, initOverrides);
    }

    /**
     * التوزيع الجغرافي
     */
    async analyticsControllerGetGeographicDistributionRaw(requestParameters: AnalyticsControllerGetGeographicDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['metric'] == null) {
            throw new runtime.RequiredError(
                'metric',
                'Required parameter "metric" was null or undefined when calling analyticsControllerGetGeographicDistribution().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['metric'] != null) {
            queryParameters['metric'] = requestParameters['metric'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/geographic-distribution`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التوزيع الجغرافي
     */
    async analyticsControllerGetGeographicDistribution(requestParameters: AnalyticsControllerGetGeographicDistributionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetGeographicDistributionRaw(requestParameters, initOverrides);
    }

    /**
     * اتجاهات الأداء
     */
    async analyticsControllerGetKPITrendsRaw(requestParameters: AnalyticsControllerGetKPITrendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['metric'] == null) {
            throw new runtime.RequiredError(
                'metric',
                'Required parameter "metric" was null or undefined when calling analyticsControllerGetKPITrends().'
            );
        }

        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling analyticsControllerGetKPITrends().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['metric'] != null) {
            queryParameters['metric'] = requestParameters['metric'];
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/kpis/trends`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * اتجاهات الأداء
     */
    async analyticsControllerGetKPITrends(requestParameters: AnalyticsControllerGetKPITrendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetKPITrendsRaw(requestParameters, initOverrides);
    }

    /**
     * مؤشرات الأداء الرئيسية
     */
    async analyticsControllerGetKPIsRaw(requestParameters: AnalyticsControllerGetKPIsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetKPIs().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetKPIs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/kpis`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مؤشرات الأداء الرئيسية
     */
    async analyticsControllerGetKPIs(requestParameters: AnalyticsControllerGetKPIsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetKPIsRaw(requestParameters, initOverrides);
    }

    /**
     * ساعات الذروة
     */
    async analyticsControllerGetPeakHoursRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/peak-hours`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ساعات الذروة
     */
    async analyticsControllerGetPeakHours(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetPeakHoursRaw(initOverrides);
    }

    /**
     * أداء المنتجات
     */
    async analyticsControllerGetProductPerformanceRaw(requestParameters: AnalyticsControllerGetProductPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetProductPerformance().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetProductPerformance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/product-performance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أداء المنتجات
     */
    async analyticsControllerGetProductPerformance(requestParameters: AnalyticsControllerGetProductPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetProductPerformanceRaw(requestParameters, initOverrides);
    }

    /**
     * مؤشرات الأداء الحية
     */
    async analyticsControllerGetRealTimeKPIsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/kpis/real-time`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مؤشرات الأداء الحية
     */
    async analyticsControllerGetRealTimeKPIs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetRealTimeKPIsRaw(initOverrides);
    }

    /**
     * معدل الاحتفاظ
     */
    async analyticsControllerGetRetentionRateRaw(requestParameters: AnalyticsControllerGetRetentionRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling analyticsControllerGetRetentionRate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/advanced/retention`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * معدل الاحتفاظ
     */
    async analyticsControllerGetRetentionRate(requestParameters: AnalyticsControllerGetRetentionRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetRetentionRateRaw(requestParameters, initOverrides);
    }

    /**
     * تفصيل الإيرادات
     */
    async analyticsControllerGetRevenueBreakdownRaw(requestParameters: AnalyticsControllerGetRevenueBreakdownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetRevenueBreakdown().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetRevenueBreakdown().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/revenue/breakdown`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفصيل الإيرادات
     */
    async analyticsControllerGetRevenueBreakdown(requestParameters: AnalyticsControllerGetRevenueBreakdownRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetRevenueBreakdownRaw(requestParameters, initOverrides);
    }

    /**
     * توقعات الإيرادات
     */
    async analyticsControllerGetRevenueForecastRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/revenue/forecast`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * توقعات الإيرادات
     */
    async analyticsControllerGetRevenueForecast(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetRevenueForecastRaw(initOverrides);
    }

    /**
     * ROAS حسب المنصة
     */
    async analyticsControllerGetRoasByPlatformRaw(requestParameters: AnalyticsControllerGetRoasByPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetRoasByPlatform().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetRoasByPlatform().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/roas/by-platform`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ROAS حسب المنصة
     */
    async analyticsControllerGetRoasByPlatform(requestParameters: AnalyticsControllerGetRoasByPlatformRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetRoasByPlatformRaw(requestParameters, initOverrides);
    }

    /**
     * ملخص ROAS
     */
    async analyticsControllerGetRoasSummaryRaw(requestParameters: AnalyticsControllerGetRoasSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling analyticsControllerGetRoasSummary().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling analyticsControllerGetRoasSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/roas/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ملخص ROAS
     */
    async analyticsControllerGetRoasSummary(requestParameters: AnalyticsControllerGetRoasSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetRoasSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * نمو المستخدمين
     */
    async analyticsControllerGetUserGrowthRaw(requestParameters: AnalyticsControllerGetUserGrowthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling analyticsControllerGetUserGrowth().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/users/growth`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * نمو المستخدمين
     */
    async analyticsControllerGetUserGrowth(requestParameters: AnalyticsControllerGetUserGrowthRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetUserGrowthRaw(requestParameters, initOverrides);
    }

    /**
     * معدل الاحتفاظ
     */
    async analyticsControllerGetUserRetentionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/users/retention`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * معدل الاحتفاظ
     */
    async analyticsControllerGetUserRetention(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerGetUserRetentionRaw(initOverrides);
    }

    /**
     * تسجيل إنفاق إعلاني
     */
    async analyticsControllerRecordAdSpendRaw(requestParameters: AnalyticsControllerRecordAdSpendOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['analyticsControllerRecordAdSpendRequest'] == null) {
            throw new runtime.RequiredError(
                'analyticsControllerRecordAdSpendRequest',
                'Required parameter "analyticsControllerRecordAdSpendRequest" was null or undefined when calling analyticsControllerRecordAdSpend().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/adspend`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticsControllerRecordAdSpendRequestToJSON(requestParameters['analyticsControllerRecordAdSpendRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل إنفاق إعلاني
     */
    async analyticsControllerRecordAdSpend(requestParameters: AnalyticsControllerRecordAdSpendOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerRecordAdSpendRaw(requestParameters, initOverrides);
    }

    /**
     * تتبع حدث تسويقي
     */
    async analyticsControllerTrackEventRaw(requestParameters: AnalyticsControllerTrackEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['analyticsControllerTrackEventRequest'] == null) {
            throw new runtime.RequiredError(
                'analyticsControllerTrackEventRequest',
                'Required parameter "analyticsControllerTrackEventRequest" was null or undefined when calling analyticsControllerTrackEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/analytics/events/track`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticsControllerTrackEventRequestToJSON(requestParameters['analyticsControllerTrackEventRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تتبع حدث تسويقي
     */
    async analyticsControllerTrackEvent(requestParameters: AnalyticsControllerTrackEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.analyticsControllerTrackEventRaw(requestParameters, initOverrides);
    }

}
