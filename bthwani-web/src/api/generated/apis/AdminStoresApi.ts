/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProductDto,
  CreateStoreDto,
} from '../models/index';
import {
    CreateProductDtoFromJSON,
    CreateProductDtoToJSON,
    CreateStoreDtoFromJSON,
    CreateStoreDtoToJSON,
} from '../models/index';

export interface StoreControllerActivateStoreRequest {
    id: string;
}

export interface StoreControllerAddProductVariantRequest {
    id: string;
}

export interface StoreControllerApproveStoreRequest {
    id: string;
}

export interface StoreControllerCreateProductRequest {
    createProductDto: CreateProductDto;
}

export interface StoreControllerCreateStoreRequest {
    createStoreDto: CreateStoreDto;
}

export interface StoreControllerDeactivateStoreRequest {
    id: string;
}

export interface StoreControllerDeleteStoreRequest {
    id: string;
}

export interface StoreControllerFindStoreRequest {
    id: string;
}

export interface StoreControllerFindStoresRequest {
    isActive: string;
    usageType: string;
    q: string;
    cursor?: string;
    limit?: number;
}

export interface StoreControllerForceCloseStoreRequest {
    id: string;
}

export interface StoreControllerForceOpenStoreRequest {
    id: string;
}

export interface StoreControllerGetProductVariantsRequest {
    id: string;
}

export interface StoreControllerGetProductsRequest {
    id: string;
    cursor?: string;
    limit?: number;
}

export interface StoreControllerGetStoreAnalyticsRequest {
    id: string;
    startDate: string;
    endDate: string;
}

export interface StoreControllerGetStoreInventoryRequest {
    id: string;
}

export interface StoreControllerRejectStoreRequest {
    id: string;
}

export interface StoreControllerSuspendStoreRequest {
    id: string;
}

export interface StoreControllerUpdateProductRequest {
    id: string;
}

export interface StoreControllerUpdateStoreRequest {
    id: string;
}

/**
 * AdminStoresApi - interface
 * 
 * @export
 * @interface AdminStoresApiInterface
 */
export interface AdminStoresApiInterface {
    /**
     * 
     * @summary تفعيل متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerActivateStoreRaw(requestParameters: StoreControllerActivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفعيل متجر
     */
    storeControllerActivateStore(requestParameters: StoreControllerActivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة متغير
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerAddProductVariantRaw(requestParameters: StoreControllerAddProductVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة متغير
     */
    storeControllerAddProductVariant(requestParameters: StoreControllerAddProductVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerApproveStoreRaw(requestParameters: StoreControllerApproveStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على متجر
     */
    storeControllerApproveStore(requestParameters: StoreControllerApproveStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء منتج
     * @param {CreateProductDto} createProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerCreateProductRaw(requestParameters: StoreControllerCreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء منتج
     */
    storeControllerCreateProduct(requestParameters: StoreControllerCreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء متجر
     * @param {CreateStoreDto} createStoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerCreateStoreRaw(requestParameters: StoreControllerCreateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء متجر
     */
    storeControllerCreateStore(requestParameters: StoreControllerCreateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعطيل متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerDeactivateStoreRaw(requestParameters: StoreControllerDeactivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعطيل متجر
     */
    storeControllerDeactivateStore(requestParameters: StoreControllerDeactivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerDeleteStoreRaw(requestParameters: StoreControllerDeleteStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف متجر
     */
    storeControllerDeleteStore(requestParameters: StoreControllerDeleteStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب متجر محدد - الإدارة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerFindStoreRaw(requestParameters: StoreControllerFindStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب متجر محدد - الإدارة
     */
    storeControllerFindStore(requestParameters: StoreControllerFindStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب المتاجر - الإدارة
     * @param {string} isActive 
     * @param {string} usageType 
     * @param {string} q 
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerFindStoresRaw(requestParameters: StoreControllerFindStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب المتاجر - الإدارة
     */
    storeControllerFindStores(requestParameters: StoreControllerFindStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إغلاق قسري للمتجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerForceCloseStoreRaw(requestParameters: StoreControllerForceCloseStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إغلاق قسري للمتجر
     */
    storeControllerForceCloseStore(requestParameters: StoreControllerForceCloseStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary فتح قسري للمتجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerForceOpenStoreRaw(requestParameters: StoreControllerForceOpenStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * فتح قسري للمتجر
     */
    storeControllerForceOpenStore(requestParameters: StoreControllerForceOpenStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary المتاجر المعلقة - تحتاج موافقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerGetPendingStoresRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * المتاجر المعلقة - تحتاج موافقة
     */
    storeControllerGetPendingStores(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary متغيرات المنتج
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerGetProductVariantsRaw(requestParameters: StoreControllerGetProductVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * متغيرات المنتج
     */
    storeControllerGetProductVariants(requestParameters: StoreControllerGetProductVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب منتجات المتجر - الإدارة
     * @param {string} id 
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerGetProductsRaw(requestParameters: StoreControllerGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب منتجات المتجر - الإدارة
     */
    storeControllerGetProducts(requestParameters: StoreControllerGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحليلات المتجر - الإدارة
     * @param {string} id 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerGetStoreAnalyticsRaw(requestParameters: StoreControllerGetStoreAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحليلات المتجر - الإدارة
     */
    storeControllerGetStoreAnalytics(requestParameters: StoreControllerGetStoreAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جرد المتجر - الإدارة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerGetStoreInventoryRaw(requestParameters: StoreControllerGetStoreInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جرد المتجر - الإدارة
     */
    storeControllerGetStoreInventory(requestParameters: StoreControllerGetStoreInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerRejectStoreRaw(requestParameters: StoreControllerRejectStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض متجر
     */
    storeControllerRejectStore(requestParameters: StoreControllerRejectStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعليق متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerSuspendStoreRaw(requestParameters: StoreControllerSuspendStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعليق متجر
     */
    storeControllerSuspendStore(requestParameters: StoreControllerSuspendStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث منتج
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerUpdateProductRaw(requestParameters: StoreControllerUpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث منتج
     */
    storeControllerUpdateProduct(requestParameters: StoreControllerUpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث متجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminStoresApiInterface
     */
    storeControllerUpdateStoreRaw(requestParameters: StoreControllerUpdateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث متجر
     */
    storeControllerUpdateStore(requestParameters: StoreControllerUpdateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AdminStoresApi extends runtime.BaseAPI implements AdminStoresApiInterface {

    /**
     * تفعيل متجر
     */
    async storeControllerActivateStoreRaw(requestParameters: StoreControllerActivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerActivateStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/activate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفعيل متجر
     */
    async storeControllerActivateStore(requestParameters: StoreControllerActivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerActivateStoreRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة متغير
     */
    async storeControllerAddProductVariantRaw(requestParameters: StoreControllerAddProductVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerAddProductVariant().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/products/{id}/variants`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة متغير
     */
    async storeControllerAddProductVariant(requestParameters: StoreControllerAddProductVariantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerAddProductVariantRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على متجر
     */
    async storeControllerApproveStoreRaw(requestParameters: StoreControllerApproveStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerApproveStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على متجر
     */
    async storeControllerApproveStore(requestParameters: StoreControllerApproveStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerApproveStoreRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء منتج
     */
    async storeControllerCreateProductRaw(requestParameters: StoreControllerCreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createProductDto'] == null) {
            throw new runtime.RequiredError(
                'createProductDto',
                'Required parameter "createProductDto" was null or undefined when calling storeControllerCreateProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/products`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductDtoToJSON(requestParameters['createProductDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء منتج
     */
    async storeControllerCreateProduct(requestParameters: StoreControllerCreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerCreateProductRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء متجر
     */
    async storeControllerCreateStoreRaw(requestParameters: StoreControllerCreateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createStoreDto'] == null) {
            throw new runtime.RequiredError(
                'createStoreDto',
                'Required parameter "createStoreDto" was null or undefined when calling storeControllerCreateStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStoreDtoToJSON(requestParameters['createStoreDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء متجر
     */
    async storeControllerCreateStore(requestParameters: StoreControllerCreateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerCreateStoreRaw(requestParameters, initOverrides);
    }

    /**
     * تعطيل متجر
     */
    async storeControllerDeactivateStoreRaw(requestParameters: StoreControllerDeactivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerDeactivateStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/deactivate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعطيل متجر
     */
    async storeControllerDeactivateStore(requestParameters: StoreControllerDeactivateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerDeactivateStoreRaw(requestParameters, initOverrides);
    }

    /**
     * حذف متجر
     */
    async storeControllerDeleteStoreRaw(requestParameters: StoreControllerDeleteStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerDeleteStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف متجر
     */
    async storeControllerDeleteStore(requestParameters: StoreControllerDeleteStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerDeleteStoreRaw(requestParameters, initOverrides);
    }

    /**
     * جلب متجر محدد - الإدارة
     */
    async storeControllerFindStoreRaw(requestParameters: StoreControllerFindStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerFindStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب متجر محدد - الإدارة
     */
    async storeControllerFindStore(requestParameters: StoreControllerFindStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerFindStoreRaw(requestParameters, initOverrides);
    }

    /**
     * جلب المتاجر - الإدارة
     */
    async storeControllerFindStoresRaw(requestParameters: StoreControllerFindStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['isActive'] == null) {
            throw new runtime.RequiredError(
                'isActive',
                'Required parameter "isActive" was null or undefined when calling storeControllerFindStores().'
            );
        }

        if (requestParameters['usageType'] == null) {
            throw new runtime.RequiredError(
                'usageType',
                'Required parameter "usageType" was null or undefined when calling storeControllerFindStores().'
            );
        }

        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling storeControllerFindStores().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['usageType'] != null) {
            queryParameters['usageType'] = requestParameters['usageType'];
        }

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب المتاجر - الإدارة
     */
    async storeControllerFindStores(requestParameters: StoreControllerFindStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerFindStoresRaw(requestParameters, initOverrides);
    }

    /**
     * إغلاق قسري للمتجر
     */
    async storeControllerForceCloseStoreRaw(requestParameters: StoreControllerForceCloseStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerForceCloseStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/force-close`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إغلاق قسري للمتجر
     */
    async storeControllerForceCloseStore(requestParameters: StoreControllerForceCloseStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerForceCloseStoreRaw(requestParameters, initOverrides);
    }

    /**
     * فتح قسري للمتجر
     */
    async storeControllerForceOpenStoreRaw(requestParameters: StoreControllerForceOpenStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerForceOpenStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/force-open`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * فتح قسري للمتجر
     */
    async storeControllerForceOpenStore(requestParameters: StoreControllerForceOpenStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerForceOpenStoreRaw(requestParameters, initOverrides);
    }

    /**
     * المتاجر المعلقة - تحتاج موافقة
     */
    async storeControllerGetPendingStoresRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/pending`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * المتاجر المعلقة - تحتاج موافقة
     */
    async storeControllerGetPendingStores(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerGetPendingStoresRaw(initOverrides);
    }

    /**
     * متغيرات المنتج
     */
    async storeControllerGetProductVariantsRaw(requestParameters: StoreControllerGetProductVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerGetProductVariants().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/products/{id}/variants`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * متغيرات المنتج
     */
    async storeControllerGetProductVariants(requestParameters: StoreControllerGetProductVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerGetProductVariantsRaw(requestParameters, initOverrides);
    }

    /**
     * جلب منتجات المتجر - الإدارة
     */
    async storeControllerGetProductsRaw(requestParameters: StoreControllerGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerGetProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/products`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب منتجات المتجر - الإدارة
     */
    async storeControllerGetProducts(requestParameters: StoreControllerGetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerGetProductsRaw(requestParameters, initOverrides);
    }

    /**
     * تحليلات المتجر - الإدارة
     */
    async storeControllerGetStoreAnalyticsRaw(requestParameters: StoreControllerGetStoreAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerGetStoreAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling storeControllerGetStoreAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling storeControllerGetStoreAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/analytics`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحليلات المتجر - الإدارة
     */
    async storeControllerGetStoreAnalytics(requestParameters: StoreControllerGetStoreAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerGetStoreAnalyticsRaw(requestParameters, initOverrides);
    }

    /**
     * جرد المتجر - الإدارة
     */
    async storeControllerGetStoreInventoryRaw(requestParameters: StoreControllerGetStoreInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerGetStoreInventory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/inventory`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جرد المتجر - الإدارة
     */
    async storeControllerGetStoreInventory(requestParameters: StoreControllerGetStoreInventoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerGetStoreInventoryRaw(requestParameters, initOverrides);
    }

    /**
     * رفض متجر
     */
    async storeControllerRejectStoreRaw(requestParameters: StoreControllerRejectStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerRejectStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض متجر
     */
    async storeControllerRejectStore(requestParameters: StoreControllerRejectStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerRejectStoreRaw(requestParameters, initOverrides);
    }

    /**
     * تعليق متجر
     */
    async storeControllerSuspendStoreRaw(requestParameters: StoreControllerSuspendStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerSuspendStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}/suspend`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعليق متجر
     */
    async storeControllerSuspendStore(requestParameters: StoreControllerSuspendStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerSuspendStoreRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث منتج
     */
    async storeControllerUpdateProductRaw(requestParameters: StoreControllerUpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerUpdateProduct().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/products/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث منتج
     */
    async storeControllerUpdateProduct(requestParameters: StoreControllerUpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerUpdateProductRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث متجر
     */
    async storeControllerUpdateStoreRaw(requestParameters: StoreControllerUpdateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling storeControllerUpdateStore().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stores/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث متجر
     */
    async storeControllerUpdateStore(requestParameters: StoreControllerUpdateStoreRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.storeControllerUpdateStoreRaw(requestParameters, initOverrides);
    }

}
