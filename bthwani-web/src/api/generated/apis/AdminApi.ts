/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminControllerCreateBackupRequest,
  AdminControllerCreateMarketerRequest,
  AdminControllerCreateRoleRequest,
  AdminControllerUpdateSettingsRequest,
} from '../models/index';
import {
    AdminControllerCreateBackupRequestFromJSON,
    AdminControllerCreateBackupRequestToJSON,
    AdminControllerCreateMarketerRequestFromJSON,
    AdminControllerCreateMarketerRequestToJSON,
    AdminControllerCreateRoleRequestFromJSON,
    AdminControllerCreateRoleRequestToJSON,
    AdminControllerUpdateSettingsRequestFromJSON,
    AdminControllerUpdateSettingsRequestToJSON,
} from '../models/index';

export interface AdminControllerActivateMarketerRequest {
    id: string;
}

export interface AdminControllerAdjustAttendanceRequest {
    id: string;
}

export interface AdminControllerAdjustDriverBalanceRequest {
    id: string;
}

export interface AdminControllerAdjustLeaveBalanceRequest {
    id: string;
}

export interface AdminControllerApproveDataDeletionRequest {
    id: string;
}

export interface AdminControllerApproveLeaveRequestRequest {
    id: string;
}

export interface AdminControllerApproveVendorRequest {
    id: string;
}

export interface AdminControllerApproveWithdrawalRequest {
    id: string;
}

export interface AdminControllerBanDriverRequest {
    id: string;
}

export interface AdminControllerBanUserRequest {
    id: string;
}

export interface AdminControllerCreateBackupOperationRequest {
    adminControllerCreateBackupRequest: AdminControllerCreateBackupRequest;
}

export interface AdminControllerCreateMarketerOperationRequest {
    adminControllerCreateMarketerRequest: AdminControllerCreateMarketerRequest;
}

export interface AdminControllerCreateRoleOperationRequest {
    adminControllerCreateRoleRequest: AdminControllerCreateRoleRequest;
}

export interface AdminControllerDeactivateMarketerRequest {
    id: string;
}

export interface AdminControllerDeleteDriverRequest {
    id: string;
}

export interface AdminControllerDeleteDriverAssetRequest {
    id: string;
}

export interface AdminControllerDeleteLeaveRequestRequest {
    id: string;
}

export interface AdminControllerDeleteShiftRequest {
    id: string;
}

export interface AdminControllerDownloadBackupRequest {
    id: string;
}

export interface AdminControllerExportReportRequest {
    type: string;
    format: string;
}

export interface AdminControllerGetAllDriversRequest {
    status: string;
    isAvailable: boolean;
    page: number;
    limit: number;
}

export interface AdminControllerGetAllMarketersRequest {
    status: string;
    page: number;
    limit: number;
}

export interface AdminControllerGetAttendanceSummaryRequest {
    date: string;
}

export interface AdminControllerGetAuditLogDetailsRequest {
    id: string;
}

export interface AdminControllerGetAuditLogsRequest {
    action: string;
    userId: string;
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetDailyReportRequest {
    date: string;
}

export interface AdminControllerGetDataDeletionRequestsRequest {
    status: string;
}

export interface AdminControllerGetDriverAttendanceRequest {
    id: string;
    month: number;
    year: number;
}

export interface AdminControllerGetDriverDetailsRequest {
    id: string;
}

export interface AdminControllerGetDriverFinancialsRequest {
    id: string;
}

export interface AdminControllerGetDriverLeaveBalanceRequest {
    id: string;
}

export interface AdminControllerGetDriverPerformanceRequest {
    id: string;
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetFailedPasswordAttemptsRequest {
    threshold: number;
}

export interface AdminControllerGetLeaveRequestsRequest {
    status: string;
    page: number;
    limit: number;
}

export interface AdminControllerGetMarketerDetailsRequest {
    id: string;
}

export interface AdminControllerGetMarketerPerformanceRequest {
    id: string;
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetMarketerStoresRequest {
    id: string;
}

export interface AdminControllerGetMarketersStatisticsRequest {
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetOrdersByCityRequest {
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetOrdersByStatusRequest {
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetQualityMetricsRequest {
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetRevenueAnalyticsRequest {
    period: string;
    startDate: string;
    endDate: string;
}

export interface AdminControllerGetUserDetailsRequest {
    id: string;
}

export interface AdminControllerGetUserOrdersHistoryRequest {
    id: string;
}

export interface AdminControllerGetUsersRequest {
    search: string;
    isActive: boolean;
    page: number;
    limit: number;
}

export interface AdminControllerGetWithdrawalsRequest {
    status: string;
    userModel: string;
    page: number;
    limit: number;
}

export interface AdminControllerListBackupsRequest {
    page: number;
    limit: number;
}

export interface AdminControllerRejectDataDeletionRequest {
    id: string;
}

export interface AdminControllerRejectLeaveRequestRequest {
    id: string;
}

export interface AdminControllerRejectVendorRequest {
    id: string;
}

export interface AdminControllerRejectWithdrawalRequest {
    id: string;
}

export interface AdminControllerResetUserPasswordRequest {
    userId: string;
}

export interface AdminControllerRestoreBackupRequest {
    id: string;
}

export interface AdminControllerSuspendVendorRequest {
    id: string;
}

export interface AdminControllerUnbanDriverRequest {
    id: string;
}

export interface AdminControllerUnbanUserRequest {
    id: string;
}

export interface AdminControllerUnlockAccountRequest {
    userId: string;
}

export interface AdminControllerUpdateFeatureFlagRequest {
    flag: string;
}

export interface AdminControllerUpdateMarketerRequest {
    id: string;
}

export interface AdminControllerUpdateRoleRequest {
    id: string;
}

export interface AdminControllerUpdateSettingsOperationRequest {
    adminControllerUpdateSettingsRequest: AdminControllerUpdateSettingsRequest;
}

/**
 * AdminApi - interface
 * 
 * @export
 * @interface AdminApiInterface
 */
export interface AdminApiInterface {
    /**
     * 
     * @summary تفعيل مسوق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerActivateMarketerRaw(requestParameters: AdminControllerActivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفعيل مسوق
     */
    adminControllerActivateMarketer(requestParameters: AdminControllerActivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعديل حضور السائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerAdjustAttendanceRaw(requestParameters: AdminControllerAdjustAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعديل حضور السائق
     */
    adminControllerAdjustAttendance(requestParameters: AdminControllerAdjustAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعديل رصيد السائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerAdjustDriverBalanceRaw(requestParameters: AdminControllerAdjustDriverBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعديل رصيد السائق
     */
    adminControllerAdjustDriverBalance(requestParameters: AdminControllerAdjustDriverBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعديل رصيد الإجازات
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerAdjustLeaveBalanceRaw(requestParameters: AdminControllerAdjustLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعديل رصيد الإجازات
     */
    adminControllerAdjustLeaveBalance(requestParameters: AdminControllerAdjustLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على حذف البيانات
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerApproveDataDeletionRaw(requestParameters: AdminControllerApproveDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على حذف البيانات
     */
    adminControllerApproveDataDeletion(requestParameters: AdminControllerApproveDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على طلب إجازة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerApproveLeaveRequestRaw(requestParameters: AdminControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على طلب إجازة
     */
    adminControllerApproveLeaveRequest(requestParameters: AdminControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على تاجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerApproveVendorRaw(requestParameters: AdminControllerApproveVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على تاجر
     */
    adminControllerApproveVendor(requestParameters: AdminControllerApproveVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الموافقة على طلب سحب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerApproveWithdrawalRaw(requestParameters: AdminControllerApproveWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الموافقة على طلب سحب
     */
    adminControllerApproveWithdrawal(requestParameters: AdminControllerApproveWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حظر سائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerBanDriverRaw(requestParameters: AdminControllerBanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حظر سائق
     */
    adminControllerBanDriver(requestParameters: AdminControllerBanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حظر مستخدم
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerBanUserRaw(requestParameters: AdminControllerBanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حظر مستخدم
     */
    adminControllerBanUser(requestParameters: AdminControllerBanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مسح الكاش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerClearCacheRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مسح الكاش
     */
    adminControllerClearCache(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء نسخة احتياطية
     * @param {AdminControllerCreateBackupRequest} adminControllerCreateBackupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerCreateBackupRaw(requestParameters: AdminControllerCreateBackupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء نسخة احتياطية
     */
    adminControllerCreateBackup(requestParameters: AdminControllerCreateBackupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إضافة مسوق جديد
     * @param {AdminControllerCreateMarketerRequest} adminControllerCreateMarketerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerCreateMarketerRaw(requestParameters: AdminControllerCreateMarketerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إضافة مسوق جديد
     */
    adminControllerCreateMarketer(requestParameters: AdminControllerCreateMarketerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء دور
     * @param {AdminControllerCreateRoleRequest} adminControllerCreateRoleRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerCreateRoleRaw(requestParameters: AdminControllerCreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء دور
     */
    adminControllerCreateRole(requestParameters: AdminControllerCreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعطيل مسوق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerDeactivateMarketerRaw(requestParameters: AdminControllerDeactivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعطيل مسوق
     */
    adminControllerDeactivateMarketer(requestParameters: AdminControllerDeactivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف سائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerDeleteDriverRaw(requestParameters: AdminControllerDeleteDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف سائق
     */
    adminControllerDeleteDriver(requestParameters: AdminControllerDeleteDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف أصل سائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerDeleteDriverAssetRaw(requestParameters: AdminControllerDeleteDriverAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف أصل سائق
     */
    adminControllerDeleteDriverAsset(requestParameters: AdminControllerDeleteDriverAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف طلب إجازة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerDeleteLeaveRequestRaw(requestParameters: AdminControllerDeleteLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف طلب إجازة
     */
    adminControllerDeleteLeaveRequest(requestParameters: AdminControllerDeleteLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف وردية
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerDeleteShiftRaw(requestParameters: AdminControllerDeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف وردية
     */
    adminControllerDeleteShift(requestParameters: AdminControllerDeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحميل نسخة احتياطية
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerDownloadBackupRaw(requestParameters: AdminControllerDownloadBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحميل نسخة احتياطية
     */
    adminControllerDownloadBackup(requestParameters: AdminControllerDownloadBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تصدير المسوقين
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerExportMarketersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تصدير المسوقين
     */
    adminControllerExportMarketers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تصدير تقارير
     * @param {string} type 
     * @param {string} format 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerExportReportRaw(requestParameters: AdminControllerExportReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تصدير تقارير
     */
    adminControllerExportReport(requestParameters: AdminControllerExportReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب كل السائقين
     * @param {string} status 
     * @param {boolean} isAvailable 
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetAllDriversRaw(requestParameters: AdminControllerGetAllDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب كل السائقين
     */
    adminControllerGetAllDrivers(requestParameters: AdminControllerGetAllDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب المسوقين الميدانيين
     * @param {string} status 
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetAllMarketersRaw(requestParameters: AdminControllerGetAllMarketersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب المسوقين الميدانيين
     */
    adminControllerGetAllMarketers(requestParameters: AdminControllerGetAllMarketersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ملخص الحضور لكل السائقين
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetAttendanceSummaryRaw(requestParameters: AdminControllerGetAttendanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ملخص الحضور لكل السائقين
     */
    adminControllerGetAttendanceSummary(requestParameters: AdminControllerGetAttendanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفاصيل سجل مراجعة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetAuditLogDetailsRaw(requestParameters: AdminControllerGetAuditLogDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفاصيل سجل مراجعة
     */
    adminControllerGetAuditLogDetails(requestParameters: AdminControllerGetAuditLogDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجلات المراجعة
     * @param {string} action 
     * @param {string} userId 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetAuditLogsRaw(requestParameters: AdminControllerGetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجلات المراجعة
     */
    adminControllerGetAuditLogs(requestParameters: AdminControllerGetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائيات الكاش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetCacheStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائيات الكاش
     */
    adminControllerGetCacheStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تقرير يومي
     * @param {string} date 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDailyReportRaw(requestParameters: AdminControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تقرير يومي
     */
    adminControllerGetDailyReport(requestParameters: AdminControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary لوحة التحكم - الإحصائيات العامة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDashboardRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * لوحة التحكم - الإحصائيات العامة
     */
    adminControllerGetDashboard(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلبات حذف البيانات
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDataDeletionRequestsRaw(requestParameters: AdminControllerGetDataDeletionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلبات حذف البيانات
     */
    adminControllerGetDataDeletionRequests(requestParameters: AdminControllerGetDataDeletionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائيات قاعدة البيانات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDatabaseStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائيات قاعدة البيانات
     */
    adminControllerGetDatabaseStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل حضور السائق
     * @param {string} id 
     * @param {number} month 
     * @param {number} year 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDriverAttendanceRaw(requestParameters: AdminControllerGetDriverAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل حضور السائق
     */
    adminControllerGetDriverAttendance(requestParameters: AdminControllerGetDriverAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفاصيل سائق محدد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDriverDetailsRaw(requestParameters: AdminControllerGetDriverDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفاصيل سائق محدد
     */
    adminControllerGetDriverDetails(requestParameters: AdminControllerGetDriverDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مالية السائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDriverFinancialsRaw(requestParameters: AdminControllerGetDriverFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مالية السائق
     */
    adminControllerGetDriverFinancials(requestParameters: AdminControllerGetDriverFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رصيد إجازات السائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDriverLeaveBalanceRaw(requestParameters: AdminControllerGetDriverLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رصيد إجازات السائق
     */
    adminControllerGetDriverLeaveBalance(requestParameters: AdminControllerGetDriverLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أداء السائق
     * @param {string} id 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDriverPerformanceRaw(requestParameters: AdminControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أداء السائق
     */
    adminControllerGetDriverPerformance(requestParameters: AdminControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary السائقين حسب الحالة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetDriversByStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * السائقين حسب الحالة
     */
    adminControllerGetDriversByStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary محاولات كلمات المرور الفاشلة
     * @param {number} threshold 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetFailedPasswordAttemptsRaw(requestParameters: AdminControllerGetFailedPasswordAttemptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * محاولات كلمات المرور الفاشلة
     */
    adminControllerGetFailedPasswordAttempts(requestParameters: AdminControllerGetFailedPasswordAttemptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أعلام الميزات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetFeatureFlagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أعلام الميزات
     */
    adminControllerGetFeatureFlags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الإحصائيات المالية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetFinancialStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الإحصائيات المالية
     */
    adminControllerGetFinancialStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلبات الإجازات
     * @param {string} status 
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetLeaveRequestsRaw(requestParameters: AdminControllerGetLeaveRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلبات الإجازات
     */
    adminControllerGetLeaveRequests(requestParameters: AdminControllerGetLeaveRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary المقاييس الحية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetLiveMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * المقاييس الحية
     */
    adminControllerGetLiveMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفاصيل مسوق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetMarketerDetailsRaw(requestParameters: AdminControllerGetMarketerDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفاصيل مسوق
     */
    adminControllerGetMarketerDetails(requestParameters: AdminControllerGetMarketerDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary أداء المسوق
     * @param {string} id 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetMarketerPerformanceRaw(requestParameters: AdminControllerGetMarketerPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * أداء المسوق
     */
    adminControllerGetMarketerPerformance(requestParameters: AdminControllerGetMarketerPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary متاجر المسوق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetMarketerStoresRaw(requestParameters: AdminControllerGetMarketerStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * متاجر المسوق
     */
    adminControllerGetMarketerStores(requestParameters: AdminControllerGetMarketerStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائيات المسوقين
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetMarketersStatisticsRaw(requestParameters: AdminControllerGetMarketersStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائيات المسوقين
     */
    adminControllerGetMarketersStatistics(requestParameters: AdminControllerGetMarketersStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الطلبات حسب المدينة
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetOrdersByCityRaw(requestParameters: AdminControllerGetOrdersByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الطلبات حسب المدينة
     */
    adminControllerGetOrdersByCity(requestParameters: AdminControllerGetOrdersByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الطلبات حسب طريقة الدفع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetOrdersByPaymentMethodRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الطلبات حسب طريقة الدفع
     */
    adminControllerGetOrdersByPaymentMethod(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الطلبات حسب الحالة
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetOrdersByStatusRaw(requestParameters: AdminControllerGetOrdersByStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الطلبات حسب الحالة
     */
    adminControllerGetOrdersByStatus(requestParameters: AdminControllerGetOrdersByStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التجار المعلقين
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetPendingVendorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التجار المعلقين
     */
    adminControllerGetPendingVendors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلبات السحب المعلقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetPendingWithdrawalsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلبات السحب المعلقة
     */
    adminControllerGetPendingWithdrawals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مقاييس الجودة
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetQualityMetricsRaw(requestParameters: AdminControllerGetQualityMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مقاييس الجودة
     */
    adminControllerGetQualityMetrics(requestParameters: AdminControllerGetQualityMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحليلات الإيرادات
     * @param {string} period 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetRevenueAnalyticsRaw(requestParameters: AdminControllerGetRevenueAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحليلات الإيرادات
     */
    adminControllerGetRevenueAnalytics(requestParameters: AdminControllerGetRevenueAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الأدوار
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الأدوار
     */
    adminControllerGetRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إعدادات النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إعدادات النظام
     */
    adminControllerGetSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary صحة النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetSystemHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * صحة النظام
     */
    adminControllerGetSystemHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مقاييس النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetSystemMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مقاييس النظام
     */
    adminControllerGetSystemMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائيات اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetTodayStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائيات اليوم
     */
    adminControllerGetTodayStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تفاصيل مستخدم
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetUserDetailsRaw(requestParameters: AdminControllerGetUserDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تفاصيل مستخدم
     */
    adminControllerGetUserDetails(requestParameters: AdminControllerGetUserDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل طلبات المستخدم
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetUserOrdersHistoryRaw(requestParameters: AdminControllerGetUserOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل طلبات المستخدم
     */
    adminControllerGetUserOrdersHistory(requestParameters: AdminControllerGetUserOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب المستخدمين
     * @param {string} search 
     * @param {boolean} isActive 
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetUsersRaw(requestParameters: AdminControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب المستخدمين
     */
    adminControllerGetUsers(requestParameters: AdminControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب طلبات السحب
     * @param {string} status 
     * @param {string} userModel 
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerGetWithdrawalsRaw(requestParameters: AdminControllerGetWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب طلبات السحب
     */
    adminControllerGetWithdrawals(requestParameters: AdminControllerGetWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary قائمة النسخ الاحتياطية
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerListBackupsRaw(requestParameters: AdminControllerListBackupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * قائمة النسخ الاحتياطية
     */
    adminControllerListBackups(requestParameters: AdminControllerListBackupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض حذف البيانات
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerRejectDataDeletionRaw(requestParameters: AdminControllerRejectDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض حذف البيانات
     */
    adminControllerRejectDataDeletion(requestParameters: AdminControllerRejectDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض طلب إجازة
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerRejectLeaveRequestRaw(requestParameters: AdminControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض طلب إجازة
     */
    adminControllerRejectLeaveRequest(requestParameters: AdminControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض تاجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerRejectVendorRaw(requestParameters: AdminControllerRejectVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض تاجر
     */
    adminControllerRejectVendor(requestParameters: AdminControllerRejectVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary رفض طلب سحب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerRejectWithdrawalRaw(requestParameters: AdminControllerRejectWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * رفض طلب سحب
     */
    adminControllerRejectWithdrawal(requestParameters: AdminControllerRejectWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إعادة تعيين كلمة مرور مستخدم
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerResetUserPasswordRaw(requestParameters: AdminControllerResetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إعادة تعيين كلمة مرور مستخدم
     */
    adminControllerResetUserPassword(requestParameters: AdminControllerResetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary استعادة نسخة احتياطية
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerRestoreBackupRaw(requestParameters: AdminControllerRestoreBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * استعادة نسخة احتياطية
     */
    adminControllerRestoreBackup(requestParameters: AdminControllerRestoreBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تعليق تاجر
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerSuspendVendorRaw(requestParameters: AdminControllerSuspendVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعليق تاجر
     */
    adminControllerSuspendVendor(requestParameters: AdminControllerSuspendVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء حظر سائق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUnbanDriverRaw(requestParameters: AdminControllerUnbanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء حظر سائق
     */
    adminControllerUnbanDriver(requestParameters: AdminControllerUnbanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء حظر مستخدم
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUnbanUserRaw(requestParameters: AdminControllerUnbanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء حظر مستخدم
     */
    adminControllerUnbanUser(requestParameters: AdminControllerUnbanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary فتح حساب مقفل
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUnlockAccountRaw(requestParameters: AdminControllerUnlockAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * فتح حساب مقفل
     */
    adminControllerUnlockAccount(requestParameters: AdminControllerUnlockAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث علم ميزة
     * @param {string} flag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUpdateFeatureFlagRaw(requestParameters: AdminControllerUpdateFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث علم ميزة
     */
    adminControllerUpdateFeatureFlag(requestParameters: AdminControllerUpdateFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث مسوق
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUpdateMarketerRaw(requestParameters: AdminControllerUpdateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث مسوق
     */
    adminControllerUpdateMarketer(requestParameters: AdminControllerUpdateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث دور
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUpdateRoleRaw(requestParameters: AdminControllerUpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث دور
     */
    adminControllerUpdateRole(requestParameters: AdminControllerUpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث الإعدادات
     * @param {AdminControllerUpdateSettingsRequest} adminControllerUpdateSettingsRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    adminControllerUpdateSettingsRaw(requestParameters: AdminControllerUpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث الإعدادات
     */
    adminControllerUpdateSettings(requestParameters: AdminControllerUpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI implements AdminApiInterface {

    /**
     * تفعيل مسوق
     */
    async adminControllerActivateMarketerRaw(requestParameters: AdminControllerActivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerActivateMarketer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/{id}/activate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفعيل مسوق
     */
    async adminControllerActivateMarketer(requestParameters: AdminControllerActivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerActivateMarketerRaw(requestParameters, initOverrides);
    }

    /**
     * تعديل حضور السائق
     */
    async adminControllerAdjustAttendanceRaw(requestParameters: AdminControllerAdjustAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerAdjustAttendance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/attendance/adjust`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعديل حضور السائق
     */
    async adminControllerAdjustAttendance(requestParameters: AdminControllerAdjustAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerAdjustAttendanceRaw(requestParameters, initOverrides);
    }

    /**
     * تعديل رصيد السائق
     */
    async adminControllerAdjustDriverBalanceRaw(requestParameters: AdminControllerAdjustDriverBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerAdjustDriverBalance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/adjust-balance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعديل رصيد السائق
     */
    async adminControllerAdjustDriverBalance(requestParameters: AdminControllerAdjustDriverBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerAdjustDriverBalanceRaw(requestParameters, initOverrides);
    }

    /**
     * تعديل رصيد الإجازات
     */
    async adminControllerAdjustLeaveBalanceRaw(requestParameters: AdminControllerAdjustLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerAdjustLeaveBalance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/leave-balance/adjust`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعديل رصيد الإجازات
     */
    async adminControllerAdjustLeaveBalance(requestParameters: AdminControllerAdjustLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerAdjustLeaveBalanceRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على حذف البيانات
     */
    async adminControllerApproveDataDeletionRaw(requestParameters: AdminControllerApproveDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerApproveDataDeletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/data-deletion/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على حذف البيانات
     */
    async adminControllerApproveDataDeletion(requestParameters: AdminControllerApproveDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerApproveDataDeletionRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على طلب إجازة
     */
    async adminControllerApproveLeaveRequestRaw(requestParameters: AdminControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerApproveLeaveRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/leave-requests/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على طلب إجازة
     */
    async adminControllerApproveLeaveRequest(requestParameters: AdminControllerApproveLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerApproveLeaveRequestRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على تاجر
     */
    async adminControllerApproveVendorRaw(requestParameters: AdminControllerApproveVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerApproveVendor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/vendors/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على تاجر
     */
    async adminControllerApproveVendor(requestParameters: AdminControllerApproveVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerApproveVendorRaw(requestParameters, initOverrides);
    }

    /**
     * الموافقة على طلب سحب
     */
    async adminControllerApproveWithdrawalRaw(requestParameters: AdminControllerApproveWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerApproveWithdrawal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/withdrawals/{id}/approve`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الموافقة على طلب سحب
     */
    async adminControllerApproveWithdrawal(requestParameters: AdminControllerApproveWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerApproveWithdrawalRaw(requestParameters, initOverrides);
    }

    /**
     * حظر سائق
     */
    async adminControllerBanDriverRaw(requestParameters: AdminControllerBanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerBanDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/ban`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حظر سائق
     */
    async adminControllerBanDriver(requestParameters: AdminControllerBanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerBanDriverRaw(requestParameters, initOverrides);
    }

    /**
     * حظر مستخدم
     */
    async adminControllerBanUserRaw(requestParameters: AdminControllerBanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerBanUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/users/{id}/ban`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حظر مستخدم
     */
    async adminControllerBanUser(requestParameters: AdminControllerBanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerBanUserRaw(requestParameters, initOverrides);
    }

    /**
     * مسح الكاش
     */
    async adminControllerClearCacheRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/cache/clear`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مسح الكاش
     */
    async adminControllerClearCache(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerClearCacheRaw(initOverrides);
    }

    /**
     * إنشاء نسخة احتياطية
     */
    async adminControllerCreateBackupRaw(requestParameters: AdminControllerCreateBackupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminControllerCreateBackupRequest'] == null) {
            throw new runtime.RequiredError(
                'adminControllerCreateBackupRequest',
                'Required parameter "adminControllerCreateBackupRequest" was null or undefined when calling adminControllerCreateBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/backup/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminControllerCreateBackupRequestToJSON(requestParameters['adminControllerCreateBackupRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء نسخة احتياطية
     */
    async adminControllerCreateBackup(requestParameters: AdminControllerCreateBackupOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerCreateBackupRaw(requestParameters, initOverrides);
    }

    /**
     * إضافة مسوق جديد
     */
    async adminControllerCreateMarketerRaw(requestParameters: AdminControllerCreateMarketerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminControllerCreateMarketerRequest'] == null) {
            throw new runtime.RequiredError(
                'adminControllerCreateMarketerRequest',
                'Required parameter "adminControllerCreateMarketerRequest" was null or undefined when calling adminControllerCreateMarketer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminControllerCreateMarketerRequestToJSON(requestParameters['adminControllerCreateMarketerRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إضافة مسوق جديد
     */
    async adminControllerCreateMarketer(requestParameters: AdminControllerCreateMarketerOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerCreateMarketerRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء دور
     */
    async adminControllerCreateRoleRaw(requestParameters: AdminControllerCreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminControllerCreateRoleRequest'] == null) {
            throw new runtime.RequiredError(
                'adminControllerCreateRoleRequest',
                'Required parameter "adminControllerCreateRoleRequest" was null or undefined when calling adminControllerCreateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminControllerCreateRoleRequestToJSON(requestParameters['adminControllerCreateRoleRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء دور
     */
    async adminControllerCreateRole(requestParameters: AdminControllerCreateRoleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerCreateRoleRaw(requestParameters, initOverrides);
    }

    /**
     * تعطيل مسوق
     */
    async adminControllerDeactivateMarketerRaw(requestParameters: AdminControllerDeactivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerDeactivateMarketer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/{id}/deactivate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعطيل مسوق
     */
    async adminControllerDeactivateMarketer(requestParameters: AdminControllerDeactivateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerDeactivateMarketerRaw(requestParameters, initOverrides);
    }

    /**
     * حذف سائق
     */
    async adminControllerDeleteDriverRaw(requestParameters: AdminControllerDeleteDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerDeleteDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف سائق
     */
    async adminControllerDeleteDriver(requestParameters: AdminControllerDeleteDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerDeleteDriverRaw(requestParameters, initOverrides);
    }

    /**
     * حذف أصل سائق
     */
    async adminControllerDeleteDriverAssetRaw(requestParameters: AdminControllerDeleteDriverAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerDeleteDriverAsset().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/assets/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف أصل سائق
     */
    async adminControllerDeleteDriverAsset(requestParameters: AdminControllerDeleteDriverAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerDeleteDriverAssetRaw(requestParameters, initOverrides);
    }

    /**
     * حذف طلب إجازة
     */
    async adminControllerDeleteLeaveRequestRaw(requestParameters: AdminControllerDeleteLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerDeleteLeaveRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/leave-requests/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف طلب إجازة
     */
    async adminControllerDeleteLeaveRequest(requestParameters: AdminControllerDeleteLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerDeleteLeaveRequestRaw(requestParameters, initOverrides);
    }

    /**
     * حذف وردية
     */
    async adminControllerDeleteShiftRaw(requestParameters: AdminControllerDeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerDeleteShift().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/shifts/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف وردية
     */
    async adminControllerDeleteShift(requestParameters: AdminControllerDeleteShiftRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerDeleteShiftRaw(requestParameters, initOverrides);
    }

    /**
     * تحميل نسخة احتياطية
     */
    async adminControllerDownloadBackupRaw(requestParameters: AdminControllerDownloadBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerDownloadBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/backup/{id}/download`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحميل نسخة احتياطية
     */
    async adminControllerDownloadBackup(requestParameters: AdminControllerDownloadBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerDownloadBackupRaw(requestParameters, initOverrides);
    }

    /**
     * تصدير المسوقين
     */
    async adminControllerExportMarketersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تصدير المسوقين
     */
    async adminControllerExportMarketers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerExportMarketersRaw(initOverrides);
    }

    /**
     * تصدير تقارير
     */
    async adminControllerExportReportRaw(requestParameters: AdminControllerExportReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling adminControllerExportReport().'
            );
        }

        if (requestParameters['format'] == null) {
            throw new runtime.RequiredError(
                'format',
                'Required parameter "format" was null or undefined when calling adminControllerExportReport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/reports/export/{type}/{format}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"format"}}`, encodeURIComponent(String(requestParameters['format'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تصدير تقارير
     */
    async adminControllerExportReport(requestParameters: AdminControllerExportReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerExportReportRaw(requestParameters, initOverrides);
    }

    /**
     * جلب كل السائقين
     */
    async adminControllerGetAllDriversRaw(requestParameters: AdminControllerGetAllDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling adminControllerGetAllDrivers().'
            );
        }

        if (requestParameters['isAvailable'] == null) {
            throw new runtime.RequiredError(
                'isAvailable',
                'Required parameter "isAvailable" was null or undefined when calling adminControllerGetAllDrivers().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling adminControllerGetAllDrivers().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling adminControllerGetAllDrivers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['isAvailable'] != null) {
            queryParameters['isAvailable'] = requestParameters['isAvailable'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب كل السائقين
     */
    async adminControllerGetAllDrivers(requestParameters: AdminControllerGetAllDriversRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetAllDriversRaw(requestParameters, initOverrides);
    }

    /**
     * جلب المسوقين الميدانيين
     */
    async adminControllerGetAllMarketersRaw(requestParameters: AdminControllerGetAllMarketersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling adminControllerGetAllMarketers().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling adminControllerGetAllMarketers().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling adminControllerGetAllMarketers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب المسوقين الميدانيين
     */
    async adminControllerGetAllMarketers(requestParameters: AdminControllerGetAllMarketersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetAllMarketersRaw(requestParameters, initOverrides);
    }

    /**
     * ملخص الحضور لكل السائقين
     */
    async adminControllerGetAttendanceSummaryRaw(requestParameters: AdminControllerGetAttendanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling adminControllerGetAttendanceSummary().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/attendance/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ملخص الحضور لكل السائقين
     */
    async adminControllerGetAttendanceSummary(requestParameters: AdminControllerGetAttendanceSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetAttendanceSummaryRaw(requestParameters, initOverrides);
    }

    /**
     * تفاصيل سجل مراجعة
     */
    async adminControllerGetAuditLogDetailsRaw(requestParameters: AdminControllerGetAuditLogDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetAuditLogDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/audit-logs/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفاصيل سجل مراجعة
     */
    async adminControllerGetAuditLogDetails(requestParameters: AdminControllerGetAuditLogDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetAuditLogDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * سجلات المراجعة
     */
    async adminControllerGetAuditLogsRaw(requestParameters: AdminControllerGetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['action'] == null) {
            throw new runtime.RequiredError(
                'action',
                'Required parameter "action" was null or undefined when calling adminControllerGetAuditLogs().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminControllerGetAuditLogs().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetAuditLogs().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetAuditLogs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/audit-logs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجلات المراجعة
     */
    async adminControllerGetAuditLogs(requestParameters: AdminControllerGetAuditLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetAuditLogsRaw(requestParameters, initOverrides);
    }

    /**
     * إحصائيات الكاش
     */
    async adminControllerGetCacheStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/cache/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائيات الكاش
     */
    async adminControllerGetCacheStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetCacheStatsRaw(initOverrides);
    }

    /**
     * تقرير يومي
     */
    async adminControllerGetDailyReportRaw(requestParameters: AdminControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling adminControllerGetDailyReport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/reports/daily`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تقرير يومي
     */
    async adminControllerGetDailyReport(requestParameters: AdminControllerGetDailyReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDailyReportRaw(requestParameters, initOverrides);
    }

    /**
     * لوحة التحكم - الإحصائيات العامة
     */
    async adminControllerGetDashboardRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/dashboard`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * لوحة التحكم - الإحصائيات العامة
     */
    async adminControllerGetDashboard(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDashboardRaw(initOverrides);
    }

    /**
     * طلبات حذف البيانات
     */
    async adminControllerGetDataDeletionRequestsRaw(requestParameters: AdminControllerGetDataDeletionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling adminControllerGetDataDeletionRequests().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/data-deletion/requests`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلبات حذف البيانات
     */
    async adminControllerGetDataDeletionRequests(requestParameters: AdminControllerGetDataDeletionRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDataDeletionRequestsRaw(requestParameters, initOverrides);
    }

    /**
     * إحصائيات قاعدة البيانات
     */
    async adminControllerGetDatabaseStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/database/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائيات قاعدة البيانات
     */
    async adminControllerGetDatabaseStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDatabaseStatsRaw(initOverrides);
    }

    /**
     * سجل حضور السائق
     */
    async adminControllerGetDriverAttendanceRaw(requestParameters: AdminControllerGetDriverAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetDriverAttendance().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling adminControllerGetDriverAttendance().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling adminControllerGetDriverAttendance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/attendance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل حضور السائق
     */
    async adminControllerGetDriverAttendance(requestParameters: AdminControllerGetDriverAttendanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDriverAttendanceRaw(requestParameters, initOverrides);
    }

    /**
     * تفاصيل سائق محدد
     */
    async adminControllerGetDriverDetailsRaw(requestParameters: AdminControllerGetDriverDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetDriverDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفاصيل سائق محدد
     */
    async adminControllerGetDriverDetails(requestParameters: AdminControllerGetDriverDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDriverDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * مالية السائق
     */
    async adminControllerGetDriverFinancialsRaw(requestParameters: AdminControllerGetDriverFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetDriverFinancials().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/financials`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مالية السائق
     */
    async adminControllerGetDriverFinancials(requestParameters: AdminControllerGetDriverFinancialsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDriverFinancialsRaw(requestParameters, initOverrides);
    }

    /**
     * رصيد إجازات السائق
     */
    async adminControllerGetDriverLeaveBalanceRaw(requestParameters: AdminControllerGetDriverLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetDriverLeaveBalance().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/leave-balance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رصيد إجازات السائق
     */
    async adminControllerGetDriverLeaveBalance(requestParameters: AdminControllerGetDriverLeaveBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDriverLeaveBalanceRaw(requestParameters, initOverrides);
    }

    /**
     * أداء السائق
     */
    async adminControllerGetDriverPerformanceRaw(requestParameters: AdminControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetDriverPerformance().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetDriverPerformance().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetDriverPerformance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/performance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أداء السائق
     */
    async adminControllerGetDriverPerformance(requestParameters: AdminControllerGetDriverPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDriverPerformanceRaw(requestParameters, initOverrides);
    }

    /**
     * السائقين حسب الحالة
     */
    async adminControllerGetDriversByStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/stats/by-status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * السائقين حسب الحالة
     */
    async adminControllerGetDriversByStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetDriversByStatusRaw(initOverrides);
    }

    /**
     * محاولات كلمات المرور الفاشلة
     */
    async adminControllerGetFailedPasswordAttemptsRaw(requestParameters: AdminControllerGetFailedPasswordAttemptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['threshold'] == null) {
            throw new runtime.RequiredError(
                'threshold',
                'Required parameter "threshold" was null or undefined when calling adminControllerGetFailedPasswordAttempts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['threshold'] != null) {
            queryParameters['threshold'] = requestParameters['threshold'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/security/password-attempts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * محاولات كلمات المرور الفاشلة
     */
    async adminControllerGetFailedPasswordAttempts(requestParameters: AdminControllerGetFailedPasswordAttemptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetFailedPasswordAttemptsRaw(requestParameters, initOverrides);
    }

    /**
     * أعلام الميزات
     */
    async adminControllerGetFeatureFlagsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/settings/feature-flags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أعلام الميزات
     */
    async adminControllerGetFeatureFlags(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetFeatureFlagsRaw(initOverrides);
    }

    /**
     * الإحصائيات المالية
     */
    async adminControllerGetFinancialStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stats/financial`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الإحصائيات المالية
     */
    async adminControllerGetFinancialStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetFinancialStatsRaw(initOverrides);
    }

    /**
     * طلبات الإجازات
     */
    async adminControllerGetLeaveRequestsRaw(requestParameters: AdminControllerGetLeaveRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling adminControllerGetLeaveRequests().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling adminControllerGetLeaveRequests().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling adminControllerGetLeaveRequests().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/leave-requests`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلبات الإجازات
     */
    async adminControllerGetLeaveRequests(requestParameters: AdminControllerGetLeaveRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetLeaveRequestsRaw(requestParameters, initOverrides);
    }

    /**
     * المقاييس الحية
     */
    async adminControllerGetLiveMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/dashboard/live-metrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * المقاييس الحية
     */
    async adminControllerGetLiveMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetLiveMetricsRaw(initOverrides);
    }

    /**
     * تفاصيل مسوق
     */
    async adminControllerGetMarketerDetailsRaw(requestParameters: AdminControllerGetMarketerDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetMarketerDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفاصيل مسوق
     */
    async adminControllerGetMarketerDetails(requestParameters: AdminControllerGetMarketerDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetMarketerDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * أداء المسوق
     */
    async adminControllerGetMarketerPerformanceRaw(requestParameters: AdminControllerGetMarketerPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetMarketerPerformance().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetMarketerPerformance().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetMarketerPerformance().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/{id}/performance`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * أداء المسوق
     */
    async adminControllerGetMarketerPerformance(requestParameters: AdminControllerGetMarketerPerformanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetMarketerPerformanceRaw(requestParameters, initOverrides);
    }

    /**
     * متاجر المسوق
     */
    async adminControllerGetMarketerStoresRaw(requestParameters: AdminControllerGetMarketerStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetMarketerStores().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/{id}/stores`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * متاجر المسوق
     */
    async adminControllerGetMarketerStores(requestParameters: AdminControllerGetMarketerStoresRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetMarketerStoresRaw(requestParameters, initOverrides);
    }

    /**
     * إحصائيات المسوقين
     */
    async adminControllerGetMarketersStatisticsRaw(requestParameters: AdminControllerGetMarketersStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetMarketersStatistics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetMarketersStatistics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/statistics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائيات المسوقين
     */
    async adminControllerGetMarketersStatistics(requestParameters: AdminControllerGetMarketersStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetMarketersStatisticsRaw(requestParameters, initOverrides);
    }

    /**
     * الطلبات حسب المدينة
     */
    async adminControllerGetOrdersByCityRaw(requestParameters: AdminControllerGetOrdersByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetOrdersByCity().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetOrdersByCity().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/orders/stats/by-city`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الطلبات حسب المدينة
     */
    async adminControllerGetOrdersByCity(requestParameters: AdminControllerGetOrdersByCityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetOrdersByCityRaw(requestParameters, initOverrides);
    }

    /**
     * الطلبات حسب طريقة الدفع
     */
    async adminControllerGetOrdersByPaymentMethodRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/orders/stats/by-payment-method`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الطلبات حسب طريقة الدفع
     */
    async adminControllerGetOrdersByPaymentMethod(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetOrdersByPaymentMethodRaw(initOverrides);
    }

    /**
     * الطلبات حسب الحالة
     */
    async adminControllerGetOrdersByStatusRaw(requestParameters: AdminControllerGetOrdersByStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetOrdersByStatus().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetOrdersByStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/dashboard/orders-by-status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الطلبات حسب الحالة
     */
    async adminControllerGetOrdersByStatus(requestParameters: AdminControllerGetOrdersByStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetOrdersByStatusRaw(requestParameters, initOverrides);
    }

    /**
     * التجار المعلقين
     */
    async adminControllerGetPendingVendorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/vendors/pending`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التجار المعلقين
     */
    async adminControllerGetPendingVendors(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetPendingVendorsRaw(initOverrides);
    }

    /**
     * طلبات السحب المعلقة
     */
    async adminControllerGetPendingWithdrawalsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/withdrawals/pending`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلبات السحب المعلقة
     */
    async adminControllerGetPendingWithdrawals(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetPendingWithdrawalsRaw(initOverrides);
    }

    /**
     * مقاييس الجودة
     */
    async adminControllerGetQualityMetricsRaw(requestParameters: AdminControllerGetQualityMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetQualityMetrics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetQualityMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/quality/metrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مقاييس الجودة
     */
    async adminControllerGetQualityMetrics(requestParameters: AdminControllerGetQualityMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetQualityMetricsRaw(requestParameters, initOverrides);
    }

    /**
     * تحليلات الإيرادات
     */
    async adminControllerGetRevenueAnalyticsRaw(requestParameters: AdminControllerGetRevenueAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['period'] == null) {
            throw new runtime.RequiredError(
                'period',
                'Required parameter "period" was null or undefined when calling adminControllerGetRevenueAnalytics().'
            );
        }

        if (requestParameters['startDate'] == null) {
            throw new runtime.RequiredError(
                'startDate',
                'Required parameter "startDate" was null or undefined when calling adminControllerGetRevenueAnalytics().'
            );
        }

        if (requestParameters['endDate'] == null) {
            throw new runtime.RequiredError(
                'endDate',
                'Required parameter "endDate" was null or undefined when calling adminControllerGetRevenueAnalytics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/dashboard/revenue`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحليلات الإيرادات
     */
    async adminControllerGetRevenueAnalytics(requestParameters: AdminControllerGetRevenueAnalyticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetRevenueAnalyticsRaw(requestParameters, initOverrides);
    }

    /**
     * الأدوار
     */
    async adminControllerGetRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الأدوار
     */
    async adminControllerGetRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetRolesRaw(initOverrides);
    }

    /**
     * إعدادات النظام
     */
    async adminControllerGetSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إعدادات النظام
     */
    async adminControllerGetSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetSettingsRaw(initOverrides);
    }

    /**
     * صحة النظام
     */
    async adminControllerGetSystemHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/system/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * صحة النظام
     */
    async adminControllerGetSystemHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetSystemHealthRaw(initOverrides);
    }

    /**
     * مقاييس النظام
     */
    async adminControllerGetSystemMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/system/metrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مقاييس النظام
     */
    async adminControllerGetSystemMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetSystemMetricsRaw(initOverrides);
    }

    /**
     * إحصائيات اليوم
     */
    async adminControllerGetTodayStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/stats/today`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائيات اليوم
     */
    async adminControllerGetTodayStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetTodayStatsRaw(initOverrides);
    }

    /**
     * تفاصيل مستخدم
     */
    async adminControllerGetUserDetailsRaw(requestParameters: AdminControllerGetUserDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetUserDetails().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/users/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تفاصيل مستخدم
     */
    async adminControllerGetUserDetails(requestParameters: AdminControllerGetUserDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetUserDetailsRaw(requestParameters, initOverrides);
    }

    /**
     * سجل طلبات المستخدم
     */
    async adminControllerGetUserOrdersHistoryRaw(requestParameters: AdminControllerGetUserOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerGetUserOrdersHistory().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/users/{id}/orders-history`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل طلبات المستخدم
     */
    async adminControllerGetUserOrdersHistory(requestParameters: AdminControllerGetUserOrdersHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetUserOrdersHistoryRaw(requestParameters, initOverrides);
    }

    /**
     * جلب المستخدمين
     */
    async adminControllerGetUsersRaw(requestParameters: AdminControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['search'] == null) {
            throw new runtime.RequiredError(
                'search',
                'Required parameter "search" was null or undefined when calling adminControllerGetUsers().'
            );
        }

        if (requestParameters['isActive'] == null) {
            throw new runtime.RequiredError(
                'isActive',
                'Required parameter "isActive" was null or undefined when calling adminControllerGetUsers().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling adminControllerGetUsers().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling adminControllerGetUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['isActive'] = requestParameters['isActive'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب المستخدمين
     */
    async adminControllerGetUsers(requestParameters: AdminControllerGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetUsersRaw(requestParameters, initOverrides);
    }

    /**
     * جلب طلبات السحب
     */
    async adminControllerGetWithdrawalsRaw(requestParameters: AdminControllerGetWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling adminControllerGetWithdrawals().'
            );
        }

        if (requestParameters['userModel'] == null) {
            throw new runtime.RequiredError(
                'userModel',
                'Required parameter "userModel" was null or undefined when calling adminControllerGetWithdrawals().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling adminControllerGetWithdrawals().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling adminControllerGetWithdrawals().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['userModel'] != null) {
            queryParameters['userModel'] = requestParameters['userModel'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/withdrawals`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب طلبات السحب
     */
    async adminControllerGetWithdrawals(requestParameters: AdminControllerGetWithdrawalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerGetWithdrawalsRaw(requestParameters, initOverrides);
    }

    /**
     * قائمة النسخ الاحتياطية
     */
    async adminControllerListBackupsRaw(requestParameters: AdminControllerListBackupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling adminControllerListBackups().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling adminControllerListBackups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/backup/list`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * قائمة النسخ الاحتياطية
     */
    async adminControllerListBackups(requestParameters: AdminControllerListBackupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerListBackupsRaw(requestParameters, initOverrides);
    }

    /**
     * رفض حذف البيانات
     */
    async adminControllerRejectDataDeletionRaw(requestParameters: AdminControllerRejectDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerRejectDataDeletion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/data-deletion/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض حذف البيانات
     */
    async adminControllerRejectDataDeletion(requestParameters: AdminControllerRejectDataDeletionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerRejectDataDeletionRaw(requestParameters, initOverrides);
    }

    /**
     * رفض طلب إجازة
     */
    async adminControllerRejectLeaveRequestRaw(requestParameters: AdminControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerRejectLeaveRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/leave-requests/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض طلب إجازة
     */
    async adminControllerRejectLeaveRequest(requestParameters: AdminControllerRejectLeaveRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerRejectLeaveRequestRaw(requestParameters, initOverrides);
    }

    /**
     * رفض تاجر
     */
    async adminControllerRejectVendorRaw(requestParameters: AdminControllerRejectVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerRejectVendor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/vendors/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض تاجر
     */
    async adminControllerRejectVendor(requestParameters: AdminControllerRejectVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerRejectVendorRaw(requestParameters, initOverrides);
    }

    /**
     * رفض طلب سحب
     */
    async adminControllerRejectWithdrawalRaw(requestParameters: AdminControllerRejectWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerRejectWithdrawal().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/withdrawals/{id}/reject`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * رفض طلب سحب
     */
    async adminControllerRejectWithdrawal(requestParameters: AdminControllerRejectWithdrawalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerRejectWithdrawalRaw(requestParameters, initOverrides);
    }

    /**
     * إعادة تعيين كلمة مرور مستخدم
     */
    async adminControllerResetUserPasswordRaw(requestParameters: AdminControllerResetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminControllerResetUserPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/security/reset-password/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إعادة تعيين كلمة مرور مستخدم
     */
    async adminControllerResetUserPassword(requestParameters: AdminControllerResetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerResetUserPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * استعادة نسخة احتياطية
     */
    async adminControllerRestoreBackupRaw(requestParameters: AdminControllerRestoreBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerRestoreBackup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/backup/{id}/restore`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * استعادة نسخة احتياطية
     */
    async adminControllerRestoreBackup(requestParameters: AdminControllerRestoreBackupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerRestoreBackupRaw(requestParameters, initOverrides);
    }

    /**
     * تعليق تاجر
     */
    async adminControllerSuspendVendorRaw(requestParameters: AdminControllerSuspendVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerSuspendVendor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/vendors/{id}/suspend`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعليق تاجر
     */
    async adminControllerSuspendVendor(requestParameters: AdminControllerSuspendVendorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerSuspendVendorRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء حظر سائق
     */
    async adminControllerUnbanDriverRaw(requestParameters: AdminControllerUnbanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerUnbanDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/drivers/{id}/unban`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء حظر سائق
     */
    async adminControllerUnbanDriver(requestParameters: AdminControllerUnbanDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUnbanDriverRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء حظر مستخدم
     */
    async adminControllerUnbanUserRaw(requestParameters: AdminControllerUnbanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerUnbanUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/users/{id}/unban`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء حظر مستخدم
     */
    async adminControllerUnbanUser(requestParameters: AdminControllerUnbanUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUnbanUserRaw(requestParameters, initOverrides);
    }

    /**
     * فتح حساب مقفل
     */
    async adminControllerUnlockAccountRaw(requestParameters: AdminControllerUnlockAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling adminControllerUnlockAccount().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/security/unlock-account/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * فتح حساب مقفل
     */
    async adminControllerUnlockAccount(requestParameters: AdminControllerUnlockAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUnlockAccountRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث علم ميزة
     */
    async adminControllerUpdateFeatureFlagRaw(requestParameters: AdminControllerUpdateFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['flag'] == null) {
            throw new runtime.RequiredError(
                'flag',
                'Required parameter "flag" was null or undefined when calling adminControllerUpdateFeatureFlag().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/settings/feature-flags/{flag}`;
        urlPath = urlPath.replace(`{${"flag"}}`, encodeURIComponent(String(requestParameters['flag'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث علم ميزة
     */
    async adminControllerUpdateFeatureFlag(requestParameters: AdminControllerUpdateFeatureFlagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUpdateFeatureFlagRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث مسوق
     */
    async adminControllerUpdateMarketerRaw(requestParameters: AdminControllerUpdateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerUpdateMarketer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/marketers/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث مسوق
     */
    async adminControllerUpdateMarketer(requestParameters: AdminControllerUpdateMarketerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUpdateMarketerRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث دور
     */
    async adminControllerUpdateRoleRaw(requestParameters: AdminControllerUpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminControllerUpdateRole().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/roles/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث دور
     */
    async adminControllerUpdateRole(requestParameters: AdminControllerUpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUpdateRoleRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث الإعدادات
     */
    async adminControllerUpdateSettingsRaw(requestParameters: AdminControllerUpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['adminControllerUpdateSettingsRequest'] == null) {
            throw new runtime.RequiredError(
                'adminControllerUpdateSettingsRequest',
                'Required parameter "adminControllerUpdateSettingsRequest" was null or undefined when calling adminControllerUpdateSettings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/settings`;

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AdminControllerUpdateSettingsRequestToJSON(requestParameters['adminControllerUpdateSettingsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث الإعدادات
     */
    async adminControllerUpdateSettings(requestParameters: AdminControllerUpdateSettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerUpdateSettingsRaw(requestParameters, initOverrides);
    }

}
