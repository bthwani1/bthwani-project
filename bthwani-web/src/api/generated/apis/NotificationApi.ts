/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateNotificationDto,
  CreateSuppressionDto,
  NotificationControllerSendBulkNotificationRequest,
} from '../models/index';
import {
    CreateNotificationDtoFromJSON,
    CreateNotificationDtoToJSON,
    CreateSuppressionDtoFromJSON,
    CreateSuppressionDtoToJSON,
    NotificationControllerSendBulkNotificationRequestFromJSON,
    NotificationControllerSendBulkNotificationRequestToJSON,
} from '../models/index';

export interface NotificationControllerCreateRequest {
    createNotificationDto: CreateNotificationDto;
}

export interface NotificationControllerCreateSuppressionRequest {
    createSuppressionDto: CreateSuppressionDto;
}

export interface NotificationControllerDeleteRequest {
    id: string;
}

export interface NotificationControllerGetMyNotificationsRequest {
    cursor?: string;
    limit?: number;
}

export interface NotificationControllerMarkAsReadRequest {
    id: string;
}

export interface NotificationControllerRemoveChannelSuppressionRequest {
    channel: NotificationControllerRemoveChannelSuppressionChannelEnum;
}

export interface NotificationControllerRemoveSuppressionRequest {
    id: string;
}

export interface NotificationControllerSendBulkNotificationOperationRequest {
    notificationControllerSendBulkNotificationRequest: NotificationControllerSendBulkNotificationRequest;
}

/**
 * NotificationApi - interface
 * 
 * @export
 * @interface NotificationApiInterface
 */
export interface NotificationApiInterface {
    /**
     * 
     * @summary إنشاء إشعار (للإدارة)
     * @param {CreateNotificationDto} createNotificationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerCreateRaw(requestParameters: NotificationControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء إشعار (للإدارة)
     */
    notificationControllerCreate(requestParameters: NotificationControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حظر قنوات إشعارات محددة
     * @param {CreateSuppressionDto} createSuppressionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerCreateSuppressionRaw(requestParameters: NotificationControllerCreateSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حظر قنوات إشعارات محددة
     */
    notificationControllerCreateSuppression(requestParameters: NotificationControllerCreateSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حذف إشعار
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerDeleteRaw(requestParameters: NotificationControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حذف إشعار
     */
    notificationControllerDelete(requestParameters: NotificationControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب إشعارات المستخدم
     * @param {string} [cursor] Cursor للصفحة التالية
     * @param {number} [limit] عدد العناصر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerGetMyNotificationsRaw(requestParameters: NotificationControllerGetMyNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب إشعارات المستخدم
     */
    notificationControllerGetMyNotifications(requestParameters: NotificationControllerGetMyNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب القنوات المحظورة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerGetSuppressedChannelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب القنوات المحظورة
     */
    notificationControllerGetSuppressedChannels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إحصائيات الحظر (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerGetSuppressionStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إحصائيات الحظر (للإدارة)
     */
    notificationControllerGetSuppressionStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary عدد الإشعارات غير المقروءة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerGetUnreadCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * عدد الإشعارات غير المقروءة
     */
    notificationControllerGetUnreadCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary جلب قائمة الحظر للمستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerGetUserSuppressionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * جلب قائمة الحظر للمستخدم
     */
    notificationControllerGetUserSuppressions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديد جميع الإشعارات كمقروءة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerMarkAllAsReadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديد جميع الإشعارات كمقروءة
     */
    notificationControllerMarkAllAsRead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديد الإشعار كمقروء
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerMarkAsReadRaw(requestParameters: NotificationControllerMarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديد الإشعار كمقروء
     */
    notificationControllerMarkAsRead(requestParameters: NotificationControllerMarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء حظر قناة محددة
     * @param {'push' | 'email' | 'sms'} channel 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerRemoveChannelSuppressionRaw(requestParameters: NotificationControllerRemoveChannelSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء حظر قناة محددة
     */
    notificationControllerRemoveChannelSuppression(requestParameters: NotificationControllerRemoveChannelSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء حظر
     * @param {string} id معرف الحظر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerRemoveSuppressionRaw(requestParameters: NotificationControllerRemoveSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء حظر
     */
    notificationControllerRemoveSuppression(requestParameters: NotificationControllerRemoveSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إرسال إشعار جماعي (Admin)
     * @param {NotificationControllerSendBulkNotificationRequest} notificationControllerSendBulkNotificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApiInterface
     */
    notificationControllerSendBulkNotificationRaw(requestParameters: NotificationControllerSendBulkNotificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إرسال إشعار جماعي (Admin)
     */
    notificationControllerSendBulkNotification(requestParameters: NotificationControllerSendBulkNotificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class NotificationApi extends runtime.BaseAPI implements NotificationApiInterface {

    /**
     * إنشاء إشعار (للإدارة)
     */
    async notificationControllerCreateRaw(requestParameters: NotificationControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createNotificationDto'] == null) {
            throw new runtime.RequiredError(
                'createNotificationDto',
                'Required parameter "createNotificationDto" was null or undefined when calling notificationControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNotificationDtoToJSON(requestParameters['createNotificationDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء إشعار (للإدارة)
     */
    async notificationControllerCreate(requestParameters: NotificationControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     * حظر قنوات إشعارات محددة
     */
    async notificationControllerCreateSuppressionRaw(requestParameters: NotificationControllerCreateSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createSuppressionDto'] == null) {
            throw new runtime.RequiredError(
                'createSuppressionDto',
                'Required parameter "createSuppressionDto" was null or undefined when calling notificationControllerCreateSuppression().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/suppression`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSuppressionDtoToJSON(requestParameters['createSuppressionDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حظر قنوات إشعارات محددة
     */
    async notificationControllerCreateSuppression(requestParameters: NotificationControllerCreateSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerCreateSuppressionRaw(requestParameters, initOverrides);
    }

    /**
     * حذف إشعار
     */
    async notificationControllerDeleteRaw(requestParameters: NotificationControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notificationControllerDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حذف إشعار
     */
    async notificationControllerDelete(requestParameters: NotificationControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * جلب إشعارات المستخدم
     */
    async notificationControllerGetMyNotificationsRaw(requestParameters: NotificationControllerGetMyNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/my`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب إشعارات المستخدم
     */
    async notificationControllerGetMyNotifications(requestParameters: NotificationControllerGetMyNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerGetMyNotificationsRaw(requestParameters, initOverrides);
    }

    /**
     * جلب القنوات المحظورة
     */
    async notificationControllerGetSuppressedChannelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/suppression/channels`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب القنوات المحظورة
     */
    async notificationControllerGetSuppressedChannels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerGetSuppressedChannelsRaw(initOverrides);
    }

    /**
     * إحصائيات الحظر (للإدارة)
     */
    async notificationControllerGetSuppressionStatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/suppression/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إحصائيات الحظر (للإدارة)
     */
    async notificationControllerGetSuppressionStats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerGetSuppressionStatsRaw(initOverrides);
    }

    /**
     * عدد الإشعارات غير المقروءة
     */
    async notificationControllerGetUnreadCountRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/unread/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * عدد الإشعارات غير المقروءة
     */
    async notificationControllerGetUnreadCount(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerGetUnreadCountRaw(initOverrides);
    }

    /**
     * جلب قائمة الحظر للمستخدم
     */
    async notificationControllerGetUserSuppressionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/suppression`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * جلب قائمة الحظر للمستخدم
     */
    async notificationControllerGetUserSuppressions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerGetUserSuppressionsRaw(initOverrides);
    }

    /**
     * تحديد جميع الإشعارات كمقروءة
     */
    async notificationControllerMarkAllAsReadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/read-all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديد جميع الإشعارات كمقروءة
     */
    async notificationControllerMarkAllAsRead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerMarkAllAsReadRaw(initOverrides);
    }

    /**
     * تحديد الإشعار كمقروء
     */
    async notificationControllerMarkAsReadRaw(requestParameters: NotificationControllerMarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notificationControllerMarkAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/{id}/read`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديد الإشعار كمقروء
     */
    async notificationControllerMarkAsRead(requestParameters: NotificationControllerMarkAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerMarkAsReadRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء حظر قناة محددة
     */
    async notificationControllerRemoveChannelSuppressionRaw(requestParameters: NotificationControllerRemoveChannelSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling notificationControllerRemoveChannelSuppression().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/suppression/channel/{channel}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء حظر قناة محددة
     */
    async notificationControllerRemoveChannelSuppression(requestParameters: NotificationControllerRemoveChannelSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerRemoveChannelSuppressionRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء حظر
     */
    async notificationControllerRemoveSuppressionRaw(requestParameters: NotificationControllerRemoveSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling notificationControllerRemoveSuppression().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/suppression/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء حظر
     */
    async notificationControllerRemoveSuppression(requestParameters: NotificationControllerRemoveSuppressionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerRemoveSuppressionRaw(requestParameters, initOverrides);
    }

    /**
     * إرسال إشعار جماعي (Admin)
     */
    async notificationControllerSendBulkNotificationRaw(requestParameters: NotificationControllerSendBulkNotificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['notificationControllerSendBulkNotificationRequest'] == null) {
            throw new runtime.RequiredError(
                'notificationControllerSendBulkNotificationRequest',
                'Required parameter "notificationControllerSendBulkNotificationRequest" was null or undefined when calling notificationControllerSendBulkNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/notifications/send-bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationControllerSendBulkNotificationRequestToJSON(requestParameters['notificationControllerSendBulkNotificationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إرسال إشعار جماعي (Admin)
     */
    async notificationControllerSendBulkNotification(requestParameters: NotificationControllerSendBulkNotificationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.notificationControllerSendBulkNotificationRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const NotificationControllerRemoveChannelSuppressionChannelEnum = {
    Push: 'push',
    Email: 'email',
    Sms: 'sms'
} as const;
export type NotificationControllerRemoveChannelSuppressionChannelEnum = typeof NotificationControllerRemoveChannelSuppressionChannelEnum[keyof typeof NotificationControllerRemoveChannelSuppressionChannelEnum];
