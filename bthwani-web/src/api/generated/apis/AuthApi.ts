/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkConsentDto,
  ConsentDto,
  FirebaseAuthDto,
  ForgotPasswordDto,
  ResetPasswordDto,
  VerifyOtpDto,
  VerifyResetCodeDto,
} from '../models/index';
import {
    BulkConsentDtoFromJSON,
    BulkConsentDtoToJSON,
    ConsentDtoFromJSON,
    ConsentDtoToJSON,
    FirebaseAuthDtoFromJSON,
    FirebaseAuthDtoToJSON,
    ForgotPasswordDtoFromJSON,
    ForgotPasswordDtoToJSON,
    ResetPasswordDtoFromJSON,
    ResetPasswordDtoToJSON,
    VerifyOtpDtoFromJSON,
    VerifyOtpDtoToJSON,
    VerifyResetCodeDtoFromJSON,
    VerifyResetCodeDtoToJSON,
} from '../models/index';

export interface AuthControllerCheckConsentRequest {
    type: AuthControllerCheckConsentTypeEnum;
}

export interface AuthControllerForgotPasswordRequest {
    forgotPasswordDto: ForgotPasswordDto;
}

export interface AuthControllerGetConsentHistoryRequest {
    type?: AuthControllerGetConsentHistoryTypeEnum;
}

export interface AuthControllerGrantBulkConsentsRequest {
    bulkConsentDto: BulkConsentDto;
}

export interface AuthControllerGrantConsentRequest {
    consentDto: ConsentDto;
}

export interface AuthControllerLoginWithFirebaseRequest {
    firebaseAuthDto: FirebaseAuthDto;
}

export interface AuthControllerResetPasswordRequest {
    resetPasswordDto: ResetPasswordDto;
}

export interface AuthControllerVerifyOtpRequest {
    verifyOtpDto: VerifyOtpDto;
}

export interface AuthControllerVerifyResetCodeRequest {
    verifyResetCodeDto: VerifyResetCodeDto;
}

export interface AuthControllerWithdrawConsentRequest {
    type: AuthControllerWithdrawConsentTypeEnum;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary التحقق من موافقة محددة
     * @param {'privacy_policy' | 'terms_of_service' | 'marketing' | 'data_processing'} type نوع الموافقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerCheckConsentRaw(requestParameters: AuthControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من موافقة محددة
     */
    authControllerCheckConsent(requestParameters: AuthControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلب إعادة تعيين كلمة المرور
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerForgotPasswordRaw(requestParameters: AuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلب إعادة تعيين كلمة المرور
     */
    authControllerForgotPassword(requestParameters: AuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سجل موافقات المستخدم
     * @param {'privacy_policy' | 'terms_of_service' | 'marketing' | 'data_processing'} [type] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerGetConsentHistoryRaw(requestParameters: AuthControllerGetConsentHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سجل موافقات المستخدم
     */
    authControllerGetConsentHistory(requestParameters: AuthControllerGetConsentHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary ملخص موافقات المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerGetConsentSummaryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * ملخص موافقات المستخدم
     */
    authControllerGetConsentSummary(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل موافقات متعددة دفعة واحدة
     * @param {BulkConsentDto} bulkConsentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerGrantBulkConsentsRaw(requestParameters: AuthControllerGrantBulkConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل موافقات متعددة دفعة واحدة
     */
    authControllerGrantBulkConsents(requestParameters: AuthControllerGrantBulkConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل موافقة المستخدم
     * @param {ConsentDto} consentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerGrantConsentRaw(requestParameters: AuthControllerGrantConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل موافقة المستخدم
     */
    authControllerGrantConsent(requestParameters: AuthControllerGrantConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تسجيل الدخول عبر Firebase
     * @param {FirebaseAuthDto} firebaseAuthDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerLoginWithFirebaseRaw(requestParameters: AuthControllerLoginWithFirebaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تسجيل الدخول عبر Firebase
     */
    authControllerLoginWithFirebase(requestParameters: AuthControllerLoginWithFirebaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إعادة تعيين كلمة المرور
     * @param {ResetPasswordDto} resetPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerResetPasswordRaw(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إعادة تعيين كلمة المرور
     */
    authControllerResetPassword(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التحقق من رمز OTP
     * @param {VerifyOtpDto} verifyOtpDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerVerifyOtpRaw(requestParameters: AuthControllerVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من رمز OTP
     */
    authControllerVerifyOtp(requestParameters: AuthControllerVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary التحقق من رمز إعادة التعيين
     * @param {VerifyResetCodeDto} verifyResetCodeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerVerifyResetCodeRaw(requestParameters: AuthControllerVerifyResetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * التحقق من رمز إعادة التعيين
     */
    authControllerVerifyResetCode(requestParameters: AuthControllerVerifyResetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary سحب الموافقة
     * @param {'privacy_policy' | 'terms_of_service' | 'marketing' | 'data_processing'} type نوع الموافقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerWithdrawConsentRaw(requestParameters: AuthControllerWithdrawConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * سحب الموافقة
     */
    authControllerWithdrawConsent(requestParameters: AuthControllerWithdrawConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * التحقق من موافقة محددة
     */
    async authControllerCheckConsentRaw(requestParameters: AuthControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling authControllerCheckConsent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/consent/check/{type}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من موافقة محددة
     */
    async authControllerCheckConsent(requestParameters: AuthControllerCheckConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerCheckConsentRaw(requestParameters, initOverrides);
    }

    /**
     * طلب إعادة تعيين كلمة المرور
     */
    async authControllerForgotPasswordRaw(requestParameters: AuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['forgotPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'forgotPasswordDto',
                'Required parameter "forgotPasswordDto" was null or undefined when calling authControllerForgotPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/forgot`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForgotPasswordDtoToJSON(requestParameters['forgotPasswordDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلب إعادة تعيين كلمة المرور
     */
    async authControllerForgotPassword(requestParameters: AuthControllerForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerForgotPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * سجل موافقات المستخدم
     */
    async authControllerGetConsentHistoryRaw(requestParameters: AuthControllerGetConsentHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/consent/history`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سجل موافقات المستخدم
     */
    async authControllerGetConsentHistory(requestParameters: AuthControllerGetConsentHistoryRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerGetConsentHistoryRaw(requestParameters, initOverrides);
    }

    /**
     * ملخص موافقات المستخدم
     */
    async authControllerGetConsentSummaryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/consent/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ملخص موافقات المستخدم
     */
    async authControllerGetConsentSummary(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerGetConsentSummaryRaw(initOverrides);
    }

    /**
     * تسجيل موافقات متعددة دفعة واحدة
     */
    async authControllerGrantBulkConsentsRaw(requestParameters: AuthControllerGrantBulkConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bulkConsentDto'] == null) {
            throw new runtime.RequiredError(
                'bulkConsentDto',
                'Required parameter "bulkConsentDto" was null or undefined when calling authControllerGrantBulkConsents().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/consent/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkConsentDtoToJSON(requestParameters['bulkConsentDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل موافقات متعددة دفعة واحدة
     */
    async authControllerGrantBulkConsents(requestParameters: AuthControllerGrantBulkConsentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerGrantBulkConsentsRaw(requestParameters, initOverrides);
    }

    /**
     * تسجيل موافقة المستخدم
     */
    async authControllerGrantConsentRaw(requestParameters: AuthControllerGrantConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['consentDto'] == null) {
            throw new runtime.RequiredError(
                'consentDto',
                'Required parameter "consentDto" was null or undefined when calling authControllerGrantConsent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/consent`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsentDtoToJSON(requestParameters['consentDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل موافقة المستخدم
     */
    async authControllerGrantConsent(requestParameters: AuthControllerGrantConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerGrantConsentRaw(requestParameters, initOverrides);
    }

    /**
     * تسجيل الدخول عبر Firebase
     */
    async authControllerLoginWithFirebaseRaw(requestParameters: AuthControllerLoginWithFirebaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['firebaseAuthDto'] == null) {
            throw new runtime.RequiredError(
                'firebaseAuthDto',
                'Required parameter "firebaseAuthDto" was null or undefined when calling authControllerLoginWithFirebase().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/firebase/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FirebaseAuthDtoToJSON(requestParameters['firebaseAuthDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تسجيل الدخول عبر Firebase
     */
    async authControllerLoginWithFirebase(requestParameters: AuthControllerLoginWithFirebaseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerLoginWithFirebaseRaw(requestParameters, initOverrides);
    }

    /**
     * إعادة تعيين كلمة المرور
     */
    async authControllerResetPasswordRaw(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resetPasswordDto'] == null) {
            throw new runtime.RequiredError(
                'resetPasswordDto',
                'Required parameter "resetPasswordDto" was null or undefined when calling authControllerResetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/reset`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResetPasswordDtoToJSON(requestParameters['resetPasswordDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إعادة تعيين كلمة المرور
     */
    async authControllerResetPassword(requestParameters: AuthControllerResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerResetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * التحقق من رمز OTP
     */
    async authControllerVerifyOtpRaw(requestParameters: AuthControllerVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyOtpDto'] == null) {
            throw new runtime.RequiredError(
                'verifyOtpDto',
                'Required parameter "verifyOtpDto" was null or undefined when calling authControllerVerifyOtp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/verify-otp`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyOtpDtoToJSON(requestParameters['verifyOtpDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من رمز OTP
     */
    async authControllerVerifyOtp(requestParameters: AuthControllerVerifyOtpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerVerifyOtpRaw(requestParameters, initOverrides);
    }

    /**
     * التحقق من رمز إعادة التعيين
     */
    async authControllerVerifyResetCodeRaw(requestParameters: AuthControllerVerifyResetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['verifyResetCodeDto'] == null) {
            throw new runtime.RequiredError(
                'verifyResetCodeDto',
                'Required parameter "verifyResetCodeDto" was null or undefined when calling authControllerVerifyResetCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/auth/reset/verify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyResetCodeDtoToJSON(requestParameters['verifyResetCodeDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * التحقق من رمز إعادة التعيين
     */
    async authControllerVerifyResetCode(requestParameters: AuthControllerVerifyResetCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerVerifyResetCodeRaw(requestParameters, initOverrides);
    }

    /**
     * سحب الموافقة
     */
    async authControllerWithdrawConsentRaw(requestParameters: AuthControllerWithdrawConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling authControllerWithdrawConsent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/auth/consent/{type}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * سحب الموافقة
     */
    async authControllerWithdrawConsent(requestParameters: AuthControllerWithdrawConsentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerWithdrawConsentRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const AuthControllerCheckConsentTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;
export type AuthControllerCheckConsentTypeEnum = typeof AuthControllerCheckConsentTypeEnum[keyof typeof AuthControllerCheckConsentTypeEnum];
/**
 * @export
 */
export const AuthControllerGetConsentHistoryTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;
export type AuthControllerGetConsentHistoryTypeEnum = typeof AuthControllerGetConsentHistoryTypeEnum[keyof typeof AuthControllerGetConsentHistoryTypeEnum];
/**
 * @export
 */
export const AuthControllerWithdrawConsentTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;
export type AuthControllerWithdrawConsentTypeEnum = typeof AuthControllerWithdrawConsentTypeEnum[keyof typeof AuthControllerWithdrawConsentTypeEnum];
