/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CalculateFeeDto,
} from '../models/index';
import {
    CalculateFeeDtoFromJSON,
    CalculateFeeDtoToJSON,
} from '../models/index';

export interface AkhdimniControllerAssignDriverRequest {
    id: string;
    body: object;
}

export interface AkhdimniControllerCalculateFeeRequest {
    calculateFeeDto: CalculateFeeDto;
}

export interface AkhdimniControllerCancelErrandRequest {
    id: string;
}

export interface AkhdimniControllerCreateErrandRequest {
    body: object;
}

export interface AkhdimniControllerGetAllErrandsRequest {
    status: string;
    limit: number;
    cursor: string;
}

export interface AkhdimniControllerGetErrandRequest {
    id: string;
}

export interface AkhdimniControllerGetMyDriverErrandsRequest {
    status: string;
}

export interface AkhdimniControllerGetMyErrandsRequest {
    status: string;
}

export interface AkhdimniControllerRateErrandRequest {
    id: string;
    body: object;
}

export interface AkhdimniControllerUpdateErrandStatusRequest {
    id: string;
    body: object;
}

/**
 * AkhdimniApi - interface
 * 
 * @export
 * @interface AkhdimniApiInterface
 */
export interface AkhdimniApiInterface {
    /**
     * 
     * @summary تعيين سائق لمهمة
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerAssignDriverRaw(requestParameters: AkhdimniControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تعيين سائق لمهمة
     */
    akhdimniControllerAssignDriver(requestParameters: AkhdimniControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary حساب رسوم المهمة قبل إنشائها
     * @param {CalculateFeeDto} calculateFeeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerCalculateFeeRaw(requestParameters: AkhdimniControllerCalculateFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * حساب رسوم المهمة قبل إنشائها
     */
    akhdimniControllerCalculateFee(requestParameters: AkhdimniControllerCalculateFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إلغاء طلب
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerCancelErrandRaw(requestParameters: AkhdimniControllerCancelErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إلغاء طلب
     */
    akhdimniControllerCancelErrand(requestParameters: AkhdimniControllerCancelErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary إنشاء طلب مهمة (أخدمني)
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerCreateErrandRaw(requestParameters: AkhdimniControllerCreateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * إنشاء طلب مهمة (أخدمني)
     */
    akhdimniControllerCreateErrand(requestParameters: AkhdimniControllerCreateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary كل طلبات أخدمني (إدارة)
     * @param {string} status 
     * @param {number} limit 
     * @param {string} cursor 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerGetAllErrandsRaw(requestParameters: AkhdimniControllerGetAllErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * كل طلبات أخدمني (إدارة)
     */
    akhdimniControllerGetAllErrands(requestParameters: AkhdimniControllerGetAllErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary الحصول على طلب محدد
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerGetErrandRaw(requestParameters: AkhdimniControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * الحصول على طلب محدد
     */
    akhdimniControllerGetErrand(requestParameters: AkhdimniControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary مهماتي كسائق
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerGetMyDriverErrandsRaw(requestParameters: AkhdimniControllerGetMyDriverErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * مهماتي كسائق
     */
    akhdimniControllerGetMyDriverErrands(requestParameters: AkhdimniControllerGetMyDriverErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary طلباتي من أخدمني
     * @param {string} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerGetMyErrandsRaw(requestParameters: AkhdimniControllerGetMyErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * طلباتي من أخدمني
     */
    akhdimniControllerGetMyErrands(requestParameters: AkhdimniControllerGetMyErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تقييم المهمة
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerRateErrandRaw(requestParameters: AkhdimniControllerRateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تقييم المهمة
     */
    akhdimniControllerRateErrand(requestParameters: AkhdimniControllerRateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary تحديث حالة المهمة (سائق)
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AkhdimniApiInterface
     */
    akhdimniControllerUpdateErrandStatusRaw(requestParameters: AkhdimniControllerUpdateErrandStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * تحديث حالة المهمة (سائق)
     */
    akhdimniControllerUpdateErrandStatus(requestParameters: AkhdimniControllerUpdateErrandStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class AkhdimniApi extends runtime.BaseAPI implements AkhdimniApiInterface {

    /**
     * تعيين سائق لمهمة
     */
    async akhdimniControllerAssignDriverRaw(requestParameters: AkhdimniControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling akhdimniControllerAssignDriver().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling akhdimniControllerAssignDriver().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/admin/errands/{id}/assign-driver`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تعيين سائق لمهمة
     */
    async akhdimniControllerAssignDriver(requestParameters: AkhdimniControllerAssignDriverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerAssignDriverRaw(requestParameters, initOverrides);
    }

    /**
     * حساب رسوم المهمة قبل إنشائها
     */
    async akhdimniControllerCalculateFeeRaw(requestParameters: AkhdimniControllerCalculateFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['calculateFeeDto'] == null) {
            throw new runtime.RequiredError(
                'calculateFeeDto',
                'Required parameter "calculateFeeDto" was null or undefined when calling akhdimniControllerCalculateFee().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/errands/calculate-fee`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateFeeDtoToJSON(requestParameters['calculateFeeDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * حساب رسوم المهمة قبل إنشائها
     */
    async akhdimniControllerCalculateFee(requestParameters: AkhdimniControllerCalculateFeeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerCalculateFeeRaw(requestParameters, initOverrides);
    }

    /**
     * إلغاء طلب
     */
    async akhdimniControllerCancelErrandRaw(requestParameters: AkhdimniControllerCancelErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling akhdimniControllerCancelErrand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/errands/{id}/cancel`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إلغاء طلب
     */
    async akhdimniControllerCancelErrand(requestParameters: AkhdimniControllerCancelErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerCancelErrandRaw(requestParameters, initOverrides);
    }

    /**
     * إنشاء طلب مهمة (أخدمني)
     */
    async akhdimniControllerCreateErrandRaw(requestParameters: AkhdimniControllerCreateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling akhdimniControllerCreateErrand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/errands`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * إنشاء طلب مهمة (أخدمني)
     */
    async akhdimniControllerCreateErrand(requestParameters: AkhdimniControllerCreateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerCreateErrandRaw(requestParameters, initOverrides);
    }

    /**
     * كل طلبات أخدمني (إدارة)
     */
    async akhdimniControllerGetAllErrandsRaw(requestParameters: AkhdimniControllerGetAllErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling akhdimniControllerGetAllErrands().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling akhdimniControllerGetAllErrands().'
            );
        }

        if (requestParameters['cursor'] == null) {
            throw new runtime.RequiredError(
                'cursor',
                'Required parameter "cursor" was null or undefined when calling akhdimniControllerGetAllErrands().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/admin/errands`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * كل طلبات أخدمني (إدارة)
     */
    async akhdimniControllerGetAllErrands(requestParameters: AkhdimniControllerGetAllErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerGetAllErrandsRaw(requestParameters, initOverrides);
    }

    /**
     * الحصول على طلب محدد
     */
    async akhdimniControllerGetErrandRaw(requestParameters: AkhdimniControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling akhdimniControllerGetErrand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/errands/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * الحصول على طلب محدد
     */
    async akhdimniControllerGetErrand(requestParameters: AkhdimniControllerGetErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerGetErrandRaw(requestParameters, initOverrides);
    }

    /**
     * مهماتي كسائق
     */
    async akhdimniControllerGetMyDriverErrandsRaw(requestParameters: AkhdimniControllerGetMyDriverErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling akhdimniControllerGetMyDriverErrands().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/driver/my-errands`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * مهماتي كسائق
     */
    async akhdimniControllerGetMyDriverErrands(requestParameters: AkhdimniControllerGetMyDriverErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerGetMyDriverErrandsRaw(requestParameters, initOverrides);
    }

    /**
     * طلباتي من أخدمني
     */
    async akhdimniControllerGetMyErrandsRaw(requestParameters: AkhdimniControllerGetMyErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['status'] == null) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter "status" was null or undefined when calling akhdimniControllerGetMyErrands().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/my-errands`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * طلباتي من أخدمني
     */
    async akhdimniControllerGetMyErrands(requestParameters: AkhdimniControllerGetMyErrandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerGetMyErrandsRaw(requestParameters, initOverrides);
    }

    /**
     * تقييم المهمة
     */
    async akhdimniControllerRateErrandRaw(requestParameters: AkhdimniControllerRateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling akhdimniControllerRateErrand().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling akhdimniControllerRateErrand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/errands/{id}/rate`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تقييم المهمة
     */
    async akhdimniControllerRateErrand(requestParameters: AkhdimniControllerRateErrandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerRateErrandRaw(requestParameters, initOverrides);
    }

    /**
     * تحديث حالة المهمة (سائق)
     */
    async akhdimniControllerUpdateErrandStatusRaw(requestParameters: AkhdimniControllerUpdateErrandStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling akhdimniControllerUpdateErrandStatus().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling akhdimniControllerUpdateErrandStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/akhdimni/errands/{id}/status`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * تحديث حالة المهمة (سائق)
     */
    async akhdimniControllerUpdateErrandStatus(requestParameters: AkhdimniControllerUpdateErrandStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.akhdimniControllerUpdateErrandStatusRaw(requestParameters, initOverrides);
    }

}
