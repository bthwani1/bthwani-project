import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

// ุชุญููู ุญุฌู ุงูู bundle ุจุนุฏ ุงูุจูุงุก
async function analyzeBundle() {
  console.log('๐ ุชุญููู ุญุฌู ุงูู bundle...\n');

  try {
    // ุจูุงุก ุงููุดุฑูุน ุฃููุงู
    console.log('๐๏ธ ุจูุงุก ุงููุดุฑูุน...');
    execSync('npm run build', { stdio: 'inherit' });

    // ูุฑุงุกุฉ ููู ุงูุฅุญุตุงุฆูุงุช ุฅุฐุง ูุงู ููุฌูุฏุงู
    const distPath = 'dist';
    if (!fs.existsSync(distPath)) {
      console.log('โ ูุฌูุฏ dist ุบูุฑ ููุฌูุฏ');
      return;
    }

    // ุชุญููู ุงููููุงุช ูู ูุฌูุฏ dist
    const files = fs.readdirSync(distPath, { recursive: true });
    const fileSizes = {};

    function analyzeDirectory(dir, relativePath = '') {
      const fullPath = path.join(distPath, relativePath);

      if (!fs.existsSync(fullPath)) return;

      const items = fs.readdirSync(fullPath);

      items.forEach(item => {
        const itemPath = path.join(fullPath, item);
        const relativeItemPath = path.join(relativePath, item);

        const stats = fs.statSync(itemPath);
        if (stats.isDirectory()) {
          analyzeDirectory(dir, relativeItemPath);
        } else if (stats.isFile()) {
          fileSizes[relativeItemPath] = {
            size: stats.size,
            sizeKB: (stats.size / 1024).toFixed(2),
            sizeMB: (stats.size / (1024 * 1024)).toFixed(2)
          };
        }
      });
    }

    analyzeDirectory(distPath);

    // ุชุฑุชูุจ ุงููููุงุช ุญุณุจ ุงูุญุฌู
    const sortedFiles = Object.entries(fileSizes)
      .sort(([, a], [, b]) => b.size - a.size)
      .slice(0, 20); // ุฃูุจุฑ 20 ููู

    console.log('\n๐ ุฃูุจุฑ 20 ููู ูู ุงูู bundle:');
    console.log('โ'.repeat(80));
    console.log('ุงูููู'.padEnd(50) + 'ุงูุญุฌู (KB)'.padEnd(15) + 'ุงูุญุฌู (MB)'.padEnd(15));
    console.log('โ'.repeat(80));

    sortedFiles.forEach(([file, info]) => {
      const sizeKB = parseFloat(info.sizeKB);
      const sizeMB = parseFloat(info.sizeMB);

      // ุชุญุฏูุฏ ุงูุฃููุงู ุญุณุจ ุงูุญุฌู
      let color = '\x1b[0m'; // ุฃุจูุถ
      if (sizeMB > 1) color = '\x1b[31m'; // ุฃุญูุฑ ูููููุงุช ุงููุจูุฑุฉ ุฌุฏุงู
      else if (sizeKB > 500) color = '\x1b[33m'; // ุฃุตูุฑ ูููููุงุช ุงููุจูุฑุฉ
      else if (sizeKB > 100) color = '\x1b[36m'; // ุณูุงูู ูููููุงุช ุงููุชูุณุทุฉ

      console.log(
        `${color}${file.padEnd(50)}${info.sizeKB.padStart(10)}\x1b[0m${sizeMB.padStart(10)}\x1b[0m`
      );
    });

    // ุฅุญุตุงุฆูุงุช ุนุงูุฉ
    const totalSize = Object.values(fileSizes).reduce((sum, file) => sum + file.size, 0);
    const totalSizeMB = (totalSize / (1024 * 1024)).toFixed(2);

    console.log('โ'.repeat(80));
    console.log(`ุฅุฌูุงูู ุญุฌู ุงูู bundle: ${totalSizeMB} MB`);

    // ุชุญููู ุญุณุจ ุงูููุน
    const byType = {};
    Object.entries(fileSizes).forEach(([file, info]) => {
      const ext = path.extname(file).toLowerCase() || 'other';
      if (!byType[ext]) byType[ext] = { count: 0, size: 0 };
      byType[ext].count++;
      byType[ext].size += info.size;
    });

    console.log('\n๐ ุชุญููู ุญุณุจ ุงูููุน:');
    console.log('โ'.repeat(50));
    Object.entries(byType)
      .sort(([, a], [, b]) => b.size - a.size)
      .forEach(([type, stats]) => {
        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        const percentage = ((stats.size / totalSize) * 100).toFixed(1);
        console.log(`${type.padEnd(10)}: ${stats.count} ูููุงุช, ${sizeMB} MB (${percentage}%)`);
      });

    // ุงูุชุฑุงุญุงุช ููุชุญุณูู
    console.log('\n๐ก ุงูุชุฑุงุญุงุช ูุชุญุณูู ุญุฌู ุงูู bundle:');
    console.log('โ'.repeat(60));

    if (byType['.js']?.size > 1024 * 1024) {
      console.log('โข ูููุงุช JavaScript ูุจูุฑุฉ ุฌุฏุงู - ููุฑ ูู ุชูุณูู ุงููุฒูุฏ ูู ุงูููุฏ');
    }
    if (byType['.css']?.size > 500 * 1024) {
      console.log('โข ูููุงุช CSS ูุจูุฑุฉ - ุงุณุชุฎุฏู CSS purging ุฃู ุชูุณูู');
    }
    if (byType['.png']?.size > 200 * 1024 || byType['.jpg']?.size > 200 * 1024) {
      console.log('โข ุตูุฑ ูุจูุฑุฉ - ุงุณุชุฎุฏู WebP ุฃู ุถุบุท ุฃูุถู');
    }
    if (byType['.woff']?.size > 100 * 1024 || byType['.woff2']?.size > 100 * 1024) {
      console.log('โข ุฎุทูุท ูุจูุฑุฉ - ุงุณุชุฎุฏู ูุชุบูุฑุงุช ุงูุฎุทูุท ุฃู subsetting');
    }

    console.log('โข ุงุณุชุฎุฏู dynamic imports ููููุฏ ุบูุฑ ุงูุถุฑูุฑู ูู ุงูุจุฏุงูุฉ');
    console.log('โข ูุนูู gzip/brotli ููุถุบุท ุนูู ุงูุฎุงุฏู');
    console.log('โข ุงุณุชุฎุฏู CDN ููููุชุจุงุช ุงูุฎุงุฑุฌูุฉ');
    console.log('โข ุฑุงูุจ ุญุฌู ุงูู vendor bundle ููู ุจุชุญุฏูุซ ุงูููุชุจุงุช ุจุงูุชุธุงู');

    // ุญูุธ ุงูุชูุฑูุฑ
    const report = {
      timestamp: new Date().toISOString(),
      totalSize: totalSizeMB + ' MB',
      largestFiles: sortedFiles.slice(0, 10),
      byType,
      suggestions: [
        'ุงุณุชุฎุฏุงู dynamic imports ููููุฏ ุบูุฑ ุงูุถุฑูุฑู ูู ุงูุจุฏุงูุฉ',
        'ุชูุนูู gzip/brotli ููุถุบุท ุนูู ุงูุฎุงุฏู',
        'ุงุณุชุฎุฏุงู CDN ููููุชุจุงุช ุงูุฎุงุฑุฌูุฉ',
        'ูุฑุงูุจุฉ ุญุฌู ุงูู vendor bundle ูุชุญุฏูุซ ุงูููุชุจุงุช ุจุงูุชุธุงู'
      ]
    };

    fs.writeFileSync('bundle-analysis-report.json', JSON.stringify(report, null, 2));
    console.log('\nโ ุชู ุญูุธ ุงูุชูุฑูุฑ ูู bundle-analysis-report.json');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชุญููู ุงูู bundle:', error.message);
  }
}

// ุชุดุบูู ุงูุชุญููู
analyzeBundle().catch(console.error);
