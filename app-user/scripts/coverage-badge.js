#!/usr/bin/env node

/**
 * ุณูุฑูุจุช ุฅูุดุงุก ุดุงุฑุงุช ุงูุชุบุทูุฉ
 * ูุณุชุฎุฏู coverage-final.json ูุฅูุดุงุก ุดุงุฑุงุช SVG
 */

const fs = require('fs');
const path = require('path');

// ูุฑุงุกุฉ ููู ุงูุชุบุทูุฉ
const coveragePath = path.join(__dirname, '..', 'coverage', 'coverage-final.json');
const outputPath = path.join(__dirname, '..', 'coverage', 'badge.svg');

function generateBadge(percentage, color) {
  const width = 120;
  const height = 20;
  const padding = 6;
  const textWidth = 60;
  
  const svg = `
<svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}">
  <rect width="${textWidth}" height="${height}" fill="#555"/>
  <rect x="${textWidth}" width="${width - textWidth}" height="${height}" fill="${color}"/>
  <text x="${textWidth / 2}" y="14" text-anchor="middle" fill="white" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">coverage</text>
  <text x="${textWidth + (width - textWidth) / 2}" y="14" text-anchor="middle" fill="white" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">${percentage}%</text>
</svg>`;

  return svg;
}

function getColor(percentage) {
  if (percentage >= 80) return '#4c1';
  if (percentage >= 60) return '#97ca00';
  if (percentage >= 40) return '#dfb317';
  if (percentage >= 20) return '#fe7d37';
  return '#e05d44';
}

function main() {
  try {
    // ุงูุชุญูู ูู ูุฌูุฏ ููู ุงูุชุบุทูุฉ
    if (!fs.existsSync(coveragePath)) {
      console.log('โ ููู ุงูุชุบุทูุฉ ุบูุฑ ููุฌูุฏ. ูู ุจุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช ุฃููุงู.');
      process.exit(1);
    }

    // ูุฑุงุกุฉ ุจูุงูุงุช ุงูุชุบุทูุฉ
    const coverageData = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
    
    // ุญุณุงุจ ุงููุณุจุฉ ุงููุฆููุฉ ุงูุฅุฌูุงููุฉ
    let totalStatements = 0;
    let coveredStatements = 0;
    
    Object.values(coverageData).forEach(file => {
      if (file && file.s) {
        Object.values(file.s).forEach(statement => {
          totalStatements++;
          if (statement > 0) coveredStatements++;
        });
      }
    });
    
    const percentage = totalStatements > 0 ? Math.round((coveredStatements / totalStatements) * 100) : 0;
    const color = getColor(percentage);
    
    // ุฅูุดุงุก ุงูุดุงุฑุฉ
    const badge = generateBadge(percentage, color);
    
    // ุญูุธ ุงูุดุงุฑุฉ
    fs.writeFileSync(outputPath, badge);
    
    console.log(`โ ุชู ุฅูุดุงุก ุดุงุฑุฉ ุงูุชุบุทูุฉ: ${percentage}%`);
    console.log(`๐ ุงูููู ุงููุญููุธ: ${outputPath}`);
    console.log(`๐จ ุงูููู ุงููุณุชุฎุฏู: ${color}`);
    
    // ุฅูุดุงุก ููู README ููุชุบุทูุฉ
    const readmePath = path.join(__dirname, '..', 'coverage', 'README.md');
    const readmeContent = `# ๐ ุชูุฑูุฑ ุงูุชุบุทูุฉ

## ๐ ุงูุฅุญุตุงุฆูุงุช ุงูุญุงููุฉ
- **ุงูุชุบุทูุฉ ุงูุฅุฌูุงููุฉ:** ${percentage}%
- **ุงูุนุจุงุฑุงุช ุงููุบุทุงุฉ:** ${coveredStatements}/${totalStatements}
- **ุขุฎุฑ ุชุญุฏูุซ:** ${new Date().toLocaleString('ar-SA')}

## ๐ฏ ุงูุฃูุฏุงู
- **ุงููุฏู ุงูุญุงูู:** 30%
- **ุงููุฏู ุงููุชูุณุท:** 50%
- **ุงููุฏู ุงูููุงุฆู:** 70%

## ๐ ุงููููุงุช
- [ุชูุฑูุฑ HTML](./index.html)
- [ุชูุฑูุฑ LCOV](./lcov.info)
- [ุจูุงูุงุช JSON](./coverage-final.json)
- [ุดุงุฑุฉ ุงูุชุบุทูุฉ](./badge.svg)

## ๐ ููููุฉ ุงูุชุญุณูู
1. ุฅุถุงูุฉ ุงุฎุชุจุงุฑุงุช ููููููุงุช ุงูุฃุณุงุณูุฉ
2. ุชุบุทูุฉ ุงูุญุงูุงุช ุงูุญุฏูุฉ
3. ุงุฎุชุจุงุฑ ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
4. ุงุฎุชุจุงุฑุงุช ุงูุชูุงูู

---
*ุชู ุฅูุดุงุคู ุชููุงุฆูุงู ุจูุงุณุทุฉ ุณูุฑูุจุช ุงูุชุบุทูุฉ*
`;

    fs.writeFileSync(readmePath, readmeContent);
    console.log(`๐ ุชู ุฅูุดุงุก README ููุชุบุทูุฉ: ${readmePath}`);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅูุดุงุก ุดุงุฑุฉ ุงูุชุบุทูุฉ:', error.message);
    process.exit(1);
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
if (require.main === module) {
  main();
}

module.exports = { generateBadge, getColor };
