{
  "summary": {
    "totalEndpoints": 422,
    "provenUsedEndpoints": 53,
    "endpointsWithoutProof": 369
  },
  "usageProof": {
    "GET /me": {
      "method": "GET",
      "path": "/me",
      "file": "auth.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\hook\\useAdminUser.ts",
          "line": 31,
          "content": "const { data } = await axios.get(\"/admin/me\"); // Endpoint يرد roles & permissions",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\app-user\\src\\auth\\AuthContext.tsx",
          "line": 62,
          "content": "const meRes = await axiosInstance.get(\"/users/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 5,
          "content": "const res = await axios.get(\"/driver/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 10,
          "content": "const res = await axios.patch(\"/driver/me\", data);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        }
      ]
    },
    "GET /search": {
      "method": "GET",
      "path": "/search",
      "file": "DeliveryStoreRoutes.ts",
      "usage": [
        {
          "file": "..\\app-user\\src\\screens\\delivery\\DeliverySearch.tsx",
          "line": 160,
          "content": "const { data } = await axiosInstance.get(\"/delivery/stores/search\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "search"
        }
      ]
    },
    "PATCH /profile": {
      "method": "PATCH",
      "path": "/profile",
      "file": "userRoutes.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\features\\utilityGas\\api.ts",
          "line": 6,
          "content": "const { data } = await axiosInstance.get(\"/user/profile\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "profile"
        },
        {
          "file": "..\\bthwani-web\\src\\features\\utilityWater\\api.ts",
          "line": 9,
          "content": "const { data } = await axiosInstance.get(\"/user/profile\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "profile"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\SettingsScreen.tsx",
          "line": 75,
          "content": "const me = await axiosInstance.get(\"/vendor/me/profile\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "profile"
        }
      ]
    },
    "DELETE /me": {
      "method": "DELETE",
      "path": "/me",
      "file": "userRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\hook\\useAdminUser.ts",
          "line": 31,
          "content": "const { data } = await axios.get(\"/admin/me\"); // Endpoint يرد roles & permissions",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\app-user\\src\\auth\\AuthContext.tsx",
          "line": 62,
          "content": "const meRes = await axiosInstance.get(\"/users/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 5,
          "content": "const res = await axios.get(\"/driver/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 10,
          "content": "const res = await axios.patch(\"/driver/me\", data);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        }
      ]
    },
    "GET /address": {
      "method": "GET",
      "path": "/address",
      "file": "userRoutes.ts",
      "usage": [
        {
          "file": "..\\app-user\\src\\screens\\delivery\\InvoiceScreen.tsx",
          "line": 121,
          "content": "const res = await axiosInstance.get(\"/users/address\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "address"
        }
      ]
    },
    "POST /address": {
      "method": "POST",
      "path": "/address",
      "file": "userRoutes.ts",
      "usage": [
        {
          "file": "..\\app-user\\src\\screens\\delivery\\InvoiceScreen.tsx",
          "line": 121,
          "content": "const res = await axiosInstance.get(\"/users/address\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "address"
        }
      ]
    },
    "GET /wallet": {
      "method": "GET",
      "path": "/wallet",
      "file": "userRoutes.ts",
      "usage": [
        {
          "file": "..\\app-user\\src\\screens\\delivery\\WalletScreen.tsx",
          "line": 52,
          "content": "axiosInstance.get(\"/wallet\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "wallet"
        }
      ]
    },
    "GET /notifications": {
      "method": "GET",
      "path": "/notifications",
      "file": "userRoutes.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\api\\notifications.ts",
          "line": 24,
          "content": "return axios.post(\"/notifications/register\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "notifications"
        },
        {
          "file": "..\\bthwani-web\\src\\api\\notifications.ts",
          "line": 52,
          "content": "await axiosInstance.patch(\"/notifications/read-all\", {}, { headers });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "notifications"
        },
        {
          "file": "..\\app-user\\src\\hooks\\useNotifications.ts",
          "line": 21,
          "content": "const response = await axiosInstance.get('/users/notifications');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "notifications"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\SettingsScreen.tsx",
          "line": 87,
          "content": "const prefs = await axiosInstance.get(\"/vendor/settings/notifications\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "notifications"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\SettingsScreen.tsx",
          "line": 111,
          "content": "await axiosInstance.put(\"/vendor/settings/notifications\", next);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "notifications"
        }
      ]
    },
    "POST /sign-upload": {
      "method": "POST",
      "path": "/sign-upload",
      "file": "mediaRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\services\\uploadService.ts",
          "line": 16,
          "content": "const response = await axios.post('/media/sign-upload', {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "sign-upload"
        }
      ]
    },
    "POST /forgot": {
      "method": "POST",
      "path": "/forgot",
      "file": "passwordReset.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\api\\auth.ts",
          "line": 128,
          "content": "return axios.post(\"/auth/forgot\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "forgot"
        }
      ]
    },
    "POST /verify": {
      "method": "POST",
      "path": "/verify",
      "file": "passwordReset.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\api\\auth.ts",
          "line": 135,
          "content": "return axios.post(\"/auth/reset/verify\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "verify"
        }
      ]
    },
    "POST /reset": {
      "method": "POST",
      "path": "/reset",
      "file": "passwordReset.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\api\\auth.ts",
          "line": 143,
          "content": "return axios.post(\"/auth/reset\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "reset"
        }
      ]
    },
    "POST /preview": {
      "method": "POST",
      "path": "/preview",
      "file": "segments.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\marketing\\Segments.tsx",
          "line": 23,
          "content": "(await axios.post(\"/segments/preview\", { rules: JSON.parse(rules) })).data,",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "preview"
        }
      ]
    },
    "POST /sync": {
      "method": "POST",
      "path": "/sync",
      "file": "segments.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\marketing\\Segments.tsx",
          "line": 29,
          "content": "(await axios.post(\"/segments/sync\", { name, rules: JSON.parse(rules), dynamic })).data,",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "sync"
        }
      ]
    },
    "GET /stats": {
      "method": "GET",
      "path": "/stats",
      "file": "payroll.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\support\\SupportTicketsPage.tsx",
          "line": 320,
          "content": "const { data } = await axios.get('/admin/support/stats');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stats"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\system\\AuditLogPage.tsx",
          "line": 124,
          "content": "const response = await axios.get('/admin/audit-logs/stats');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stats"
        }
      ]
    },
    "GET /users": {
      "method": "GET",
      "path": "/users",
      "file": "adminRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\UserManagement.tsx",
          "line": 191,
          "content": "await axios.post(\"/admin/users\", newUser);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "users"
        },
        {
          "file": "..\\app-user\\src\\auth\\AuthContext.tsx",
          "line": 62,
          "content": "const meRes = await axiosInstance.get(\"/users/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "users"
        },
        {
          "file": "..\\app-user\\src\\hooks\\useNotifications.ts",
          "line": 21,
          "content": "const response = await axiosInstance.get('/users/notifications');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "users"
        },
        {
          "file": "..\\app-user\\src\\hooks\\useNotifications.ts",
          "line": 35,
          "content": "await axiosInstance.post('/users/notifications/mark-all-read');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "users"
        },
        {
          "file": "..\\app-user\\src\\screens\\delivery\\InvoiceScreen.tsx",
          "line": 121,
          "content": "const res = await axiosInstance.get(\"/users/address\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "users"
        }
      ]
    },
    "POST /create": {
      "method": "POST",
      "path": "/create",
      "file": "adminManagementRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\admins\\api.ts",
          "line": 117,
          "content": "const { data } = await axios.post(\"/admin/create\", body);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "create"
        }
      ]
    },
    "POST /login": {
      "method": "POST",
      "path": "/login",
      "file": "driver.routes.ts",
      "usage": [
        {
          "file": "..\\rider-app\\src\\api\\auth.ts",
          "line": 11,
          "content": "const res = await axios.post(\"/driver/login\", { phone, password });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "login"
        }
      ]
    },
    "GET /list": {
      "method": "GET",
      "path": "/list",
      "file": "chartAccount.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\admins\\api.ts",
          "line": 96,
          "content": "const { data } = await axios.get(\"/admin/list\", { params });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "list"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\UserManagement.tsx",
          "line": 82,
          "content": "const res = await axios.get(\"/admin/users/list\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "list"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\UsersListPage.tsx",
          "line": 93,
          "content": "const response = await axios.get(\"/admin/users/list\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "list"
        }
      ]
    },
    "GET /modules": {
      "method": "GET",
      "path": "/modules",
      "file": "adminManagementRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\admins\\api.ts",
          "line": 88,
          "content": "const { data } = await axios.get(\"/admin/modules\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "modules"
        }
      ]
    },
    "POST /register": {
      "method": "POST",
      "path": "/register",
      "file": "adminUsersRoutes.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\api\\notifications.ts",
          "line": 24,
          "content": "return axios.post(\"/notifications/register\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "register"
        }
      ]
    },
    "GET /admin": {
      "method": "GET",
      "path": "/admin",
      "file": "promotion.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\api\\adminOverview.ts",
          "line": 6,
          "content": "}) => axios.get(\"/admin/dashboard/summary\", { params: p });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\adminOverview.ts",
          "line": 13,
          "content": "}) => axios.get(\"/admin/dashboard/timeseries\", { params: p });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\adminOverview.ts",
          "line": 20,
          "content": "}) => axios.get(\"/admin/dashboard/top\", { params: p });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\adminOverview.ts",
          "line": 21,
          "content": "export const getOverviewAlerts = () => axios.get(\"/admin/dashboard/alerts\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\cmsApi.ts",
          "line": 56,
          "content": "return (await axiosInstance.post(\"/admin/onboarding-slides\", body)).data;",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\cmsApi.ts",
          "line": 72,
          "content": "return (await axiosInstance.post(\"/admin/pages\", body)).data;",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\reports.ts",
          "line": 177,
          "content": "const { data } = await axiosInstance.post(\"/admin/reports/generate\", filters, {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\reports.ts",
          "line": 203,
          "content": "const { data } = await axiosInstance.get(\"/admin/reports/realtime\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\settlements.ts",
          "line": 106,
          "content": "const { data } = await axiosInstance.get(\"/admin/wallet/settlements/export\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\api\\vendors.ts",
          "line": 187,
          "content": "const { data } = await axiosInstance.get(\"/admin/vendors/export\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\hook\\useAdminUser.ts",
          "line": 31,
          "content": "const { data } = await axios.get(\"/admin/me\"); // Endpoint يرد roles & permissions",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AdminDriversPage.tsx",
          "line": 132,
          "content": "const response = await axios.get(\"/admin/drivers\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AdminDriversPage.tsx",
          "line": 200,
          "content": "await axios.post(\"/admin/drivers\", data);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\admins\\api.ts",
          "line": 88,
          "content": "const { data } = await axios.get(\"/admin/modules\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\admins\\api.ts",
          "line": 96,
          "content": "const { data } = await axios.get(\"/admin/list\", { params });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\admins\\api.ts",
          "line": 117,
          "content": "const { data } = await axios.post(\"/admin/create\", body);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AdminVendorCreatePage.tsx",
          "line": 127,
          "content": "axios.get(\"/admin/vendors\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AppearanceSettingsPage.tsx",
          "line": 88,
          "content": "const { data } = await axios.get('/admin/settings/appearance');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AppearanceSettingsPage.tsx",
          "line": 101,
          "content": "const { data } = await axios.put('/admin/settings/appearance', newSettings);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\marketers\\useMarketers.ts",
          "line": 46,
          "content": "await axios.post(\"/admin/marketers/invite\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\ops\\OpsDriversDashboard.tsx",
          "line": 106,
          "content": "const { data } = await axios.get(\"/admin/ops/drivers/realtime\", { params });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\ops\\OpsDriversDashboard.tsx",
          "line": 111,
          "content": "const { data } = await axios.get(\"/admin/ops/heatmap\", { params });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\OverviewPage.tsx",
          "line": 65,
          "content": "axios.get(\"/admin/dashboard/summary\", { params }).then((r) => r.data),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\OverviewPage.tsx",
          "line": 67,
          "content": "axios.get(\"/admin/dashboard/timeseries\", { params }).then((r) => r.data),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\OverviewPage.tsx",
          "line": 69,
          "content": "axios.get(\"/admin/dashboard/top\", { params }).then((r) => r.data),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\OverviewPage.tsx",
          "line": 70,
          "content": "alerts: () => axios.get(\"/admin/dashboard/alerts\").then((r) => r.data),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\support\\SupportTicketsPage.tsx",
          "line": 320,
          "content": "const { data } = await axios.get('/admin/support/stats');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\support\\SupportTicketsPage.tsx",
          "line": 328,
          "content": "const { data } = await axios.post('/admin/support/tickets', ticketData);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\system\\AuditLogPage.tsx",
          "line": 124,
          "content": "const response = await axios.get('/admin/audit-logs/stats');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\system\\AuditLogPage.tsx",
          "line": 133,
          "content": "const response = await axios.get('/admin/audit-logs/my-actions?limit=3');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\UserManagement.tsx",
          "line": 82,
          "content": "const res = await axios.get(\"/admin/users/list\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\UserManagement.tsx",
          "line": 191,
          "content": "await axios.post(\"/admin/users\", newUser);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\UsersListPage.tsx",
          "line": 93,
          "content": "const response = await axios.get(\"/admin/users/list\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\vendors\\VendorsManagement.tsx",
          "line": 247,
          "content": "const { data } = await axios.get(\"/admin/vendors\", { params: q });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\vendors\\VendorsManagement.tsx",
          "line": 272,
          "content": "//   const { data } = await axios.post(\"/admin/vendors\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\delivery\\DeliveryBannersPage.tsx",
          "line": 99,
          "content": "const res = await axios.get(\"/delivery/banners/admin\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\drivers\\DriversList.tsx",
          "line": 44,
          "content": "const r = await axios.get(\"/admin/drivers/attendance\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\drivers\\tabs\\Assets.tsx",
          "line": 30,
          "content": "const r = await axios.get(\"/admin/driver-assets\", { params: { driver: id } });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\drivers\\tabs\\Documents.tsx",
          "line": 44,
          "content": "const r = await axios.get(\"/admin/drivers/docs\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\drivers\\tabs\\Finance.tsx",
          "line": 63,
          "content": "const r = await axios.get(\"/admin/driver-payouts\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\drivers\\tabs\\Shifts.tsx",
          "line": 34,
          "content": "const r = await axios.get(\"/admin/driver-shifts\", { params: { driver: id, from, to } });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\support\\Inbox.tsx",
          "line": 112,
          "content": "const r = await axios.get(\"/admin/dashboard/support-tickets\", { params });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\support\\TicketView.tsx",
          "line": 57,
          "content": "const r = await axios.get(\"/admin/dashboard/support-tickets\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "admin"
        }
      ]
    },
    "POST /add": {
      "method": "POST",
      "path": "/add",
      "file": "DeliveryCartRoutes.ts",
      "usage": [
        {
          "file": "..\\app-user\\src\\context\\CartContext.tsx",
          "line": 190,
          "content": "const res = await axiosInstance.post(\"/delivery/cart/add\", body, {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "add"
        },
        {
          "file": "..\\app-user\\src\\screens\\delivery\\InvoiceScreen.tsx",
          "line": 202,
          "content": "await axiosInstance.post(\"/delivery/cart/add\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "add"
        }
      ]
    },
    "GET /fee": {
      "method": "GET",
      "path": "/fee",
      "file": "DeliveryOrderRoutes.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\features\\errands\\api.ts",
          "line": 6,
          "content": "const { data } = await axiosInstance.post(\"/delivery/order/errand/fee\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "fee"
        },
        {
          "file": "..\\app-user\\src\\screens\\delivery\\AkhdimniScreen.tsx",
          "line": 648,
          "content": "const { data } = await axiosInstance.post(\"/delivery/order/errand/fee\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "fee"
        },
        {
          "file": "..\\app-user\\src\\screens\\delivery\\InvoiceScreen.tsx",
          "line": 93,
          "content": "const res = await axiosInstance.get(\"/delivery/cart/fee\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "fee"
        }
      ]
    },
    "POST /bulk-reorder": {
      "method": "POST",
      "path": "/bulk-reorder",
      "file": "DeliveryCategoryRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\delivery\\DeliveryCategoriesPage.tsx",
          "line": 381,
          "content": "await axios.post(\"/delivery/categories/bulk-reorder\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "bulk-reorder"
        }
      ]
    },
    "POST /errand": {
      "method": "POST",
      "path": "/errand",
      "file": "DeliveryOrderRoutes.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\features\\errands\\api.ts",
          "line": 38,
          "content": "const { data } = await axiosInstance.post(\"/delivery/order/errand\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "errand"
        }
      ]
    },
    "PATCH /change-password": {
      "method": "PATCH",
      "path": "/change-password",
      "file": "driver.routes.ts",
      "usage": [
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 18,
          "content": "await axios.post(\"/driver/change-password\", { oldPassword, newPassword });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "change-password"
        }
      ]
    },
    "PATCH /me": {
      "method": "PATCH",
      "path": "/me",
      "file": "driver.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\hook\\useAdminUser.ts",
          "line": 31,
          "content": "const { data } = await axios.get(\"/admin/me\"); // Endpoint يرد roles & permissions",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\app-user\\src\\auth\\AuthContext.tsx",
          "line": 62,
          "content": "const meRes = await axiosInstance.get(\"/users/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 5,
          "content": "const res = await axios.get(\"/driver/me\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        },
        {
          "file": "..\\rider-app\\src\\api\\profile.ts",
          "line": 10,
          "content": "const res = await axios.patch(\"/driver/me\", data);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "me"
        }
      ]
    },
    "PATCH /availability": {
      "method": "PATCH",
      "path": "/availability",
      "file": "driver.routes.ts",
      "usage": [
        {
          "file": "..\\rider-app\\src\\api\\driver.ts",
          "line": 16,
          "content": "const response = await axios.post(\"/driver/availability\", { isAvailable });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "availability"
        }
      ]
    },
    "GET /orders": {
      "method": "GET",
      "path": "/orders",
      "file": "driver.routes.ts",
      "usage": [
        {
          "file": "..\\rider-app\\src\\api\\driver.ts",
          "line": 5,
          "content": "const response = await axios.get(\"/driver/orders\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "orders"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\OrdersScreen.tsx",
          "line": 74,
          "content": "const res = await axiosInstance.get(\"/delivery/order/vendor/orders\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "orders"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\StatisticsScreen.tsx",
          "line": 51,
          "content": "const res = await axiosInstance.get(\"/delivery/order/vendor/orders\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "orders"
        }
      ]
    },
    "POST /settlements": {
      "method": "POST",
      "path": "/settlements",
      "file": "vendor.routes.ts",
      "usage": [
        {
          "file": "..\\vendor-app\\src\\screens\\VendorAccountStatementScreen.tsx",
          "line": 79,
          "content": "axiosInstance.get(\"/vendor/settlements\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settlements"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\VendorAccountStatementScreen.tsx",
          "line": 160,
          "content": "const res = await axiosInstance.post(\"/vendor/settlements\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settlements"
        }
      ]
    },
    "GET /settlements": {
      "method": "GET",
      "path": "/settlements",
      "file": "vendor.routes.ts",
      "usage": [
        {
          "file": "..\\vendor-app\\src\\screens\\VendorAccountStatementScreen.tsx",
          "line": 79,
          "content": "axiosInstance.get(\"/vendor/settlements\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settlements"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\VendorAccountStatementScreen.tsx",
          "line": 160,
          "content": "const res = await axiosInstance.post(\"/vendor/settlements\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settlements"
        }
      ]
    },
    "POST /stores": {
      "method": "POST",
      "path": "/stores",
      "file": "marketerStoreVendorRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AdminVendorCreatePage.tsx",
          "line": 130,
          "content": "axios.get(\"/delivery/stores\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stores"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\groceries\\MerchantProductsPage.tsx",
          "line": 114,
          "content": "axios.get(\"/delivery/stores\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stores"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\delivery\\DeliveryBannersPage.tsx",
          "line": 115,
          "content": "const res = await axios.get(\"/delivery/stores\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stores"
        }
      ]
    },
    "POST /push-token": {
      "method": "POST",
      "path": "/push-token",
      "file": "auth.routes.ts",
      "usage": [
        {
          "file": "..\\vendor-app\\src\\screens\\LoginScreen.tsx",
          "line": 90,
          "content": "await axios.post(\"/vendor/push-token\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "push-token"
        },
        {
          "file": "..\\vendor-app\\src\\utils\\notifications.ts",
          "line": 43,
          "content": "await axiosInstance.post('/vendor/push-token', {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "push-token"
        }
      ]
    },
    "POST /validate": {
      "method": "POST",
      "path": "/validate",
      "file": "coupon.routes.ts",
      "usage": [
        {
          "file": "..\\app-user\\src\\screens\\delivery\\InvoiceScreen.tsx",
          "line": 159,
          "content": "const res = await axiosInstance.post(\"/coupons/validate\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "validate"
        }
      ]
    },
    "GET /user": {
      "method": "GET",
      "path": "/user",
      "file": "coupon.routes.ts",
      "usage": [
        {
          "file": "..\\bthwani-web\\src\\features\\utilityGas\\api.ts",
          "line": 6,
          "content": "const { data } = await axiosInstance.get(\"/user/profile\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "user"
        },
        {
          "file": "..\\bthwani-web\\src\\features\\utilityWater\\api.ts",
          "line": 9,
          "content": "const { data } = await axiosInstance.get(\"/user/profile\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "user"
        },
        {
          "file": "..\\app-user\\src\\screens\\delivery\\WalletScreen.tsx",
          "line": 53,
          "content": "axiosInstance.get(\"/coupons/user\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "user"
        }
      ]
    },
    "GET /stores": {
      "method": "GET",
      "path": "/stores",
      "file": "marketerStoreVendorRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AdminVendorCreatePage.tsx",
          "line": 130,
          "content": "axios.get(\"/delivery/stores\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stores"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\groceries\\MerchantProductsPage.tsx",
          "line": 114,
          "content": "axios.get(\"/delivery/stores\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stores"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\delivery\\DeliveryBannersPage.tsx",
          "line": 115,
          "content": "const res = await axios.get(\"/delivery/stores\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "stores"
        }
      ]
    },
    "POST /vendors": {
      "method": "POST",
      "path": "/vendors",
      "file": "marketerStoreVendorRoutes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\AdminVendorCreatePage.tsx",
          "line": 127,
          "content": "axios.get(\"/admin/vendors\", {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "vendors"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\vendors\\VendorsManagement.tsx",
          "line": 247,
          "content": "const { data } = await axios.get(\"/admin/vendors\", { params: q });",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "vendors"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\vendors\\VendorsManagement.tsx",
          "line": 272,
          "content": "//   const { data } = await axios.post(\"/admin/vendors\", payload);",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "vendors"
        }
      ]
    },
    "GET /settings": {
      "method": "GET",
      "path": "/settings",
      "file": "commissionSettings.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\finance\\CommissionSettingsPage.tsx",
          "line": 94,
          "content": "const { data } = await axios.get('/finance/commissions/settings');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settings"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\finance\\CommissionSettingsPage.tsx",
          "line": 115,
          "content": "const { data } = await axios.post('/finance/commissions/settings', {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settings"
        }
      ]
    },
    "POST /settings": {
      "method": "POST",
      "path": "/settings",
      "file": "commissionSettings.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\finance\\CommissionSettingsPage.tsx",
          "line": 94,
          "content": "const { data } = await axios.get('/finance/commissions/settings');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settings"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\finance\\CommissionSettingsPage.tsx",
          "line": 115,
          "content": "const { data } = await axios.post('/finance/commissions/settings', {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "settings"
        }
      ]
    },
    "GET /audit-log": {
      "method": "GET",
      "path": "/audit-log",
      "file": "commissionSettings.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\finance\\CommissionSettingsPage.tsx",
          "line": 107,
          "content": "const { data } = await axios.get('/finance/commissions/audit-log');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "audit-log"
        }
      ]
    },
    "GET /alerts": {
      "method": "GET",
      "path": "/alerts",
      "file": "monitoring.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\api\\adminOverview.ts",
          "line": 21,
          "content": "export const getOverviewAlerts = () => axios.get(\"/admin/dashboard/alerts\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "alerts"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\OverviewPage.tsx",
          "line": 70,
          "content": "alerts: () => axios.get(\"/admin/dashboard/alerts\").then((r) => r.data),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "alerts"
        }
      ]
    },
    "POST /audit-log": {
      "method": "POST",
      "path": "/audit-log",
      "file": "monitoring.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\finance\\CommissionSettingsPage.tsx",
          "line": 107,
          "content": "const { data } = await axios.get('/finance/commissions/audit-log');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "audit-log"
        }
      ]
    },
    "POST /generate": {
      "method": "POST",
      "path": "/generate",
      "file": "settlement.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\api\\reports.ts",
          "line": 177,
          "content": "const { data } = await axiosInstance.post(\"/admin/reports/generate\", filters, {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "generate"
        }
      ]
    },
    "GET /data-summary": {
      "method": "GET",
      "path": "/data-summary",
      "file": "reports.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\api\\finance.ts",
          "line": 906,
          "content": "const { data } = await axiosInstance.get('/finance/reports/data-summary', {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "data-summary"
        }
      ]
    },
    "POST /validate-consistency": {
      "method": "POST",
      "path": "/validate-consistency",
      "file": "reports.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\api\\finance.ts",
          "line": 943,
          "content": "const { data } = await axiosInstance.post('/finance/reports/validate-consistency', params, {",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "validate-consistency"
        }
      ]
    },
    "GET /tree": {
      "method": "GET",
      "path": "/tree",
      "file": "chartAccount.routes.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\services\\chartAccount.api.ts",
          "line": 4,
          "content": "export const getAccountTree = () => axios.get('/accounts/chart/tree');",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "tree"
        }
      ]
    },
    "GET /categories": {
      "method": "GET",
      "path": "/categories",
      "file": "api.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\groceries\\MerchantProductsPage.tsx",
          "line": 109,
          "content": "axios.get(\"/groceries/categories\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\delivery\\DeliveryBannersPage.tsx",
          "line": 126,
          "content": "const res = await axios.get(\"/delivery/categories\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        },
        {
          "file": "..\\bthwani-web\\src\\api\\delivery.ts",
          "line": 402,
          "content": "const response = await axiosInstance.get(\"/errands/categories\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        },
        {
          "file": "..\\app-user\\src\\components\\CategoriesChips.tsx",
          "line": 30,
          "content": "const { data } = await axiosInstance.get(\"/delivery/categories\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        }
      ]
    },
    "POST /categories": {
      "method": "POST",
      "path": "/categories",
      "file": "api.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\groceries\\MerchantProductsPage.tsx",
          "line": 109,
          "content": "axios.get(\"/groceries/categories\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        },
        {
          "file": "..\\admin-dashboard\\src\\pages\\delivery\\DeliveryBannersPage.tsx",
          "line": 126,
          "content": "const res = await axios.get(\"/delivery/categories\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        },
        {
          "file": "..\\bthwani-web\\src\\api\\delivery.ts",
          "line": 402,
          "content": "const response = await axiosInstance.get(\"/errands/categories\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        },
        {
          "file": "..\\app-user\\src\\components\\CategoriesChips.tsx",
          "line": 30,
          "content": "const { data } = await axiosInstance.get(\"/delivery/categories\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "categories"
        }
      ]
    },
    "GET /catalog": {
      "method": "GET",
      "path": "/catalog",
      "file": "api.ts",
      "usage": [
        {
          "file": "..\\vendor-app\\src\\screens\\CatalogProductPickerScreen.tsx",
          "line": 55,
          "content": "const res = await axiosInstance.get(\"/groceries/catalog\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "catalog"
        }
      ]
    },
    "POST /catalog": {
      "method": "POST",
      "path": "/catalog",
      "file": "api.ts",
      "usage": [
        {
          "file": "..\\vendor-app\\src\\screens\\CatalogProductPickerScreen.tsx",
          "line": 55,
          "content": "const res = await axiosInstance.get(\"/groceries/catalog\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "catalog"
        }
      ]
    },
    "GET /merchant-products": {
      "method": "GET",
      "path": "/merchant-products",
      "file": "api.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\groceries\\MerchantProductsPage.tsx",
          "line": 108,
          "content": "axios.get(\"/groceries/merchant-products\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "merchant-products"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\ProductsScreen.tsx",
          "line": 194,
          "content": "const res = await axiosInstance.get(\"/groceries/merchant-products\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "merchant-products"
        }
      ]
    },
    "POST /merchant-products": {
      "method": "POST",
      "path": "/merchant-products",
      "file": "api.ts",
      "usage": [
        {
          "file": "..\\admin-dashboard\\src\\pages\\admin\\groceries\\MerchantProductsPage.tsx",
          "line": 108,
          "content": "axios.get(\"/groceries/merchant-products\"),",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "merchant-products"
        },
        {
          "file": "..\\vendor-app\\src\\screens\\ProductsScreen.tsx",
          "line": 194,
          "content": "const res = await axiosInstance.get(\"/groceries/merchant-products\");",
          "pattern": "axios/axiosInstance call with validated endpoint",
          "endpoint": "merchant-products"
        }
      ]
    }
  }
}