version: '3.8'

services:
  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bthwani-backend
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      MONGODB_URI: ${MONGODB_URI:-mongodb://mongo:27017/bthwani}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    depends_on:
      - mongo
      - redis
    networks:
      - bthwani-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3000/health/liveness', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB
  mongo:
    image: mongo:7
    container_name: bthwani-mongo
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_DATABASE: bthwani
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    networks:
      - bthwani-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/bthwani --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: bthwani-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - bthwani-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: bthwani-prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - bthwani-network
    profiles:
      - monitoring

  # Grafana (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: bthwani-grafana
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - bthwani-network
    profiles:
      - monitoring

networks:
  bthwani-network:
    driver: bridge

volumes:
  mongo-data:
  mongo-config:
  redis-data:
  prometheus-data:
  grafana-data:

