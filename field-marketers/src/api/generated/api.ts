/* tslint:disable */
/* eslint-disable */
/**
 * Bthwani API v2
 * NestJS API Documentation - نظام إدارة الطلبات والتجارة
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface AddAddressDto {
    /**
     * تسمية العنوان (منزل، عمل، إلخ)
     */
    'label': string;
    /**
     * المدينة
     */
    'city': string;
    /**
     * الشارع
     */
    'street': string;
    /**
     * الموقع الجغرافي
     */
    'location'?: LocationDto;
}
export interface AddressDto {
    'label': string;
    'street': string;
    'city': string;
    'location': object;
}
export interface AdminControllerCreateBackupRequest {
    'collections'?: Array<string>;
    'description'?: string;
}
export interface AdminControllerCreateMarketerRequest {
    'fullName': string;
    'phone': string;
    'email'?: string;
    'territory'?: string;
}
export interface AdminControllerCreateRoleRequest {
    'name': string;
    'permissions'?: Array<string>;
    'description'?: string;
}
export interface AdminControllerUpdateSettingsRequest {
    'maintenanceMode'?: boolean;
    'allowRegistration'?: boolean;
    'minAppVersion'?: string;
    'maxOrderRadius'?: number;
}
export interface AdminCreationResponse {
    'id'?: string;
    'email'?: string;
    'fullName'?: string;
    'role'?: string;
    'permissions'?: Array<string>;
    'createdAt'?: string;
}
export interface AdminUserResponse {
    'id'?: string;
    'email'?: string;
    'fullName'?: string;
    'role'?: string;
    'permissions'?: Array<string>;
    'createdAt'?: string;
    'lastLogin'?: string;
}
export interface AdminUsersListResponse {
    'data'?: Array<AdminUserResponse>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface AnalyticsControllerRecordAdSpendRequest {
    'date'?: string;
    'platform'?: string;
    'amount'?: number;
    'campaign'?: string;
}
export interface AnalyticsControllerTrackEventRequest {
    'eventType'?: string;
    'eventData'?: object;
    'userId'?: string;
}
export interface AppearanceSettingsResponse {
    'theme'?: string;
    'primaryColor'?: string;
    'logoUrl'?: string;
    'faviconUrl'?: string;
}
export interface AuditLogsStatsResponse {
    'totalActions'?: number;
    'actionsByType'?: { [key: string]: number; };
    'actionsByUser'?: { [key: string]: number; };
}
export interface BulkConsentDto {
    /**
     * قائمة الموافقات المتعددة
     */
    'consents': Array<ConsentDto>;
}
export interface CalculateFeeDto {
    /**
     * نوع الغرض
     */
    'category': CalculateFeeDtoCategoryEnum;
    /**
     * حجم الغرض
     */
    'size': CalculateFeeDtoSizeEnum;
    /**
     * الوزن بالكيلوجرام
     */
    'weightKg'?: number;
    /**
     * نقطة الاستلام
     */
    'pickup': PointDto;
    /**
     * نقطة التسليم
     */
    'dropoff': PointDto;
    /**
     * البقشيش
     */
    'tip'?: number;
}

export const CalculateFeeDtoCategoryEnum = {
    Docs: 'docs',
    Parcel: 'parcel',
    Groceries: 'groceries',
    Carton: 'carton',
    Food: 'food',
    Fragile: 'fragile',
    Other: 'other'
} as const;

export type CalculateFeeDtoCategoryEnum = typeof CalculateFeeDtoCategoryEnum[keyof typeof CalculateFeeDtoCategoryEnum];
export const CalculateFeeDtoSizeEnum = {
    Small: 'small',
    Medium: 'medium',
    Large: 'large'
} as const;

export type CalculateFeeDtoSizeEnum = typeof CalculateFeeDtoSizeEnum[keyof typeof CalculateFeeDtoSizeEnum];

export interface CartControllerAddToCartCompatRequest {
    'items'?: Array<object>;
    'store'?: string;
}
export interface CartControllerMergeCartRequest {
    'guestCartId'?: string;
}
export interface CommissionPlanCreationResponse {
    'id'?: string;
    'name'?: string;
    'description'?: string;
    'rules'?: Array<object>;
    'createdAt'?: string;
    'active'?: boolean;
}
export interface ConsentDto {
    /**
     * نوع الموافقة
     */
    'consentType': ConsentDtoConsentTypeEnum;
    /**
     * حالة الموافقة (موافق/غير موافق)
     */
    'granted': boolean;
    /**
     * نسخة السياسة أو الشروط
     */
    'version': string;
    /**
     * ملاحظات إضافية
     */
    'notes'?: string;
}

export const ConsentDtoConsentTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;

export type ConsentDtoConsentTypeEnum = typeof ConsentDtoConsentTypeEnum[keyof typeof ConsentDtoConsentTypeEnum];

export interface ContentControllerCancelSubscriptionRequest {
    'reason'?: string;
}
export interface ContentControllerCreateCMSPageRequest {
    'title'?: string;
    'slug'?: string;
    'content'?: string;
}
export interface ContentControllerCreateFAQRequest {
    'question'?: string;
    'answer'?: string;
    'category'?: string;
}
export interface ContentControllerUpdateAppSettingsRequest {
    'minAppVersion'?: string;
    'maintenanceMode'?: boolean;
    'supportEmail'?: string;
}
export interface CreateAdminRequest {
    'email'?: string;
    'fullName'?: string;
    'password'?: string;
    'role'?: string;
    'permissions'?: Array<string>;
}
export interface CreateBannerDto {
    /**
     * العنوان
     */
    'title'?: string;
    /**
     * الوصف
     */
    'description'?: string;
    /**
     * الصورة
     */
    'image': string;
    /**
     * الرابط
     */
    'link'?: string;
    /**
     * معرف المتجر
     */
    'store'?: string;
    /**
     * معرف الفئة
     */
    'category'?: string;
    /**
     * موضع العرض
     */
    'placement'?: CreateBannerDtoPlacementEnum;
    /**
     * الترتيب
     */
    'order': number;
    /**
     * تاريخ البداية
     */
    'startDate'?: string;
    /**
     * تاريخ النهاية
     */
    'endDate'?: string;
}

export const CreateBannerDtoPlacementEnum = {
    Home: 'home',
    Category: 'category',
    Store: 'store',
    Search: 'search'
} as const;

export type CreateBannerDtoPlacementEnum = typeof CreateBannerDtoPlacementEnum[keyof typeof CreateBannerDtoPlacementEnum];

export interface CreateChartAccountDto {
    /**
     * رمز الحساب
     */
    'accountCode': string;
    /**
     * اسم الحساب
     */
    'accountName': string;
    /**
     * الاسم بالعربية
     */
    'accountNameAr'?: string;
    /**
     * نوع الحساب
     */
    'accountType': CreateChartAccountDtoAccountTypeEnum;
    /**
     * الطبيعة الطبيعية للحساب
     */
    'normalBalance': CreateChartAccountDtoNormalBalanceEnum;
    /**
     * الحساب الأب
     */
    'parent'?: string;
    /**
     * وصف الحساب
     */
    'description'?: string;
}

export const CreateChartAccountDtoAccountTypeEnum = {
    Asset: 'asset',
    Liability: 'liability',
    Equity: 'equity',
    Revenue: 'revenue',
    Expense: 'expense'
} as const;

export type CreateChartAccountDtoAccountTypeEnum = typeof CreateChartAccountDtoAccountTypeEnum[keyof typeof CreateChartAccountDtoAccountTypeEnum];
export const CreateChartAccountDtoNormalBalanceEnum = {
    Debit: 'debit',
    Credit: 'credit'
} as const;

export type CreateChartAccountDtoNormalBalanceEnum = typeof CreateChartAccountDtoNormalBalanceEnum[keyof typeof CreateChartAccountDtoNormalBalanceEnum];

export interface CreateCommissionDto {
    /**
     * معرف الكيان (طلب، بائع، سائق، مسوق)
     */
    'entityId': string;
    /**
     * نوع الكيان
     */
    'entityModel': CreateCommissionDtoEntityModelEnum;
    /**
     * معرف المستفيد
     */
    'beneficiary': string;
    /**
     * نوع المستفيد
     */
    'beneficiaryType': CreateCommissionDtoBeneficiaryTypeEnum;
    /**
     * مبلغ العمولة
     */
    'amount': number;
    /**
     * نسبة العمولة (مثلاً 10 = 10%)
     */
    'rate': number;
    /**
     * المبلغ الأساسي الذي حُسبت منه العمولة
     */
    'baseAmount': number;
    /**
     * نوع الحساب
     */
    'calculationType': CreateCommissionDtoCalculationTypeEnum;
    /**
     * البيانات الإضافية
     */
    'metadata'?: object;
    /**
     * الملاحظات
     */
    'notes'?: string;
}

export const CreateCommissionDtoEntityModelEnum = {
    Order: 'Order',
    Vendor: 'Vendor',
    Driver: 'Driver',
    Marketer: 'Marketer'
} as const;

export type CreateCommissionDtoEntityModelEnum = typeof CreateCommissionDtoEntityModelEnum[keyof typeof CreateCommissionDtoEntityModelEnum];
export const CreateCommissionDtoBeneficiaryTypeEnum = {
    Driver: 'driver',
    Vendor: 'vendor',
    Marketer: 'marketer',
    Company: 'company'
} as const;

export type CreateCommissionDtoBeneficiaryTypeEnum = typeof CreateCommissionDtoBeneficiaryTypeEnum[keyof typeof CreateCommissionDtoBeneficiaryTypeEnum];
export const CreateCommissionDtoCalculationTypeEnum = {
    Percentage: 'percentage',
    Fixed: 'fixed'
} as const;

export type CreateCommissionDtoCalculationTypeEnum = typeof CreateCommissionDtoCalculationTypeEnum[keyof typeof CreateCommissionDtoCalculationTypeEnum];

export interface CreateCommissionPlanRequest {
    'name'?: string;
    'description'?: string;
    'rules'?: Array<CreateCommissionPlanRequestRulesInner>;
}
export interface CreateCommissionPlanRequestRulesInner {
    'condition'?: string;
    'percentage'?: number;
    'minAmount'?: number;
    'maxAmount'?: number;
}
export interface CreateDriverDto {
    /**
     * الاسم الكامل
     */
    'fullName': string;
    /**
     * البريد الإلكتروني
     */
    'email': string;
    /**
     * كلمة المرور
     */
    'password': string;
    /**
     * رقم الهاتف
     */
    'phone': string;
    /**
     * الدور
     */
    'role': CreateDriverDtoRoleEnum;
    /**
     * نوع المركبة
     */
    'vehicleType': CreateDriverDtoVehicleTypeEnum;
    /**
     * فئة المركبة
     */
    'vehicleClass'?: CreateDriverDtoVehicleClassEnum;
    /**
     * قوة المركبة
     */
    'vehiclePower'?: number;
    /**
     * نوع السائق
     */
    'driverType'?: CreateDriverDtoDriverTypeEnum;
    /**
     * سائقة أنثى
     */
    'isFemaleDriver'?: boolean;
}

export const CreateDriverDtoRoleEnum = {
    RiderDriver: 'rider_driver',
    LightDriver: 'light_driver',
    WomenDriver: 'women_driver'
} as const;

export type CreateDriverDtoRoleEnum = typeof CreateDriverDtoRoleEnum[keyof typeof CreateDriverDtoRoleEnum];
export const CreateDriverDtoVehicleTypeEnum = {
    Motor: 'motor',
    Bike: 'bike',
    Car: 'car'
} as const;

export type CreateDriverDtoVehicleTypeEnum = typeof CreateDriverDtoVehicleTypeEnum[keyof typeof CreateDriverDtoVehicleTypeEnum];
export const CreateDriverDtoVehicleClassEnum = {
    Light: 'light',
    Medium: 'medium',
    Heavy: 'heavy'
} as const;

export type CreateDriverDtoVehicleClassEnum = typeof CreateDriverDtoVehicleClassEnum[keyof typeof CreateDriverDtoVehicleClassEnum];
export const CreateDriverDtoDriverTypeEnum = {
    Primary: 'primary',
    Joker: 'joker'
} as const;

export type CreateDriverDtoDriverTypeEnum = typeof CreateDriverDtoDriverTypeEnum[keyof typeof CreateDriverDtoDriverTypeEnum];

export interface CreateEmployeeDto {
    /**
     * الاسم الأول
     */
    'firstName': string;
    /**
     * اسم العائلة
     */
    'lastName': string;
    /**
     * البريد الإلكتروني
     */
    'email': string;
    /**
     * رقم الهاتف
     */
    'phone': string;
    /**
     * رقم الهوية الوطنية
     */
    'nationalId'?: string;
    /**
     * المنصب
     */
    'position': string;
    /**
     * القسم
     */
    'department': string;
    /**
     * نوع التوظيف
     */
    'employmentType': CreateEmployeeDtoEmploymentTypeEnum;
    /**
     * الراتب الأساسي
     */
    'salary': number;
    /**
     * تاريخ التعيين
     */
    'hireDate': string;
    /**
     * تاريخ إنهاء الخدمة
     */
    'terminationDate'?: string;
    /**
     * العنوان
     */
    'address'?: object;
    /**
     * جهة الاتصال للطوارئ
     */
    'emergencyContact'?: string;
    /**
     * رقم هاتف الطوارئ
     */
    'emergencyPhone'?: string;
    /**
     * المدير المباشر
     */
    'manager'?: string;
    /**
     * المهارات
     */
    'skills'?: Array<string>;
    /**
     * تفاصيل البنك
     */
    'bankDetails'?: object;
    /**
     * أيام الإجازة السنوية
     */
    'annualLeaveDays'?: number;
    /**
     * أيام الإجازة المرضية
     */
    'sickLeaveDays'?: number;
}

export const CreateEmployeeDtoEmploymentTypeEnum = {
    FullTime: 'full_time',
    PartTime: 'part_time',
    Contract: 'contract',
    Intern: 'intern'
} as const;

export type CreateEmployeeDtoEmploymentTypeEnum = typeof CreateEmployeeDtoEmploymentTypeEnum[keyof typeof CreateEmployeeDtoEmploymentTypeEnum];

export interface CreateFinancialCouponDto {
    /**
     * كود الكوبون
     */
    'code': string;
    /**
     * الوصف
     */
    'description': string;
    /**
     * نوع الخصم
     */
    'discountType': CreateFinancialCouponDtoDiscountTypeEnum;
    /**
     * قيمة الخصم
     */
    'discountValue': number;
    /**
     * الحد الأقصى للخصم
     */
    'maxDiscountAmount'?: number;
    /**
     * الحد الأدنى لقيمة الطلب
     */
    'minOrderAmount'?: number;
    /**
     * الحد الأقصى للاستخدام
     */
    'maxUsage': number;
    /**
     * الحد الأقصى للاستخدام لكل مستخدم
     */
    'maxUsagePerUser': number;
    /**
     * تاريخ البداية
     */
    'startDate': string;
    /**
     * تاريخ النهاية
     */
    'endDate': string;
    /**
     * حالة النشاط
     */
    'isActive': boolean;
}

export const CreateFinancialCouponDtoDiscountTypeEnum = {
    Percentage: 'percentage',
    Fixed: 'fixed'
} as const;

export type CreateFinancialCouponDtoDiscountTypeEnum = typeof CreateFinancialCouponDtoDiscountTypeEnum[keyof typeof CreateFinancialCouponDtoDiscountTypeEnum];

export interface CreateJournalEntryDto {
    /**
     * تاريخ القيد
     */
    'date': string;
    /**
     * وصف القيد
     */
    'description': string;
    /**
     * سطور القيد
     */
    'lines': Array<JournalLineDto>;
    /**
     * نوع القيد
     */
    'type': CreateJournalEntryDtoTypeEnum;
    /**
     * المرجع الخارجي
     */
    'reference'?: string;
    /**
     * الكيان المرتبط
     */
    'relatedEntity'?: string;
    /**
     * نوع الكيان المرتبط
     */
    'relatedEntityModel'?: string;
    /**
     * ملاحظات إضافية
     */
    'notes'?: string;
}

export const CreateJournalEntryDtoTypeEnum = {
    General: 'general',
    Sales: 'sales',
    Purchase: 'purchase',
    Payment: 'payment',
    Receipt: 'receipt',
    Adjustment: 'adjustment'
} as const;

export type CreateJournalEntryDtoTypeEnum = typeof CreateJournalEntryDtoTypeEnum[keyof typeof CreateJournalEntryDtoTypeEnum];

export interface CreateLeaveRequestDto {
    /**
     * نوع الإجازة
     */
    'leaveType': CreateLeaveRequestDtoLeaveTypeEnum;
    /**
     * تاريخ البداية
     */
    'startDate': string;
    /**
     * تاريخ النهاية
     */
    'endDate': string;
    /**
     * سبب الإجازة
     */
    'reason': string;
    /**
     * ملاحظات إضافية
     */
    'notes'?: string;
    /**
     * مرفقات (روابط URL)
     */
    'attachments'?: Array<string>;
}

export const CreateLeaveRequestDtoLeaveTypeEnum = {
    Annual: 'annual',
    Sick: 'sick',
    Unpaid: 'unpaid',
    Maternity: 'maternity',
    Emergency: 'emergency'
} as const;

export type CreateLeaveRequestDtoLeaveTypeEnum = typeof CreateLeaveRequestDtoLeaveTypeEnum[keyof typeof CreateLeaveRequestDtoLeaveTypeEnum];

export interface CreateNotificationDto {
    /**
     * معرف المستخدم المستهدف
     */
    'toUser'?: string;
    /**
     * الجمهور المستهدف
     */
    'audience'?: Array<string>;
    /**
     * العنوان
     */
    'title': string;
    /**
     * المحتوى
     */
    'body': string;
    /**
     * بيانات إضافية
     */
    'data'?: object;
    /**
     * معرف التجميع
     */
    'collapseId'?: string;
}
export interface CreateOrderDto {
    /**
     * معرف المستخدم
     */
    'user': string;
    /**
     * عناصر الطلب
     */
    'items': Array<OrderItemDto>;
    /**
     * إجمالي السعر
     */
    'price': number;
    /**
     * رسوم التوصيل
     */
    'deliveryFee': number;
    /**
     * حصة الشركة
     */
    'companyShare': number;
    /**
     * حصة المنصة
     */
    'platformShare': number;
    /**
     * العنوان
     */
    'address': AddressDto;
    /**
     * طريقة الدفع
     */
    'paymentMethod': CreateOrderDtoPaymentMethodEnum;
    /**
     * نوع الطلب
     */
    'orderType': CreateOrderDtoOrderTypeEnum;
    /**
     * المبلغ المستخدم من المحفظة
     */
    'walletUsed'?: number;
    /**
     * المبلغ المتبقي كاش
     */
    'cashDue'?: number;
}

export const CreateOrderDtoPaymentMethodEnum = {
    Cash: 'cash',
    Wallet: 'wallet',
    Card: 'card',
    Mixed: 'mixed'
} as const;

export type CreateOrderDtoPaymentMethodEnum = typeof CreateOrderDtoPaymentMethodEnum[keyof typeof CreateOrderDtoPaymentMethodEnum];
export const CreateOrderDtoOrderTypeEnum = {
    Marketplace: 'marketplace',
    Errand: 'errand',
    Utility: 'utility'
} as const;

export type CreateOrderDtoOrderTypeEnum = typeof CreateOrderDtoOrderTypeEnum[keyof typeof CreateOrderDtoOrderTypeEnum];

export interface CreatePrivacyPolicyDto {
    /**
     * إصدار السياسة
     */
    'version': string;
    /**
     * محتوى السياسة بالعربية
     */
    'content': string;
    /**
     * محتوى السياسة بالإنجليزية
     */
    'contentEn': string;
    /**
     * تاريخ سريان السياسة
     */
    'effectiveDate'?: string;
    /**
     * هل السياسة نشطة
     */
    'isActive'?: boolean;
}
export interface CreateProductDto {
    /**
     * اسم المنتج
     */
    'name': string;
    /**
     * الاسم بالعربي
     */
    'name_ar'?: string;
    /**
     * الاسم بالإنجليزي
     */
    'name_en'?: string;
    /**
     * الوصف
     */
    'description'?: string;
    /**
     * السعر
     */
    'price': number;
    /**
     * معرف المتجر
     */
    'store': string;
    /**
     * معرف الفئة
     */
    'category'?: string;
    /**
     * صورة المنتج
     */
    'image'?: string;
    /**
     * الصور
     */
    'images': Array<string>;
    /**
     * متوفر في المخزون
     */
    'inStock': boolean;
    /**
     * كمية المخزون
     */
    'stockQuantity': number;
    /**
     * الخصم
     */
    'discount': number;
}
export interface CreatePromotionDto {
    /**
     * العنوان
     */
    'title'?: string;
    /**
     * الوصف
     */
    'description'?: string;
    /**
     * الصورة
     */
    'image'?: string;
    /**
     * الرابط
     */
    'link'?: string;
    /**
     * الهدف
     */
    'target': CreatePromotionDtoTargetEnum;
    /**
     * القيمة
     */
    'value'?: number;
    /**
     * نوع القيمة
     */
    'valueType'?: CreatePromotionDtoValueTypeEnum;
    /**
     * معرف المنتج
     */
    'product'?: string;
    /**
     * معرف المتجر
     */
    'store'?: string;
    /**
     * معرف الفئة
     */
    'category'?: string;
    /**
     * المواضع
     */
    'placements': Array<CreatePromotionDtoPlacementsEnum>;
    /**
     * المدن
     */
    'cities'?: Array<string>;
    /**
     * القنوات
     */
    'channels'?: Array<string>;
    /**
     * قاعدة التكديس
     */
    'stacking'?: CreatePromotionDtoStackingEnum;
    /**
     * الحد الأدنى للكمية
     */
    'minQty'?: number;
    /**
     * الحد الأدنى لقيمة الطلب
     */
    'minOrderSubtotal'?: number;
    /**
     * الحد الأقصى للخصم
     */
    'maxDiscountAmount'?: number;
    /**
     * الترتيب
     */
    'order'?: number;
    /**
     * تاريخ البداية
     */
    'startDate': string;
    /**
     * تاريخ النهاية
     */
    'endDate': string;
    /**
     * حالة النشاط
     */
    'isActive': boolean;
}

export const CreatePromotionDtoTargetEnum = {
    Product: 'product',
    Store: 'store',
    Category: 'category'
} as const;

export type CreatePromotionDtoTargetEnum = typeof CreatePromotionDtoTargetEnum[keyof typeof CreatePromotionDtoTargetEnum];
export const CreatePromotionDtoValueTypeEnum = {
    Percentage: 'percentage',
    Fixed: 'fixed'
} as const;

export type CreatePromotionDtoValueTypeEnum = typeof CreatePromotionDtoValueTypeEnum[keyof typeof CreatePromotionDtoValueTypeEnum];
export const CreatePromotionDtoPlacementsEnum = {
    HomeHero: 'home_hero',
    HomeStrip: 'home_strip',
    CategoryHeader: 'category_header',
    CategoryFeed: 'category_feed',
    StoreHeader: 'store_header',
    SearchBanner: 'search_banner',
    Cart: 'cart',
    Checkout: 'checkout'
} as const;

export type CreatePromotionDtoPlacementsEnum = typeof CreatePromotionDtoPlacementsEnum[keyof typeof CreatePromotionDtoPlacementsEnum];
export const CreatePromotionDtoStackingEnum = {
    None: 'none',
    Best: 'best',
    StackSameTarget: 'stack_same_target'
} as const;

export type CreatePromotionDtoStackingEnum = typeof CreatePromotionDtoStackingEnum[keyof typeof CreatePromotionDtoStackingEnum];

export interface CreateStoreDto {
    /**
     * اسم المتجر
     */
    'name': string;
    /**
     * الاسم بالعربي
     */
    'name_ar'?: string;
    /**
     * الاسم بالإنجليزي
     */
    'name_en'?: string;
    /**
     * العنوان
     */
    'address': string;
    /**
     * الموقع
     */
    'location': LocationDto;
    /**
     * معرف الفئة
     */
    'category'?: string;
    /**
     * صورة المتجر
     */
    'image'?: string;
    /**
     * الشعار
     */
    'logo'?: string;
    /**
     * نسبة العمولة
     */
    'commissionRate'?: number;
    /**
     * نوع المتجر
     */
    'usageType'?: CreateStoreDtoUsageTypeEnum;
    /**
     * الوسوم
     */
    'tags'?: Array<string>;
}

export const CreateStoreDtoUsageTypeEnum = {
    Restaurant: 'restaurant',
    Grocery: 'grocery',
    Pharmacy: 'pharmacy',
    Bakery: 'bakery',
    Cafe: 'cafe',
    Other: 'other'
} as const;

export type CreateStoreDtoUsageTypeEnum = typeof CreateStoreDtoUsageTypeEnum[keyof typeof CreateStoreDtoUsageTypeEnum];

export interface CreateStoreSectionDto {
    /**
     * معرف المتجر
     */
    'store': string;
    /**
     * الاسم
     */
    'name': string;
    /**
     * الاسم بالعربية
     */
    'nameAr'?: string;
    /**
     * الوصف
     */
    'description'?: string;
    /**
     * الأيقونة
     */
    'icon'?: string;
    /**
     * نوع الاستخدام
     */
    'usageType': CreateStoreSectionDtoUsageTypeEnum;
    /**
     * الترتيب
     */
    'order': number;
}

export const CreateStoreSectionDtoUsageTypeEnum = {
    Grocery: 'grocery',
    Restaurant: 'restaurant',
    Retail: 'retail'
} as const;

export type CreateStoreSectionDtoUsageTypeEnum = typeof CreateStoreSectionDtoUsageTypeEnum[keyof typeof CreateStoreSectionDtoUsageTypeEnum];

export interface CreateSuppressionDto {
    /**
     * القنوات المراد حظرها
     */
    'suppressedChannels': Array<CreateSuppressionDtoSuppressedChannelsEnum>;
    /**
     * سبب الحظر
     */
    'reason': CreateSuppressionDtoReasonEnum;
    /**
     * تفاصيل إضافية
     */
    'details'?: string;
    /**
     * تاريخ انتهاء الحظر
     */
    'expiresAt'?: string;
}

export const CreateSuppressionDtoSuppressedChannelsEnum = {
    Push: 'push',
    Email: 'email',
    Sms: 'sms'
} as const;

export type CreateSuppressionDtoSuppressedChannelsEnum = typeof CreateSuppressionDtoSuppressedChannelsEnum[keyof typeof CreateSuppressionDtoSuppressedChannelsEnum];
export const CreateSuppressionDtoReasonEnum = {
    UserRequest: 'user_request',
    Bounce: 'bounce',
    Complaint: 'complaint',
    Unsubscribe: 'unsubscribe',
    InvalidContact: 'invalid_contact',
    TooManyFailures: 'too_many_failures',
    AdminBlock: 'admin_block'
} as const;

export type CreateSuppressionDtoReasonEnum = typeof CreateSuppressionDtoReasonEnum[keyof typeof CreateSuppressionDtoReasonEnum];

export interface CreateTermsOfServiceDto {
    /**
     * إصدار الشروط
     */
    'version': string;
    /**
     * محتوى الشروط بالعربية
     */
    'content': string;
    /**
     * محتوى الشروط بالإنجليزية
     */
    'contentEn': string;
    /**
     * تاريخ سريان الشروط
     */
    'effectiveDate'?: string;
    /**
     * هل الشروط نشطة
     */
    'isActive'?: boolean;
}
export interface CreateTransactionDto {
    /**
     * معرف المستخدم
     */
    'userId': string;
    /**
     * نوع النموذج
     */
    'userModel': CreateTransactionDtoUserModelEnum;
    /**
     * المبلغ
     */
    'amount': number;
    /**
     * نوع العملية
     */
    'type': CreateTransactionDtoTypeEnum;
    /**
     * طريقة الدفع
     */
    'method': CreateTransactionDtoMethodEnum;
    /**
     * الوصف
     */
    'description'?: string;
    /**
     * رقم مرجعي بنكي
     */
    'bankRef'?: string;
    /**
     * بيانات إضافية
     */
    'meta'?: object;
}

export const CreateTransactionDtoUserModelEnum = {
    User: 'User',
    Driver: 'Driver'
} as const;

export type CreateTransactionDtoUserModelEnum = typeof CreateTransactionDtoUserModelEnum[keyof typeof CreateTransactionDtoUserModelEnum];
export const CreateTransactionDtoTypeEnum = {
    Credit: 'credit',
    Debit: 'debit'
} as const;

export type CreateTransactionDtoTypeEnum = typeof CreateTransactionDtoTypeEnum[keyof typeof CreateTransactionDtoTypeEnum];
export const CreateTransactionDtoMethodEnum = {
    Agent: 'agent',
    Card: 'card',
    Transfer: 'transfer',
    Payment: 'payment',
    Escrow: 'escrow',
    Reward: 'reward',
    Kuraimi: 'kuraimi',
    Withdrawal: 'withdrawal'
} as const;

export type CreateTransactionDtoMethodEnum = typeof CreateTransactionDtoMethodEnum[keyof typeof CreateTransactionDtoMethodEnum];

export interface CreateVendorDto {
    /**
     * الاسم الكامل
     */
    'fullName': string;
    /**
     * رقم الهاتف
     */
    'phone': string;
    /**
     * البريد الإلكتروني
     */
    'email'?: string;
    /**
     * كلمة المرور
     */
    'password': string;
    /**
     * معرف المتجر
     */
    'store': string;
    /**
     * معرف المسوق
     */
    'createdByMarketerUid'?: string;
    /**
     * المصدر
     */
    'source'?: CreateVendorDtoSourceEnum;
}

export const CreateVendorDtoSourceEnum = {
    MarketerQuickOnboard: 'marketerQuickOnboard',
    Admin: 'admin',
    Other: 'other'
} as const;

export type CreateVendorDtoSourceEnum = typeof CreateVendorDtoSourceEnum[keyof typeof CreateVendorDtoSourceEnum];

export interface DeleteUserResponse {
    'message'?: string;
    'deletedAt'?: string;
}
export interface DriverControllerChangePasswordRequest {
    'oldPassword'?: string;
    'newPassword'?: string;
}
export interface DriverControllerReportIssueRequest {
    'type'?: string;
    'description'?: string;
    'orderId'?: string;
}
export interface DriverControllerRequestVacationRequest {
    'startDate'?: string;
    'endDate'?: string;
    'reason'?: string;
}
export interface DriverControllerUpdateAvailabilityRequest {
    'isAvailable'?: boolean;
}
export interface DriverControllerUpdateProfileRequest {
    'name'?: string;
    'phone'?: string;
    'vehicle'?: object;
}
export interface DriverControllerUploadDocumentRequest {
    'type'?: string;
    'file'?: string;
    'number'?: string;
}
export interface DriversAttendanceResponse {
    'data'?: Array<DriversAttendanceResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface DriversAttendanceResponseDataInner {
    'driverId'?: string;
    'name'?: string;
    'attendanceDate'?: string;
    'status'?: string;
    'checkInTime'?: string;
    'checkOutTime'?: string;
}
export interface DriversDocumentsResponse {
    'data'?: Array<DriversDocumentsResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface DriversDocumentsResponseDataInner {
    'driverId'?: string;
    'name'?: string;
    'documentType'?: string;
    'status'?: string;
    'submittedAt'?: string;
    'verifiedAt'?: string;
}
export interface DriversFinanceResponse {
    'data'?: Array<DriversFinanceResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface DriversFinanceResponseDataInner {
    'driverId'?: string;
    'totalEarnings'?: number;
    'totalDeductions'?: number;
    'netAmount'?: number;
}
export interface DriversPayoutsResponse {
    'data'?: Array<DriversPayoutsResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface DriversPayoutsResponseDataInner {
    'driverId'?: string;
    'name'?: string;
    'amount'?: number;
    'status'?: string;
    'payoutDate'?: string;
    'processedAt'?: string;
}
export interface DriversShiftsResponse {
    'data'?: Array<DriversShiftsResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface DriversShiftsResponseDataInner {
    'driverId'?: string;
    'name'?: string;
    'shiftDate'?: string;
    'startTime'?: string;
    'endTime'?: string;
    'status'?: string;
    'hoursWorked'?: number;
}
export interface DriversVacationsStatsResponse {
    'totalDrivers'?: number;
    'onVacation'?: number;
    'vacationDaysUsed'?: number;
    'vacationDaysRemaining'?: number;
    'year'?: number;
}
export interface ERControllerCheckInRequest {
    'location'?: object;
    'notes'?: string;
}
export interface ERControllerGeneratePayrollRequest {
    'employeeId'?: string;
    'month'?: string;
    'year'?: number;
}
export interface FinanceCalculationRequest {
    'startDate'?: string;
    'endDate'?: string;
    'driverIds'?: Array<string>;
}
export interface FinanceCalculationResponse {
    'success'?: boolean;
    'message'?: string;
    'processedCount'?: number;
}
export interface FinanceControllerCreateCommissionPlanRequest {
    'name'?: string;
    'percentage'?: number;
    'minAmount'?: number;
}
export interface FinanceControllerCreatePayoutBatchRequest {
    'commissionIds'?: Array<string>;
    'batch'?: object;
}
export interface FinanceControllerCreateReconciliationRequest {
    'startDate'?: string;
    'endDate'?: string;
    'periodType'?: string;
}
export interface FinanceControllerGenerateDailyReportRequest {
    'date'?: string;
}
export interface FirebaseAuthDto {
    /**
     * Firebase ID Token
     */
    'idToken': string;
}
export interface ForgotPasswordDto {
    /**
     * البريد الإلكتروني أو رقم الهاتف
     */
    'emailOrPhone': string;
}
export interface HealthControllerCheck200Response {
    'status'?: string;
    'info'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    'error'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    'details'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; };
}
export interface HealthControllerCheck200ResponseInfoValue {
    [key: string]: any;

    'status': string;
}
export interface HealthControllerCheck503Response {
    'status'?: string;
    'info'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    'error'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; } | null;
    'details'?: { [key: string]: HealthControllerCheck200ResponseInfoValue; };
}
export interface JournalLineDto {
    /**
     * معرف الحساب
     */
    'account': string;
    /**
     * المبلغ المدين
     */
    'debit': number;
    /**
     * المبلغ الدائن
     */
    'credit': number;
    /**
     * وصف السطر
     */
    'description'?: string;
}
export interface LocationDto {
    'lat': number;
    'lng': number;
}
export interface MarketerControllerUpdateProfileRequest {
    'name'?: string;
    'phone'?: string;
    'email'?: string;
}
export interface MarketerControllerUploadFileRequest {
    'fileUrl'?: string;
    'type'?: string;
    'relatedTo'?: string;
}
export interface MyAuditActionsResponse {
    'data'?: Array<MyAuditActionsResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface MyAuditActionsResponseDataInner {
    'id'?: string;
    'action'?: string;
    'resource'?: string;
    'timestamp'?: string;
    'details'?: object;
}
export interface NotificationControllerSendBulkNotificationRequest {
    'title'?: string;
    'body'?: string;
    'userIds'?: Array<string>;
}
export interface OpsDriversRealtimeResponse {
    'data'?: Array<OpsDriversRealtimeResponseDataInner>;
    'total'?: number;
    'online'?: number;
    'offline'?: number;
}
export interface OpsDriversRealtimeResponseDataInner {
    'driverId'?: string;
    'name'?: string;
    'status'?: string;
    'location'?: OpsDriversRealtimeResponseDataInnerLocation;
    'lastUpdate'?: string;
}
export interface OpsDriversRealtimeResponseDataInnerLocation {
    'lat'?: number;
    'lng'?: number;
}
export interface OpsHeatmapResponse {
    'data'?: Array<OpsHeatmapResponseDataInner>;
    'period'?: string;
}
export interface OpsHeatmapResponseDataInner {
    'lat'?: number;
    'lng'?: number;
    'intensity'?: number;
    'timestamp'?: string;
}
export interface OrderControllerAddNoteRequest {
    /**
     * نص الملاحظة
     */
    'note': string;
}
export interface OrderControllerAssignDriverRequest {
    /**
     * معرّف السائق
     */
    'driverId': string;
}
export interface OrderControllerRateOrderRequest {
    'rating': number;
    'comment'?: string;
}
export interface OrderControllerReturnOrderRequest {
    /**
     * سبب الإرجاع
     */
    'reason': string;
}
export interface OrderControllerScheduleOrderRequest {
    /**
     * تاريخ ووقت التوصيل المطلوب
     */
    'scheduledDate': string;
}
export interface OrderControllerSetProofOfDeliveryRequest {
    /**
     * رابط صورة الإثبات
     */
    'imageUrl': string;
    /**
     * توقيع العميل (اختياري)
     */
    'signature'?: string;
    /**
     * ملاحظات إضافية (اختياري)
     */
    'notes'?: string;
}
export interface OrderControllerUpdateDriverLocationRequest {
    /**
     * خط العرض
     */
    'lat': number;
    /**
     * خط الطول
     */
    'lng': number;
}
export interface OrderControllerVendorCancelOrderRequest {
    /**
     * سبب الإلغاء
     */
    'reason': string;
}
export interface OrderItemDto {
    'productType': string;
    'productId': string;
    'name': string;
    'quantity': number;
    'unitPrice': number;
    'store': string;
    'image'?: string;
}
export interface PendingActivationsResponse {
    'data'?: Array<PendingActivationsResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface PendingActivationsResponseDataInner {
    'id'?: string;
    'type'?: string;
    'name'?: string;
    'email'?: string;
    'requestedAt'?: string;
}
export interface PointDto {
    /**
     * موقع النقطة
     */
    'location': LocationDto;
    /**
     * المدينة
     */
    'city'?: string;
    /**
     * الشارع
     */
    'street'?: string;
}
export interface RecordConsentDto {
    /**
     * نوع الموافقة
     */
    'consentType': RecordConsentDtoConsentTypeEnum;
    /**
     * إصدار المستند
     */
    'version': string;
    /**
     * هل تمت الموافقة
     */
    'accepted': boolean;
    /**
     * عنوان IP
     */
    'ipAddress'?: string;
    /**
     * User Agent
     */
    'userAgent'?: string;
}

export const RecordConsentDtoConsentTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service'
} as const;

export type RecordConsentDtoConsentTypeEnum = typeof RecordConsentDtoConsentTypeEnum[keyof typeof RecordConsentDtoConsentTypeEnum];

export interface ResetPasswordDto {
    /**
     * البريد الإلكتروني أو رقم الهاتف
     */
    'emailOrPhone': string;
    /**
     * رمز التحقق
     */
    'code': string;
    /**
     * كلمة المرور الجديدة
     */
    'newPassword': string;
}
export interface RolesResponse {
    'data'?: Array<RolesResponseDataInner>;
}
export interface RolesResponseDataInner {
    'id'?: string;
    'name'?: string;
    'permissions'?: Array<string>;
}
export interface SetPinDto {
    /**
     * رمز PIN من 4 أرقام
     */
    'pin': string;
    /**
     * تأكيد رمز PIN
     */
    'confirmPin': string;
}
export interface SettingsUpdateResponse {
    'success'?: boolean;
    'message'?: string;
}
export interface SupportStatsResponse {
    'totalTickets'?: number;
    'openTickets'?: number;
    'closedTickets'?: number;
    'avgResolutionTime'?: number;
}
export interface UpdateAppearanceSettingsRequest {
    'theme'?: string;
    'primaryColor'?: string;
    'logoUrl'?: string;
    'faviconUrl'?: string;
}
export interface UpdateEmployeeDto {
    /**
     * الاسم الأول
     */
    'firstName'?: string;
    /**
     * اسم العائلة
     */
    'lastName'?: string;
    /**
     * البريد الإلكتروني
     */
    'email'?: string;
    /**
     * رقم الهاتف
     */
    'phone'?: string;
    /**
     * رقم الهوية الوطنية
     */
    'nationalId'?: string;
    /**
     * المنصب
     */
    'position'?: string;
    /**
     * القسم
     */
    'department'?: string;
    /**
     * نوع التوظيف
     */
    'employmentType'?: UpdateEmployeeDtoEmploymentTypeEnum;
    /**
     * الراتب الأساسي
     */
    'salary'?: number;
    /**
     * تاريخ التعيين
     */
    'hireDate'?: string;
    /**
     * تاريخ إنهاء الخدمة
     */
    'terminationDate'?: string;
    /**
     * العنوان
     */
    'address'?: object;
    /**
     * جهة الاتصال للطوارئ
     */
    'emergencyContact'?: string;
    /**
     * رقم هاتف الطوارئ
     */
    'emergencyPhone'?: string;
    /**
     * المدير المباشر
     */
    'manager'?: string;
    /**
     * المهارات
     */
    'skills'?: Array<string>;
    /**
     * تفاصيل البنك
     */
    'bankDetails'?: object;
    /**
     * أيام الإجازة السنوية
     */
    'annualLeaveDays'?: number;
    /**
     * أيام الإجازة المرضية
     */
    'sickLeaveDays'?: number;
}

export const UpdateEmployeeDtoEmploymentTypeEnum = {
    FullTime: 'full_time',
    PartTime: 'part_time',
    Contract: 'contract',
    Intern: 'intern'
} as const;

export type UpdateEmployeeDtoEmploymentTypeEnum = typeof UpdateEmployeeDtoEmploymentTypeEnum[keyof typeof UpdateEmployeeDtoEmploymentTypeEnum];

export interface UpdateLocationDto {
    /**
     * خط العرض
     */
    'lat': number;
    /**
     * خط الطول
     */
    'lng': number;
}
export interface UpdateOrderStatusDto {
    /**
     * الحالة الجديدة
     */
    'status': UpdateOrderStatusDtoStatusEnum;
    /**
     * سبب التغيير
     */
    'reason'?: string;
    /**
     * من قام بالتغيير
     */
    'changedBy'?: UpdateOrderStatusDtoChangedByEnum;
}

export const UpdateOrderStatusDtoStatusEnum = {
    Created: 'created',
    Confirmed: 'confirmed',
    Preparing: 'preparing',
    Ready: 'ready',
    PickedUp: 'picked_up',
    OnTheWay: 'on_the_way',
    Arrived: 'arrived',
    Delivered: 'delivered',
    Cancelled: 'cancelled',
    Returned: 'returned',
    Refunded: 'refunded',
    Failed: 'failed'
} as const;

export type UpdateOrderStatusDtoStatusEnum = typeof UpdateOrderStatusDtoStatusEnum[keyof typeof UpdateOrderStatusDtoStatusEnum];
export const UpdateOrderStatusDtoChangedByEnum = {
    Admin: 'admin',
    Store: 'store',
    Driver: 'driver',
    Customer: 'customer'
} as const;

export type UpdateOrderStatusDtoChangedByEnum = typeof UpdateOrderStatusDtoChangedByEnum[keyof typeof UpdateOrderStatusDtoChangedByEnum];

export interface UpdateUserDto {
    /**
     * الاسم الكامل
     */
    'fullName'?: string;
    /**
     * الاسم المستعار
     */
    'aliasName'?: string;
    /**
     * رقم الهاتف
     */
    'phone'?: string;
    /**
     * صورة الملف الشخصي
     */
    'profileImage'?: string;
    /**
     * اللغة
     */
    'language'?: UpdateUserDtoLanguageEnum;
    /**
     * الثيم
     */
    'theme'?: UpdateUserDtoThemeEnum;
    /**
     * توكن الإشعارات
     */
    'pushToken'?: string;
}

export const UpdateUserDtoLanguageEnum = {
    Ar: 'ar',
    En: 'en'
} as const;

export type UpdateUserDtoLanguageEnum = typeof UpdateUserDtoLanguageEnum[keyof typeof UpdateUserDtoLanguageEnum];
export const UpdateUserDtoThemeEnum = {
    Light: 'light',
    Dark: 'dark'
} as const;

export type UpdateUserDtoThemeEnum = typeof UpdateUserDtoThemeEnum[keyof typeof UpdateUserDtoThemeEnum];

export interface UpdateVendorDto {
    /**
     * حالة النشاط
     */
    'isActive'?: boolean;
    /**
     * توكن الإشعارات
     */
    'expoPushToken'?: string;
    /**
     * إعدادات الإشعارات
     */
    'notificationSettings'?: object;
}
export interface UserControllerChangePinRequest {
    'oldPin': string;
    'newPin': string;
    'confirmNewPin': string;
}
export interface UserControllerSetDefaultAddressAliasRequest {
    'addressId'?: string;
}
export interface UtilityControllerUpsertGasRequest {
    'price'?: number;
    'unit'?: string;
    'provider'?: string;
}
export interface VendorControllerCreateSettlementRequest {
    'amount'?: number;
    'bankAccount'?: string;
}
export interface VendorControllerRequestAccountDeletionRequest {
    'reason'?: string;
    'exportData'?: boolean;
}
export interface VendorsListResponse {
    'data'?: Array<VendorsListResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface VendorsListResponseDataInner {
    'id'?: string;
    'name'?: string;
    'email'?: string;
    'status'?: string;
    'createdAt'?: string;
}
export interface VerifyOtpDto {
    /**
     * رقم الهاتف
     */
    'phone': string;
    /**
     * رمز OTP
     */
    'otp': string;
}
export interface VerifyPinDto {
    /**
     * رمز PIN للتحقق
     */
    'pin': string;
}
export interface VerifyResetCodeDto {
    /**
     * البريد الإلكتروني أو رقم الهاتف
     */
    'emailOrPhone': string;
    /**
     * رمز التحقق
     */
    'code': string;
}
export interface WalletControllerHoldFundsRequest {
    'userId': string;
    'amount': number;
    'orderId'?: string;
}
export interface WalletControllerPayBillRequest {
    'billType': WalletControllerPayBillRequestBillTypeEnum;
    'billNumber': string;
    'amount': number;
}

export const WalletControllerPayBillRequestBillTypeEnum = {
    Electricity: 'electricity',
    Water: 'water',
    Internet: 'internet'
} as const;

export type WalletControllerPayBillRequestBillTypeEnum = typeof WalletControllerPayBillRequestBillTypeEnum[keyof typeof WalletControllerPayBillRequestBillTypeEnum];

export interface WalletControllerRefundFundsRequest {
    'userId': string;
    'amount': number;
    'orderId'?: string;
    'reason': string;
}
export interface WalletControllerRequestWithdrawalRequest {
    /**
     * المبلغ المراد سحبه
     */
    'amount': number;
    /**
     * طريقة السحب
     */
    'method': WalletControllerRequestWithdrawalRequestMethodEnum;
    /**
     * بيانات الحساب البنكي
     */
    'accountInfo': object;
}

export const WalletControllerRequestWithdrawalRequestMethodEnum = {
    BankTransfer: 'bank_transfer',
    Agent: 'agent'
} as const;

export type WalletControllerRequestWithdrawalRequestMethodEnum = typeof WalletControllerRequestWithdrawalRequestMethodEnum[keyof typeof WalletControllerRequestWithdrawalRequestMethodEnum];

export interface WalletControllerTopupViaKuraimiRequest {
    /**
     * المبلغ
     */
    'amount': number;
    /**
     * رقم بطاقة كريمي
     */
    'SCustID': string;
    /**
     * الرمز السري
     */
    'PINPASS': string;
}
export interface WalletControllerVerifyTopupRequest {
    /**
     * معرّف المعاملة
     */
    'transactionId': string;
}
export interface WalletCouponsResponse {
    'data'?: Array<WalletCouponsResponseDataInner>;
    'total'?: number;
    'page'?: number;
    'limit'?: number;
}
export interface WalletCouponsResponseDataInner {
    'id'?: string;
    'code'?: string;
    'discountType'?: string;
    'discountValue'?: number;
    'status'?: string;
    'expiresAt'?: string;
}

/**
 * AdminApi - axios parameter creator
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تفعيل مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerActivateMarketer: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerActivateMarketer', 'id', id)
            const localVarPath = `/admin/marketers/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعديل حضور السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAdjustAttendance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerAdjustAttendance', 'id', id)
            const localVarPath = `/admin/drivers/{id}/attendance/adjust`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعديل رصيد السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAdjustDriverBalance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerAdjustDriverBalance', 'id', id)
            const localVarPath = `/admin/drivers/{id}/adjust-balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعديل رصيد الإجازات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAdjustLeaveBalance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerAdjustLeaveBalance', 'id', id)
            const localVarPath = `/admin/drivers/{id}/leave-balance/adjust`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على حذف البيانات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveDataDeletion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerApproveDataDeletion', 'id', id)
            const localVarPath = `/admin/data-deletion/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveLeaveRequest: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerApproveLeaveRequest', 'id', id)
            const localVarPath = `/admin/drivers/leave-requests/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveVendor: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerApproveVendor', 'id', id)
            const localVarPath = `/admin/vendors/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على طلب سحب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveWithdrawal: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerApproveWithdrawal', 'id', id)
            const localVarPath = `/admin/withdrawals/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حظر سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerBanDriver: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerBanDriver', 'id', id)
            const localVarPath = `/admin/drivers/{id}/ban`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حظر مستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerBanUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerBanUser', 'id', id)
            const localVarPath = `/admin/users/{id}/ban`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مسح الكاش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerClearCache: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cache/clear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء مستخدم إداري جديد
         * @param {CreateAdminRequest} createAdminRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateAdmin: async (createAdminRequest: CreateAdminRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAdminRequest' is not null or undefined
            assertParamExists('adminControllerCreateAdmin', 'createAdminRequest', createAdminRequest)
            const localVarPath = `/admin/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAdminRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء نسخة احتياطية
         * @param {AdminControllerCreateBackupRequest} adminControllerCreateBackupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateBackup: async (adminControllerCreateBackupRequest: AdminControllerCreateBackupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminControllerCreateBackupRequest' is not null or undefined
            assertParamExists('adminControllerCreateBackup', 'adminControllerCreateBackupRequest', adminControllerCreateBackupRequest)
            const localVarPath = `/admin/backup/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminControllerCreateBackupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء خطة عمولة جديدة
         * @param {CreateCommissionPlanRequest} createCommissionPlanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateCommissionPlan: async (createCommissionPlanRequest: CreateCommissionPlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCommissionPlanRequest' is not null or undefined
            assertParamExists('adminControllerCreateCommissionPlan', 'createCommissionPlanRequest', createCommissionPlanRequest)
            const localVarPath = `/admin/commission-plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionPlanRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة مسوق جديد
         * @param {AdminControllerCreateMarketerRequest} adminControllerCreateMarketerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateMarketer: async (adminControllerCreateMarketerRequest: AdminControllerCreateMarketerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminControllerCreateMarketerRequest' is not null or undefined
            assertParamExists('adminControllerCreateMarketer', 'adminControllerCreateMarketerRequest', adminControllerCreateMarketerRequest)
            const localVarPath = `/admin/marketers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminControllerCreateMarketerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء دور
         * @param {AdminControllerCreateRoleRequest} adminControllerCreateRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateRole: async (adminControllerCreateRoleRequest: AdminControllerCreateRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminControllerCreateRoleRequest' is not null or undefined
            assertParamExists('adminControllerCreateRole', 'adminControllerCreateRoleRequest', adminControllerCreateRoleRequest)
            const localVarPath = `/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminControllerCreateRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعطيل مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeactivateMarketer: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeactivateMarketer', 'id', id)
            const localVarPath = `/admin/marketers/{id}/deactivate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteDriver: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteDriver', 'id', id)
            const localVarPath = `/admin/drivers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف أصل سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteDriverAsset: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteDriverAsset', 'id', id)
            const localVarPath = `/admin/drivers/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteLeaveRequest: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteLeaveRequest', 'id', id)
            const localVarPath = `/admin/drivers/leave-requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف وردية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteShift: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDeleteShift', 'id', id)
            const localVarPath = `/admin/drivers/shifts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحميل نسخة احتياطية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDownloadBackup: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerDownloadBackup', 'id', id)
            const localVarPath = `/admin/backup/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تصدير المسوقين
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerExportMarketers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/marketers/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تصدير تقارير
         * @param {string} type 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerExportReport: async (type: string, format: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('adminControllerExportReport', 'type', type)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('adminControllerExportReport', 'format', format)
            const localVarPath = `/admin/reports/export/{type}/{format}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قائمة المستخدمين الإداريين
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAdminUsersList: async (page?: number, limit?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/users/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قائمة المستخدمين الإداريين
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAdminsList: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب كل السائقين
         * @param {string} status 
         * @param {boolean} isAvailable 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllDrivers: async (status: string, isAvailable: boolean, page: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('adminControllerGetAllDrivers', 'status', status)
            // verify required parameter 'isAvailable' is not null or undefined
            assertParamExists('adminControllerGetAllDrivers', 'isAvailable', isAvailable)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerGetAllDrivers', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetAllDrivers', 'limit', limit)
            const localVarPath = `/admin/drivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (isAvailable !== undefined) {
                localVarQueryParameter['isAvailable'] = isAvailable;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حضور جميع السائقين
         * @param {string} [date] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllDriversAttendance: async (date?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/attendance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب المسوقين الميدانيين
         * @param {string} status 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllMarketers: async (status: string, page: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('adminControllerGetAllMarketers', 'status', status)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerGetAllMarketers', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetAllMarketers', 'limit', limit)
            const localVarPath = `/admin/marketers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إعدادات المظهر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAppearanceSettings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/settings/appearance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملخص الحضور لكل السائقين
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAttendanceSummary: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('adminControllerGetAttendanceSummary', 'date', date)
            const localVarPath = `/admin/drivers/attendance/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل سجل مراجعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAuditLogDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetAuditLogDetails', 'id', id)
            const localVarPath = `/admin/audit-logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجلات المراجعة
         * @param {string} action 
         * @param {string} userId 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAuditLogs: async (action: string, userId: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('adminControllerGetAuditLogs', 'action', action)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminControllerGetAuditLogs', 'userId', userId)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetAuditLogs', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetAuditLogs', 'endDate', endDate)
            const localVarPath = `/admin/audit-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات سجلات المراجعة
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAuditLogsStats: async (startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/audit-logs/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات الكاش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetCacheStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/cache/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary بيانات المستخدم الإداري الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetCurrentAdminUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تقرير يومي
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDailyReport: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('adminControllerGetDailyReport', 'date', date)
            const localVarPath = `/admin/reports/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لوحة التحكم - الإحصائيات العامة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDashboard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلبات حذف البيانات
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDataDeletionRequests: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('adminControllerGetDataDeletionRequests', 'status', status)
            const localVarPath = `/admin/data-deletion/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات قاعدة البيانات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDatabaseStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/database/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل حضور السائق
         * @param {string} id 
         * @param {number} month 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverAttendance: async (id: string, month: number, year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetDriverAttendance', 'id', id)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('adminControllerGetDriverAttendance', 'month', month)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('adminControllerGetDriverAttendance', 'year', year)
            const localVarPath = `/admin/drivers/{id}/attendance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل سائق محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetDriverDetails', 'id', id)
            const localVarPath = `/admin/drivers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مالية السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverFinancials: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetDriverFinancials', 'id', id)
            const localVarPath = `/admin/drivers/{id}/financials`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رصيد إجازات السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverLeaveBalance: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetDriverLeaveBalance', 'id', id)
            const localVarPath = `/admin/drivers/{id}/leave-balance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أداء السائق
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverPerformance: async (id: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetDriverPerformance', 'id', id)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetDriverPerformance', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetDriverPerformance', 'endDate', endDate)
            const localVarPath = `/admin/drivers/{id}/performance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary السائقين حسب الحالة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversByStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/stats/by-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary وثائق السائقين
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversDocuments: async (status?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/docs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات مالية السائقين
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversFinance: async (startDate?: string, endDate?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/finance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary دفعات السائقين
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversPayouts: async (status?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/payouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ورديات السائقين
         * @param {string} [status] 
         * @param {string} [date] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversShifts: async (status?: string, date?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/shifts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substring(0,10) :
                    date;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات إجازات السائقين
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversVacationsStats: async (year?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/drivers/vacations/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary محاولات كلمات المرور الفاشلة
         * @param {number} threshold 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetFailedPasswordAttempts: async (threshold: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'threshold' is not null or undefined
            assertParamExists('adminControllerGetFailedPasswordAttempts', 'threshold', threshold)
            const localVarPath = `/admin/security/password-attempts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (threshold !== undefined) {
                localVarQueryParameter['threshold'] = threshold;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أعلام الميزات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetFeatureFlags: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/settings/feature-flags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الإحصائيات المالية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetFinancialStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/stats/financial`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلبات الإجازات
         * @param {string} status 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetLeaveRequests: async (status: string, page: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('adminControllerGetLeaveRequests', 'status', status)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerGetLeaveRequests', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetLeaveRequests', 'limit', limit)
            const localVarPath = `/admin/drivers/leave-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary المقاييس الحية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetLiveMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/dashboard/live-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketerDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetMarketerDetails', 'id', id)
            const localVarPath = `/admin/marketers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أداء المسوق
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketerPerformance: async (id: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetMarketerPerformance', 'id', id)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetMarketerPerformance', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetMarketerPerformance', 'endDate', endDate)
            const localVarPath = `/admin/marketers/{id}/performance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary متاجر المسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketerStores: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetMarketerStores', 'id', id)
            const localVarPath = `/admin/marketers/{id}/stores`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات المسوقين
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketersStatistics: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetMarketersStatistics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetMarketersStatistics', 'endDate', endDate)
            const localVarPath = `/admin/marketers/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الأدوار والصلاحيات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetModules: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/modules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إجراءاتي في سجلات المراجعة
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMyAuditActions: async (limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/audit-logs/my-actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سائقو العمليات في الوقت الفعلي
         * @param {string} [area] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOpsDriversRealtime: async (area?: string, status?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/ops/drivers/realtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (area !== undefined) {
                localVarQueryParameter['area'] = area;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary خريطة الحرارة للعمليات
         * @param {number} [hours] 
         * @param {string} [resolution] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOpsHeatmap: async (hours?: number, resolution?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/ops/heatmap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hours !== undefined) {
                localVarQueryParameter['hours'] = hours;
            }

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الطلبات حسب المدينة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOrdersByCity: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetOrdersByCity', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetOrdersByCity', 'endDate', endDate)
            const localVarPath = `/admin/orders/stats/by-city`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الطلبات حسب طريقة الدفع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOrdersByPaymentMethod: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/orders/stats/by-payment-method`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الطلبات حسب الحالة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOrdersByStatus: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetOrdersByStatus', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetOrdersByStatus', 'endDate', endDate)
            const localVarPath = `/admin/dashboard/orders-by-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التفعيلات المعلقة
         * @param {AdminControllerGetPendingActivationsTypeEnum} [type] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetPendingActivations: async (type?: AdminControllerGetPendingActivationsTypeEnum, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/pending-activations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التجار المعلقين
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetPendingVendors: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/vendors/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلبات السحب المعلقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetPendingWithdrawals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/withdrawals/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مقاييس الجودة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetQualityMetrics: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetQualityMetrics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetQualityMetrics', 'endDate', endDate)
            const localVarPath = `/admin/quality/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحليلات الإيرادات
         * @param {string} period 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetRevenueAnalytics: async (period: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('adminControllerGetRevenueAnalytics', 'period', period)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('adminControllerGetRevenueAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('adminControllerGetRevenueAnalytics', 'endDate', endDate)
            const localVarPath = `/admin/dashboard/revenue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الأدوار
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetRoles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إعدادات النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSettings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات الدعم الفني
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSupportStats: async (startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/support/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary صحة النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSystemHealth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/system/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مقاييس النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSystemMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/system/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetTodayStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/stats/today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل مستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUserDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetUserDetails', 'id', id)
            const localVarPath = `/admin/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل طلبات المستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUserOrdersHistory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerGetUserOrdersHistory', 'id', id)
            const localVarPath = `/admin/users/{id}/orders-history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب المستخدمين
         * @param {string} search 
         * @param {boolean} isActive 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUsers: async (search: string, isActive: boolean, page: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('adminControllerGetUsers', 'search', search)
            // verify required parameter 'isActive' is not null or undefined
            assertParamExists('adminControllerGetUsers', 'isActive', isActive)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerGetUsers', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetUsers', 'limit', limit)
            const localVarPath = `/admin/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قائمة التجار
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetVendorsList: async (status?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/vendors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary كوبونات المحفظة
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetWalletCoupons: async (status?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/wallet/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب طلبات السحب
         * @param {string} status 
         * @param {string} userModel 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetWithdrawals: async (status: string, userModel: string, page: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('adminControllerGetWithdrawals', 'status', status)
            // verify required parameter 'userModel' is not null or undefined
            assertParamExists('adminControllerGetWithdrawals', 'userModel', userModel)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerGetWithdrawals', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerGetWithdrawals', 'limit', limit)
            const localVarPath = `/admin/withdrawals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (userModel !== undefined) {
                localVarQueryParameter['userModel'] = userModel;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قائمة النسخ الاحتياطية
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerListBackups: async (page: number, limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('adminControllerListBackups', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('adminControllerListBackups', 'limit', limit)
            const localVarPath = `/admin/backup/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض حذف البيانات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectDataDeletion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerRejectDataDeletion', 'id', id)
            const localVarPath = `/admin/data-deletion/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectLeaveRequest: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerRejectLeaveRequest', 'id', id)
            const localVarPath = `/admin/drivers/leave-requests/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectVendor: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerRejectVendor', 'id', id)
            const localVarPath = `/admin/vendors/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض طلب سحب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectWithdrawal: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerRejectWithdrawal', 'id', id)
            const localVarPath = `/admin/withdrawals/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إعادة تعيين كلمة مرور مستخدم
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerResetUserPassword: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminControllerResetUserPassword', 'userId', userId)
            const localVarPath = `/admin/security/reset-password/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary استعادة نسخة احتياطية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRestoreBackup: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerRestoreBackup', 'id', id)
            const localVarPath = `/admin/backup/{id}/restore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تشغيل حسابات المالية
         * @param {FinanceCalculationRequest} financeCalculationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRunFinanceCalculations: async (financeCalculationRequest: FinanceCalculationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeCalculationRequest' is not null or undefined
            assertParamExists('adminControllerRunFinanceCalculations', 'financeCalculationRequest', financeCalculationRequest)
            const localVarPath = `/admin/drivers/finance/run`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(financeCalculationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعليق تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerSuspendVendor: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerSuspendVendor', 'id', id)
            const localVarPath = `/admin/vendors/{id}/suspend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء حظر سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUnbanDriver: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUnbanDriver', 'id', id)
            const localVarPath = `/admin/drivers/{id}/unban`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء حظر مستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUnbanUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUnbanUser', 'id', id)
            const localVarPath = `/admin/users/{id}/unban`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary فتح حساب مقفل
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUnlockAccount: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('adminControllerUnlockAccount', 'userId', userId)
            const localVarPath = `/admin/security/unlock-account/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث إعدادات المظهر
         * @param {UpdateAppearanceSettingsRequest} updateAppearanceSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateAppearanceSettings: async (updateAppearanceSettingsRequest: UpdateAppearanceSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAppearanceSettingsRequest' is not null or undefined
            assertParamExists('adminControllerUpdateAppearanceSettings', 'updateAppearanceSettingsRequest', updateAppearanceSettingsRequest)
            const localVarPath = `/admin/settings/appearance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAppearanceSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث علم ميزة
         * @param {string} flag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateFeatureFlag: async (flag: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flag' is not null or undefined
            assertParamExists('adminControllerUpdateFeatureFlag', 'flag', flag)
            const localVarPath = `/admin/settings/feature-flags/{flag}`
                .replace(`{${"flag"}}`, encodeURIComponent(String(flag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateMarketer: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUpdateMarketer', 'id', id)
            const localVarPath = `/admin/marketers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث دور
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateRole: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminControllerUpdateRole', 'id', id)
            const localVarPath = `/admin/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث الإعدادات
         * @param {AdminControllerUpdateSettingsRequest} adminControllerUpdateSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateSettings: async (adminControllerUpdateSettingsRequest: AdminControllerUpdateSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adminControllerUpdateSettingsRequest' is not null or undefined
            assertParamExists('adminControllerUpdateSettings', 'adminControllerUpdateSettingsRequest', adminControllerUpdateSettingsRequest)
            const localVarPath = `/admin/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(adminControllerUpdateSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تفعيل مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerActivateMarketer(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerActivateMarketer(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerActivateMarketer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعديل حضور السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerAdjustAttendance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerAdjustAttendance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerAdjustAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعديل رصيد السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerAdjustDriverBalance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerAdjustDriverBalance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerAdjustDriverBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعديل رصيد الإجازات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerAdjustLeaveBalance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerAdjustLeaveBalance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerAdjustLeaveBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على حذف البيانات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerApproveDataDeletion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerApproveDataDeletion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerApproveDataDeletion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerApproveLeaveRequest(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerApproveLeaveRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerApproveLeaveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerApproveVendor(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerApproveVendor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerApproveVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على طلب سحب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerApproveWithdrawal(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerApproveWithdrawal(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerApproveWithdrawal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حظر سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerBanDriver(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerBanDriver(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerBanDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حظر مستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerBanUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerBanUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerBanUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مسح الكاش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerClearCache(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerClearCache(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerClearCache']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء مستخدم إداري جديد
         * @param {CreateAdminRequest} createAdminRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateAdmin(createAdminRequest: CreateAdminRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateAdmin(createAdminRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء نسخة احتياطية
         * @param {AdminControllerCreateBackupRequest} adminControllerCreateBackupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateBackup(adminControllerCreateBackupRequest: AdminControllerCreateBackupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateBackup(adminControllerCreateBackupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء خطة عمولة جديدة
         * @param {CreateCommissionPlanRequest} createCommissionPlanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateCommissionPlan(createCommissionPlanRequest: CreateCommissionPlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommissionPlanCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateCommissionPlan(createCommissionPlanRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateCommissionPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة مسوق جديد
         * @param {AdminControllerCreateMarketerRequest} adminControllerCreateMarketerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateMarketer(adminControllerCreateMarketerRequest: AdminControllerCreateMarketerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateMarketer(adminControllerCreateMarketerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateMarketer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء دور
         * @param {AdminControllerCreateRoleRequest} adminControllerCreateRoleRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerCreateRole(adminControllerCreateRoleRequest: AdminControllerCreateRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerCreateRole(adminControllerCreateRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerCreateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعطيل مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeactivateMarketer(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeactivateMarketer(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeactivateMarketer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteDriver(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteDriver(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف أصل سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteDriverAsset(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteDriverAsset(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteDriverAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteLeaveRequest(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteLeaveRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteLeaveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف وردية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDeleteShift(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDeleteShift(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDeleteShift']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحميل نسخة احتياطية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerDownloadBackup(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerDownloadBackup(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerDownloadBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تصدير المسوقين
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerExportMarketers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerExportMarketers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerExportMarketers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تصدير تقارير
         * @param {string} type 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerExportReport(type: string, format: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerExportReport(type, format, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerExportReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary قائمة المستخدمين الإداريين
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [search] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAdminUsersList(page?: number, limit?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUsersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAdminUsersList(page, limit, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAdminUsersList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary قائمة المستخدمين الإداريين
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAdminsList(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUsersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAdminsList(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAdminsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب كل السائقين
         * @param {string} status 
         * @param {boolean} isAvailable 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAllDrivers(status: string, isAvailable: boolean, page: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAllDrivers(status, isAvailable, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAllDrivers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حضور جميع السائقين
         * @param {string} [date] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAllDriversAttendance(date?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversAttendanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAllDriversAttendance(date, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAllDriversAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب المسوقين الميدانيين
         * @param {string} status 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAllMarketers(status: string, page: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAllMarketers(status, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAllMarketers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إعدادات المظهر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAppearanceSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppearanceSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAppearanceSettings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAppearanceSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملخص الحضور لكل السائقين
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAttendanceSummary(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAttendanceSummary(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAttendanceSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل سجل مراجعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAuditLogDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAuditLogDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAuditLogDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجلات المراجعة
         * @param {string} action 
         * @param {string} userId 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAuditLogs(action: string, userId: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAuditLogs(action, userId, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات سجلات المراجعة
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetAuditLogsStats(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLogsStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetAuditLogsStats(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetAuditLogsStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات الكاش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetCacheStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetCacheStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetCacheStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary بيانات المستخدم الإداري الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetCurrentAdminUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetCurrentAdminUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetCurrentAdminUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تقرير يومي
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDailyReport(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDailyReport(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDailyReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary لوحة التحكم - الإحصائيات العامة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDashboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDashboard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلبات حذف البيانات
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDataDeletionRequests(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDataDeletionRequests(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDataDeletionRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات قاعدة البيانات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDatabaseStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDatabaseStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDatabaseStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل حضور السائق
         * @param {string} id 
         * @param {number} month 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriverAttendance(id: string, month: number, year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriverAttendance(id, month, year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriverAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل سائق محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriverDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriverDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriverDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مالية السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriverFinancials(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriverFinancials(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriverFinancials']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رصيد إجازات السائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriverLeaveBalance(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriverLeaveBalance(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriverLeaveBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أداء السائق
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriverPerformance(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriverPerformance(id, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriverPerformance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary السائقين حسب الحالة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriversByStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriversByStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriversByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary وثائق السائقين
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriversDocuments(status?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriversDocuments(status, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriversDocuments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات مالية السائقين
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriversFinance(startDate?: string, endDate?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversFinanceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriversFinance(startDate, endDate, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriversFinance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary دفعات السائقين
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriversPayouts(status?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversPayoutsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriversPayouts(status, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriversPayouts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ورديات السائقين
         * @param {string} [status] 
         * @param {string} [date] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriversShifts(status?: string, date?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversShiftsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriversShifts(status, date, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriversShifts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات إجازات السائقين
         * @param {number} [year] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetDriversVacationsStats(year?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversVacationsStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetDriversVacationsStats(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetDriversVacationsStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary محاولات كلمات المرور الفاشلة
         * @param {number} threshold 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetFailedPasswordAttempts(threshold: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetFailedPasswordAttempts(threshold, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetFailedPasswordAttempts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أعلام الميزات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetFeatureFlags(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetFeatureFlags(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetFeatureFlags']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الإحصائيات المالية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetFinancialStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetFinancialStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetFinancialStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلبات الإجازات
         * @param {string} status 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetLeaveRequests(status: string, page: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetLeaveRequests(status, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetLeaveRequests']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary المقاييس الحية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetLiveMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetLiveMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetLiveMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetMarketerDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetMarketerDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetMarketerDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أداء المسوق
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetMarketerPerformance(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetMarketerPerformance(id, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetMarketerPerformance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary متاجر المسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetMarketerStores(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetMarketerStores(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetMarketerStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات المسوقين
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetMarketersStatistics(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetMarketersStatistics(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetMarketersStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الأدوار والصلاحيات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetModules(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetModules(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetModules']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إجراءاتي في سجلات المراجعة
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetMyAuditActions(limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyAuditActionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetMyAuditActions(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetMyAuditActions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سائقو العمليات في الوقت الفعلي
         * @param {string} [area] 
         * @param {string} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetOpsDriversRealtime(area?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpsDriversRealtimeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetOpsDriversRealtime(area, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetOpsDriversRealtime']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary خريطة الحرارة للعمليات
         * @param {number} [hours] 
         * @param {string} [resolution] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetOpsHeatmap(hours?: number, resolution?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpsHeatmapResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetOpsHeatmap(hours, resolution, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetOpsHeatmap']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الطلبات حسب المدينة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetOrdersByCity(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetOrdersByCity(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetOrdersByCity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الطلبات حسب طريقة الدفع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetOrdersByPaymentMethod(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetOrdersByPaymentMethod(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetOrdersByPaymentMethod']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الطلبات حسب الحالة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetOrdersByStatus(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetOrdersByStatus(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetOrdersByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التفعيلات المعلقة
         * @param {AdminControllerGetPendingActivationsTypeEnum} [type] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetPendingActivations(type?: AdminControllerGetPendingActivationsTypeEnum, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PendingActivationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetPendingActivations(type, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetPendingActivations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التجار المعلقين
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetPendingVendors(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetPendingVendors(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetPendingVendors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلبات السحب المعلقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetPendingWithdrawals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetPendingWithdrawals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetPendingWithdrawals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مقاييس الجودة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetQualityMetrics(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetQualityMetrics(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetQualityMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحليلات الإيرادات
         * @param {string} period 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetRevenueAnalytics(period: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetRevenueAnalytics(period, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetRevenueAnalytics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الأدوار
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetRoles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetRoles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetRoles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إعدادات النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetSettings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات الدعم الفني
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetSupportStats(startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetSupportStats(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetSupportStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary صحة النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetSystemHealth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetSystemHealth(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetSystemHealth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مقاييس النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetSystemMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetSystemMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetSystemMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetTodayStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetTodayStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetTodayStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل مستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetUserDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetUserDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetUserDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل طلبات المستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetUserOrdersHistory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetUserOrdersHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetUserOrdersHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب المستخدمين
         * @param {string} search 
         * @param {boolean} isActive 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetUsers(search: string, isActive: boolean, page: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetUsers(search, isActive, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary قائمة التجار
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetVendorsList(status?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetVendorsList(status, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetVendorsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary كوبونات المحفظة
         * @param {string} [status] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetWalletCoupons(status?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletCouponsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetWalletCoupons(status, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetWalletCoupons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب طلبات السحب
         * @param {string} status 
         * @param {string} userModel 
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerGetWithdrawals(status: string, userModel: string, page: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerGetWithdrawals(status, userModel, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerGetWithdrawals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary قائمة النسخ الاحتياطية
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerListBackups(page: number, limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerListBackups(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerListBackups']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض حذف البيانات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerRejectDataDeletion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerRejectDataDeletion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerRejectDataDeletion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerRejectLeaveRequest(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerRejectLeaveRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerRejectLeaveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerRejectVendor(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerRejectVendor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerRejectVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض طلب سحب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerRejectWithdrawal(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerRejectWithdrawal(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerRejectWithdrawal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إعادة تعيين كلمة مرور مستخدم
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerResetUserPassword(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerResetUserPassword(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerResetUserPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary استعادة نسخة احتياطية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerRestoreBackup(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerRestoreBackup(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerRestoreBackup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تشغيل حسابات المالية
         * @param {FinanceCalculationRequest} financeCalculationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerRunFinanceCalculations(financeCalculationRequest: FinanceCalculationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinanceCalculationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerRunFinanceCalculations(financeCalculationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerRunFinanceCalculations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعليق تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerSuspendVendor(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerSuspendVendor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerSuspendVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء حظر سائق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUnbanDriver(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUnbanDriver(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUnbanDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء حظر مستخدم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUnbanUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUnbanUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUnbanUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary فتح حساب مقفل
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUnlockAccount(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUnlockAccount(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUnlockAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث إعدادات المظهر
         * @param {UpdateAppearanceSettingsRequest} updateAppearanceSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateAppearanceSettings(updateAppearanceSettingsRequest: UpdateAppearanceSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateAppearanceSettings(updateAppearanceSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateAppearanceSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث علم ميزة
         * @param {string} flag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateFeatureFlag(flag: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateFeatureFlag(flag, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateFeatureFlag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث مسوق
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateMarketer(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateMarketer(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateMarketer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث دور
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateRole(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateRole(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateRole']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث الإعدادات
         * @param {AdminControllerUpdateSettingsRequest} adminControllerUpdateSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminControllerUpdateSettings(adminControllerUpdateSettingsRequest: AdminControllerUpdateSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminControllerUpdateSettings(adminControllerUpdateSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminControllerUpdateSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * 
         * @summary تفعيل مسوق
         * @param {AdminApiAdminControllerActivateMarketerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerActivateMarketer(requestParameters: AdminApiAdminControllerActivateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerActivateMarketer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعديل حضور السائق
         * @param {AdminApiAdminControllerAdjustAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAdjustAttendance(requestParameters: AdminApiAdminControllerAdjustAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerAdjustAttendance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعديل رصيد السائق
         * @param {AdminApiAdminControllerAdjustDriverBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAdjustDriverBalance(requestParameters: AdminApiAdminControllerAdjustDriverBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerAdjustDriverBalance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعديل رصيد الإجازات
         * @param {AdminApiAdminControllerAdjustLeaveBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerAdjustLeaveBalance(requestParameters: AdminApiAdminControllerAdjustLeaveBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerAdjustLeaveBalance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على حذف البيانات
         * @param {AdminApiAdminControllerApproveDataDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveDataDeletion(requestParameters: AdminApiAdminControllerApproveDataDeletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerApproveDataDeletion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على طلب إجازة
         * @param {AdminApiAdminControllerApproveLeaveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveLeaveRequest(requestParameters: AdminApiAdminControllerApproveLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerApproveLeaveRequest(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على تاجر
         * @param {AdminApiAdminControllerApproveVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveVendor(requestParameters: AdminApiAdminControllerApproveVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerApproveVendor(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على طلب سحب
         * @param {AdminApiAdminControllerApproveWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerApproveWithdrawal(requestParameters: AdminApiAdminControllerApproveWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerApproveWithdrawal(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حظر سائق
         * @param {AdminApiAdminControllerBanDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerBanDriver(requestParameters: AdminApiAdminControllerBanDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerBanDriver(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حظر مستخدم
         * @param {AdminApiAdminControllerBanUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerBanUser(requestParameters: AdminApiAdminControllerBanUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerBanUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مسح الكاش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerClearCache(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerClearCache(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء مستخدم إداري جديد
         * @param {AdminApiAdminControllerCreateAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateAdmin(requestParameters: AdminApiAdminControllerCreateAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminCreationResponse> {
            return localVarFp.adminControllerCreateAdmin(requestParameters.createAdminRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء نسخة احتياطية
         * @param {AdminApiAdminControllerCreateBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateBackup(requestParameters: AdminApiAdminControllerCreateBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateBackup(requestParameters.adminControllerCreateBackupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء خطة عمولة جديدة
         * @param {AdminApiAdminControllerCreateCommissionPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateCommissionPlan(requestParameters: AdminApiAdminControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommissionPlanCreationResponse> {
            return localVarFp.adminControllerCreateCommissionPlan(requestParameters.createCommissionPlanRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة مسوق جديد
         * @param {AdminApiAdminControllerCreateMarketerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateMarketer(requestParameters: AdminApiAdminControllerCreateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateMarketer(requestParameters.adminControllerCreateMarketerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء دور
         * @param {AdminApiAdminControllerCreateRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerCreateRole(requestParameters: AdminApiAdminControllerCreateRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerCreateRole(requestParameters.adminControllerCreateRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعطيل مسوق
         * @param {AdminApiAdminControllerDeactivateMarketerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeactivateMarketer(requestParameters: AdminApiAdminControllerDeactivateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeactivateMarketer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف سائق
         * @param {AdminApiAdminControllerDeleteDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteDriver(requestParameters: AdminApiAdminControllerDeleteDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteDriver(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف أصل سائق
         * @param {AdminApiAdminControllerDeleteDriverAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteDriverAsset(requestParameters: AdminApiAdminControllerDeleteDriverAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteDriverAsset(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف طلب إجازة
         * @param {AdminApiAdminControllerDeleteLeaveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteLeaveRequest(requestParameters: AdminApiAdminControllerDeleteLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteLeaveRequest(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف وردية
         * @param {AdminApiAdminControllerDeleteShiftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDeleteShift(requestParameters: AdminApiAdminControllerDeleteShiftRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDeleteShift(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحميل نسخة احتياطية
         * @param {AdminApiAdminControllerDownloadBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerDownloadBackup(requestParameters: AdminApiAdminControllerDownloadBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerDownloadBackup(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تصدير المسوقين
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerExportMarketers(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerExportMarketers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تصدير تقارير
         * @param {AdminApiAdminControllerExportReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerExportReport(requestParameters: AdminApiAdminControllerExportReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerExportReport(requestParameters.type, requestParameters.format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قائمة المستخدمين الإداريين
         * @param {AdminApiAdminControllerGetAdminUsersListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAdminUsersList(requestParameters: AdminApiAdminControllerGetAdminUsersListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AdminUsersListResponse> {
            return localVarFp.adminControllerGetAdminUsersList(requestParameters.page, requestParameters.limit, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قائمة المستخدمين الإداريين
         * @param {AdminApiAdminControllerGetAdminsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAdminsList(requestParameters: AdminApiAdminControllerGetAdminsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AdminUsersListResponse> {
            return localVarFp.adminControllerGetAdminsList(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب كل السائقين
         * @param {AdminApiAdminControllerGetAllDriversRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllDrivers(requestParameters: AdminApiAdminControllerGetAllDriversRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetAllDrivers(requestParameters.status, requestParameters.isAvailable, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حضور جميع السائقين
         * @param {AdminApiAdminControllerGetAllDriversAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllDriversAttendance(requestParameters: AdminApiAdminControllerGetAllDriversAttendanceRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DriversAttendanceResponse> {
            return localVarFp.adminControllerGetAllDriversAttendance(requestParameters.date, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب المسوقين الميدانيين
         * @param {AdminApiAdminControllerGetAllMarketersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAllMarketers(requestParameters: AdminApiAdminControllerGetAllMarketersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetAllMarketers(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إعدادات المظهر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAppearanceSettings(options?: RawAxiosRequestConfig): AxiosPromise<AppearanceSettingsResponse> {
            return localVarFp.adminControllerGetAppearanceSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملخص الحضور لكل السائقين
         * @param {AdminApiAdminControllerGetAttendanceSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAttendanceSummary(requestParameters: AdminApiAdminControllerGetAttendanceSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetAttendanceSummary(requestParameters.date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل سجل مراجعة
         * @param {AdminApiAdminControllerGetAuditLogDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAuditLogDetails(requestParameters: AdminApiAdminControllerGetAuditLogDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetAuditLogDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجلات المراجعة
         * @param {AdminApiAdminControllerGetAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAuditLogs(requestParameters: AdminApiAdminControllerGetAuditLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetAuditLogs(requestParameters.action, requestParameters.userId, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات سجلات المراجعة
         * @param {AdminApiAdminControllerGetAuditLogsStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetAuditLogsStats(requestParameters: AdminApiAdminControllerGetAuditLogsStatsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AuditLogsStatsResponse> {
            return localVarFp.adminControllerGetAuditLogsStats(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات الكاش
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetCacheStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetCacheStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary بيانات المستخدم الإداري الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetCurrentAdminUser(options?: RawAxiosRequestConfig): AxiosPromise<AdminUserResponse> {
            return localVarFp.adminControllerGetCurrentAdminUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تقرير يومي
         * @param {AdminApiAdminControllerGetDailyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDailyReport(requestParameters: AdminApiAdminControllerGetDailyReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDailyReport(requestParameters.date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لوحة التحكم - الإحصائيات العامة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDashboard(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDashboard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلبات حذف البيانات
         * @param {AdminApiAdminControllerGetDataDeletionRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDataDeletionRequests(requestParameters: AdminApiAdminControllerGetDataDeletionRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDataDeletionRequests(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات قاعدة البيانات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDatabaseStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDatabaseStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل حضور السائق
         * @param {AdminApiAdminControllerGetDriverAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverAttendance(requestParameters: AdminApiAdminControllerGetDriverAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDriverAttendance(requestParameters.id, requestParameters.month, requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل سائق محدد
         * @param {AdminApiAdminControllerGetDriverDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverDetails(requestParameters: AdminApiAdminControllerGetDriverDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDriverDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مالية السائق
         * @param {AdminApiAdminControllerGetDriverFinancialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverFinancials(requestParameters: AdminApiAdminControllerGetDriverFinancialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDriverFinancials(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رصيد إجازات السائق
         * @param {AdminApiAdminControllerGetDriverLeaveBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverLeaveBalance(requestParameters: AdminApiAdminControllerGetDriverLeaveBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDriverLeaveBalance(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أداء السائق
         * @param {AdminApiAdminControllerGetDriverPerformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriverPerformance(requestParameters: AdminApiAdminControllerGetDriverPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDriverPerformance(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary السائقين حسب الحالة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversByStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetDriversByStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary وثائق السائقين
         * @param {AdminApiAdminControllerGetDriversDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversDocuments(requestParameters: AdminApiAdminControllerGetDriversDocumentsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DriversDocumentsResponse> {
            return localVarFp.adminControllerGetDriversDocuments(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات مالية السائقين
         * @param {AdminApiAdminControllerGetDriversFinanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversFinance(requestParameters: AdminApiAdminControllerGetDriversFinanceRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DriversFinanceResponse> {
            return localVarFp.adminControllerGetDriversFinance(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary دفعات السائقين
         * @param {AdminApiAdminControllerGetDriversPayoutsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversPayouts(requestParameters: AdminApiAdminControllerGetDriversPayoutsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DriversPayoutsResponse> {
            return localVarFp.adminControllerGetDriversPayouts(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ورديات السائقين
         * @param {AdminApiAdminControllerGetDriversShiftsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversShifts(requestParameters: AdminApiAdminControllerGetDriversShiftsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DriversShiftsResponse> {
            return localVarFp.adminControllerGetDriversShifts(requestParameters.status, requestParameters.date, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات إجازات السائقين
         * @param {AdminApiAdminControllerGetDriversVacationsStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetDriversVacationsStats(requestParameters: AdminApiAdminControllerGetDriversVacationsStatsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DriversVacationsStatsResponse> {
            return localVarFp.adminControllerGetDriversVacationsStats(requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary محاولات كلمات المرور الفاشلة
         * @param {AdminApiAdminControllerGetFailedPasswordAttemptsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetFailedPasswordAttempts(requestParameters: AdminApiAdminControllerGetFailedPasswordAttemptsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetFailedPasswordAttempts(requestParameters.threshold, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أعلام الميزات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetFeatureFlags(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetFeatureFlags(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الإحصائيات المالية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetFinancialStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetFinancialStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلبات الإجازات
         * @param {AdminApiAdminControllerGetLeaveRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetLeaveRequests(requestParameters: AdminApiAdminControllerGetLeaveRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetLeaveRequests(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary المقاييس الحية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetLiveMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetLiveMetrics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل مسوق
         * @param {AdminApiAdminControllerGetMarketerDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketerDetails(requestParameters: AdminApiAdminControllerGetMarketerDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetMarketerDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أداء المسوق
         * @param {AdminApiAdminControllerGetMarketerPerformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketerPerformance(requestParameters: AdminApiAdminControllerGetMarketerPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetMarketerPerformance(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary متاجر المسوق
         * @param {AdminApiAdminControllerGetMarketerStoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketerStores(requestParameters: AdminApiAdminControllerGetMarketerStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetMarketerStores(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات المسوقين
         * @param {AdminApiAdminControllerGetMarketersStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMarketersStatistics(requestParameters: AdminApiAdminControllerGetMarketersStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetMarketersStatistics(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الأدوار والصلاحيات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetModules(options?: RawAxiosRequestConfig): AxiosPromise<RolesResponse> {
            return localVarFp.adminControllerGetModules(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إجراءاتي في سجلات المراجعة
         * @param {AdminApiAdminControllerGetMyAuditActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetMyAuditActions(requestParameters: AdminApiAdminControllerGetMyAuditActionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MyAuditActionsResponse> {
            return localVarFp.adminControllerGetMyAuditActions(requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سائقو العمليات في الوقت الفعلي
         * @param {AdminApiAdminControllerGetOpsDriversRealtimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOpsDriversRealtime(requestParameters: AdminApiAdminControllerGetOpsDriversRealtimeRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OpsDriversRealtimeResponse> {
            return localVarFp.adminControllerGetOpsDriversRealtime(requestParameters.area, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary خريطة الحرارة للعمليات
         * @param {AdminApiAdminControllerGetOpsHeatmapRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOpsHeatmap(requestParameters: AdminApiAdminControllerGetOpsHeatmapRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OpsHeatmapResponse> {
            return localVarFp.adminControllerGetOpsHeatmap(requestParameters.hours, requestParameters.resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الطلبات حسب المدينة
         * @param {AdminApiAdminControllerGetOrdersByCityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOrdersByCity(requestParameters: AdminApiAdminControllerGetOrdersByCityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetOrdersByCity(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الطلبات حسب طريقة الدفع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOrdersByPaymentMethod(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetOrdersByPaymentMethod(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الطلبات حسب الحالة
         * @param {AdminApiAdminControllerGetOrdersByStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetOrdersByStatus(requestParameters: AdminApiAdminControllerGetOrdersByStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetOrdersByStatus(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التفعيلات المعلقة
         * @param {AdminApiAdminControllerGetPendingActivationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetPendingActivations(requestParameters: AdminApiAdminControllerGetPendingActivationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PendingActivationsResponse> {
            return localVarFp.adminControllerGetPendingActivations(requestParameters.type, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التجار المعلقين
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetPendingVendors(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetPendingVendors(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلبات السحب المعلقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetPendingWithdrawals(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetPendingWithdrawals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مقاييس الجودة
         * @param {AdminApiAdminControllerGetQualityMetricsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetQualityMetrics(requestParameters: AdminApiAdminControllerGetQualityMetricsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetQualityMetrics(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحليلات الإيرادات
         * @param {AdminApiAdminControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetRevenueAnalytics(requestParameters: AdminApiAdminControllerGetRevenueAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetRevenueAnalytics(requestParameters.period, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الأدوار
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetRoles(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetRoles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إعدادات النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSettings(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات الدعم الفني
         * @param {AdminApiAdminControllerGetSupportStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSupportStats(requestParameters: AdminApiAdminControllerGetSupportStatsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SupportStatsResponse> {
            return localVarFp.adminControllerGetSupportStats(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary صحة النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSystemHealth(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetSystemHealth(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مقاييس النظام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetSystemMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetSystemMetrics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetTodayStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetTodayStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل مستخدم
         * @param {AdminApiAdminControllerGetUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUserDetails(requestParameters: AdminApiAdminControllerGetUserDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetUserDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل طلبات المستخدم
         * @param {AdminApiAdminControllerGetUserOrdersHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUserOrdersHistory(requestParameters: AdminApiAdminControllerGetUserOrdersHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetUserOrdersHistory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب المستخدمين
         * @param {AdminApiAdminControllerGetUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetUsers(requestParameters: AdminApiAdminControllerGetUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetUsers(requestParameters.search, requestParameters.isActive, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قائمة التجار
         * @param {AdminApiAdminControllerGetVendorsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetVendorsList(requestParameters: AdminApiAdminControllerGetVendorsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<VendorsListResponse> {
            return localVarFp.adminControllerGetVendorsList(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary كوبونات المحفظة
         * @param {AdminApiAdminControllerGetWalletCouponsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetWalletCoupons(requestParameters: AdminApiAdminControllerGetWalletCouponsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<WalletCouponsResponse> {
            return localVarFp.adminControllerGetWalletCoupons(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب طلبات السحب
         * @param {AdminApiAdminControllerGetWithdrawalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerGetWithdrawals(requestParameters: AdminApiAdminControllerGetWithdrawalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerGetWithdrawals(requestParameters.status, requestParameters.userModel, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قائمة النسخ الاحتياطية
         * @param {AdminApiAdminControllerListBackupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerListBackups(requestParameters: AdminApiAdminControllerListBackupsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerListBackups(requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض حذف البيانات
         * @param {AdminApiAdminControllerRejectDataDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectDataDeletion(requestParameters: AdminApiAdminControllerRejectDataDeletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerRejectDataDeletion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض طلب إجازة
         * @param {AdminApiAdminControllerRejectLeaveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectLeaveRequest(requestParameters: AdminApiAdminControllerRejectLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerRejectLeaveRequest(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض تاجر
         * @param {AdminApiAdminControllerRejectVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectVendor(requestParameters: AdminApiAdminControllerRejectVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerRejectVendor(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض طلب سحب
         * @param {AdminApiAdminControllerRejectWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRejectWithdrawal(requestParameters: AdminApiAdminControllerRejectWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerRejectWithdrawal(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إعادة تعيين كلمة مرور مستخدم
         * @param {AdminApiAdminControllerResetUserPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerResetUserPassword(requestParameters: AdminApiAdminControllerResetUserPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerResetUserPassword(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary استعادة نسخة احتياطية
         * @param {AdminApiAdminControllerRestoreBackupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRestoreBackup(requestParameters: AdminApiAdminControllerRestoreBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerRestoreBackup(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تشغيل حسابات المالية
         * @param {AdminApiAdminControllerRunFinanceCalculationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerRunFinanceCalculations(requestParameters: AdminApiAdminControllerRunFinanceCalculationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FinanceCalculationResponse> {
            return localVarFp.adminControllerRunFinanceCalculations(requestParameters.financeCalculationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعليق تاجر
         * @param {AdminApiAdminControllerSuspendVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerSuspendVendor(requestParameters: AdminApiAdminControllerSuspendVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerSuspendVendor(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء حظر سائق
         * @param {AdminApiAdminControllerUnbanDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUnbanDriver(requestParameters: AdminApiAdminControllerUnbanDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUnbanDriver(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء حظر مستخدم
         * @param {AdminApiAdminControllerUnbanUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUnbanUser(requestParameters: AdminApiAdminControllerUnbanUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUnbanUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary فتح حساب مقفل
         * @param {AdminApiAdminControllerUnlockAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUnlockAccount(requestParameters: AdminApiAdminControllerUnlockAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUnlockAccount(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث إعدادات المظهر
         * @param {AdminApiAdminControllerUpdateAppearanceSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateAppearanceSettings(requestParameters: AdminApiAdminControllerUpdateAppearanceSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SettingsUpdateResponse> {
            return localVarFp.adminControllerUpdateAppearanceSettings(requestParameters.updateAppearanceSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث علم ميزة
         * @param {AdminApiAdminControllerUpdateFeatureFlagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateFeatureFlag(requestParameters: AdminApiAdminControllerUpdateFeatureFlagRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateFeatureFlag(requestParameters.flag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث مسوق
         * @param {AdminApiAdminControllerUpdateMarketerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateMarketer(requestParameters: AdminApiAdminControllerUpdateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateMarketer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث دور
         * @param {AdminApiAdminControllerUpdateRoleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateRole(requestParameters: AdminApiAdminControllerUpdateRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateRole(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث الإعدادات
         * @param {AdminApiAdminControllerUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminControllerUpdateSettings(requestParameters: AdminApiAdminControllerUpdateSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminControllerUpdateSettings(requestParameters.adminControllerUpdateSettingsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - interface
 */
export interface AdminApiInterface {
    /**
     * 
     * @summary تفعيل مسوق
     * @param {AdminApiAdminControllerActivateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerActivateMarketer(requestParameters: AdminApiAdminControllerActivateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعديل حضور السائق
     * @param {AdminApiAdminControllerAdjustAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerAdjustAttendance(requestParameters: AdminApiAdminControllerAdjustAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعديل رصيد السائق
     * @param {AdminApiAdminControllerAdjustDriverBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerAdjustDriverBalance(requestParameters: AdminApiAdminControllerAdjustDriverBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعديل رصيد الإجازات
     * @param {AdminApiAdminControllerAdjustLeaveBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerAdjustLeaveBalance(requestParameters: AdminApiAdminControllerAdjustLeaveBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على حذف البيانات
     * @param {AdminApiAdminControllerApproveDataDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerApproveDataDeletion(requestParameters: AdminApiAdminControllerApproveDataDeletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على طلب إجازة
     * @param {AdminApiAdminControllerApproveLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerApproveLeaveRequest(requestParameters: AdminApiAdminControllerApproveLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على تاجر
     * @param {AdminApiAdminControllerApproveVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerApproveVendor(requestParameters: AdminApiAdminControllerApproveVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على طلب سحب
     * @param {AdminApiAdminControllerApproveWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerApproveWithdrawal(requestParameters: AdminApiAdminControllerApproveWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حظر سائق
     * @param {AdminApiAdminControllerBanDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerBanDriver(requestParameters: AdminApiAdminControllerBanDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حظر مستخدم
     * @param {AdminApiAdminControllerBanUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerBanUser(requestParameters: AdminApiAdminControllerBanUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مسح الكاش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerClearCache(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء مستخدم إداري جديد
     * @param {AdminApiAdminControllerCreateAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateAdmin(requestParameters: AdminApiAdminControllerCreateAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminCreationResponse>;

    /**
     * 
     * @summary إنشاء نسخة احتياطية
     * @param {AdminApiAdminControllerCreateBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateBackup(requestParameters: AdminApiAdminControllerCreateBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء خطة عمولة جديدة
     * @param {AdminApiAdminControllerCreateCommissionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateCommissionPlan(requestParameters: AdminApiAdminControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommissionPlanCreationResponse>;

    /**
     * 
     * @summary إضافة مسوق جديد
     * @param {AdminApiAdminControllerCreateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateMarketer(requestParameters: AdminApiAdminControllerCreateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء دور
     * @param {AdminApiAdminControllerCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerCreateRole(requestParameters: AdminApiAdminControllerCreateRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعطيل مسوق
     * @param {AdminApiAdminControllerDeactivateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeactivateMarketer(requestParameters: AdminApiAdminControllerDeactivateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف سائق
     * @param {AdminApiAdminControllerDeleteDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeleteDriver(requestParameters: AdminApiAdminControllerDeleteDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف أصل سائق
     * @param {AdminApiAdminControllerDeleteDriverAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeleteDriverAsset(requestParameters: AdminApiAdminControllerDeleteDriverAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف طلب إجازة
     * @param {AdminApiAdminControllerDeleteLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeleteLeaveRequest(requestParameters: AdminApiAdminControllerDeleteLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف وردية
     * @param {AdminApiAdminControllerDeleteShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDeleteShift(requestParameters: AdminApiAdminControllerDeleteShiftRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحميل نسخة احتياطية
     * @param {AdminApiAdminControllerDownloadBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerDownloadBackup(requestParameters: AdminApiAdminControllerDownloadBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تصدير المسوقين
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerExportMarketers(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تصدير تقارير
     * @param {AdminApiAdminControllerExportReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerExportReport(requestParameters: AdminApiAdminControllerExportReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary قائمة المستخدمين الإداريين
     * @param {AdminApiAdminControllerGetAdminUsersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAdminUsersList(requestParameters?: AdminApiAdminControllerGetAdminUsersListRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminUsersListResponse>;

    /**
     * 
     * @summary قائمة المستخدمين الإداريين
     * @param {AdminApiAdminControllerGetAdminsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAdminsList(requestParameters?: AdminApiAdminControllerGetAdminsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<AdminUsersListResponse>;

    /**
     * 
     * @summary جلب كل السائقين
     * @param {AdminApiAdminControllerGetAllDriversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAllDrivers(requestParameters: AdminApiAdminControllerGetAllDriversRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حضور جميع السائقين
     * @param {AdminApiAdminControllerGetAllDriversAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAllDriversAttendance(requestParameters?: AdminApiAdminControllerGetAllDriversAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DriversAttendanceResponse>;

    /**
     * 
     * @summary جلب المسوقين الميدانيين
     * @param {AdminApiAdminControllerGetAllMarketersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAllMarketers(requestParameters: AdminApiAdminControllerGetAllMarketersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إعدادات المظهر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAppearanceSettings(options?: RawAxiosRequestConfig): AxiosPromise<AppearanceSettingsResponse>;

    /**
     * 
     * @summary ملخص الحضور لكل السائقين
     * @param {AdminApiAdminControllerGetAttendanceSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAttendanceSummary(requestParameters: AdminApiAdminControllerGetAttendanceSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل سجل مراجعة
     * @param {AdminApiAdminControllerGetAuditLogDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAuditLogDetails(requestParameters: AdminApiAdminControllerGetAuditLogDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجلات المراجعة
     * @param {AdminApiAdminControllerGetAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAuditLogs(requestParameters: AdminApiAdminControllerGetAuditLogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات سجلات المراجعة
     * @param {AdminApiAdminControllerGetAuditLogsStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetAuditLogsStats(requestParameters?: AdminApiAdminControllerGetAuditLogsStatsRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuditLogsStatsResponse>;

    /**
     * 
     * @summary إحصائيات الكاش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetCacheStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary بيانات المستخدم الإداري الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetCurrentAdminUser(options?: RawAxiosRequestConfig): AxiosPromise<AdminUserResponse>;

    /**
     * 
     * @summary تقرير يومي
     * @param {AdminApiAdminControllerGetDailyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDailyReport(requestParameters: AdminApiAdminControllerGetDailyReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لوحة التحكم - الإحصائيات العامة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDashboard(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلبات حذف البيانات
     * @param {AdminApiAdminControllerGetDataDeletionRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDataDeletionRequests(requestParameters: AdminApiAdminControllerGetDataDeletionRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات قاعدة البيانات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDatabaseStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل حضور السائق
     * @param {AdminApiAdminControllerGetDriverAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriverAttendance(requestParameters: AdminApiAdminControllerGetDriverAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل سائق محدد
     * @param {AdminApiAdminControllerGetDriverDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriverDetails(requestParameters: AdminApiAdminControllerGetDriverDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مالية السائق
     * @param {AdminApiAdminControllerGetDriverFinancialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriverFinancials(requestParameters: AdminApiAdminControllerGetDriverFinancialsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رصيد إجازات السائق
     * @param {AdminApiAdminControllerGetDriverLeaveBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriverLeaveBalance(requestParameters: AdminApiAdminControllerGetDriverLeaveBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أداء السائق
     * @param {AdminApiAdminControllerGetDriverPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriverPerformance(requestParameters: AdminApiAdminControllerGetDriverPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary السائقين حسب الحالة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriversByStatus(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary وثائق السائقين
     * @param {AdminApiAdminControllerGetDriversDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriversDocuments(requestParameters?: AdminApiAdminControllerGetDriversDocumentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DriversDocumentsResponse>;

    /**
     * 
     * @summary إحصائيات مالية السائقين
     * @param {AdminApiAdminControllerGetDriversFinanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriversFinance(requestParameters?: AdminApiAdminControllerGetDriversFinanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DriversFinanceResponse>;

    /**
     * 
     * @summary دفعات السائقين
     * @param {AdminApiAdminControllerGetDriversPayoutsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriversPayouts(requestParameters?: AdminApiAdminControllerGetDriversPayoutsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DriversPayoutsResponse>;

    /**
     * 
     * @summary ورديات السائقين
     * @param {AdminApiAdminControllerGetDriversShiftsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriversShifts(requestParameters?: AdminApiAdminControllerGetDriversShiftsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DriversShiftsResponse>;

    /**
     * 
     * @summary إحصائيات إجازات السائقين
     * @param {AdminApiAdminControllerGetDriversVacationsStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetDriversVacationsStats(requestParameters?: AdminApiAdminControllerGetDriversVacationsStatsRequest, options?: RawAxiosRequestConfig): AxiosPromise<DriversVacationsStatsResponse>;

    /**
     * 
     * @summary محاولات كلمات المرور الفاشلة
     * @param {AdminApiAdminControllerGetFailedPasswordAttemptsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetFailedPasswordAttempts(requestParameters: AdminApiAdminControllerGetFailedPasswordAttemptsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أعلام الميزات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetFeatureFlags(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الإحصائيات المالية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetFinancialStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلبات الإجازات
     * @param {AdminApiAdminControllerGetLeaveRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetLeaveRequests(requestParameters: AdminApiAdminControllerGetLeaveRequestsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary المقاييس الحية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetLiveMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل مسوق
     * @param {AdminApiAdminControllerGetMarketerDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetMarketerDetails(requestParameters: AdminApiAdminControllerGetMarketerDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أداء المسوق
     * @param {AdminApiAdminControllerGetMarketerPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetMarketerPerformance(requestParameters: AdminApiAdminControllerGetMarketerPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary متاجر المسوق
     * @param {AdminApiAdminControllerGetMarketerStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetMarketerStores(requestParameters: AdminApiAdminControllerGetMarketerStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات المسوقين
     * @param {AdminApiAdminControllerGetMarketersStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetMarketersStatistics(requestParameters: AdminApiAdminControllerGetMarketersStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الأدوار والصلاحيات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetModules(options?: RawAxiosRequestConfig): AxiosPromise<RolesResponse>;

    /**
     * 
     * @summary إجراءاتي في سجلات المراجعة
     * @param {AdminApiAdminControllerGetMyAuditActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetMyAuditActions(requestParameters?: AdminApiAdminControllerGetMyAuditActionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<MyAuditActionsResponse>;

    /**
     * 
     * @summary سائقو العمليات في الوقت الفعلي
     * @param {AdminApiAdminControllerGetOpsDriversRealtimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetOpsDriversRealtime(requestParameters?: AdminApiAdminControllerGetOpsDriversRealtimeRequest, options?: RawAxiosRequestConfig): AxiosPromise<OpsDriversRealtimeResponse>;

    /**
     * 
     * @summary خريطة الحرارة للعمليات
     * @param {AdminApiAdminControllerGetOpsHeatmapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetOpsHeatmap(requestParameters?: AdminApiAdminControllerGetOpsHeatmapRequest, options?: RawAxiosRequestConfig): AxiosPromise<OpsHeatmapResponse>;

    /**
     * 
     * @summary الطلبات حسب المدينة
     * @param {AdminApiAdminControllerGetOrdersByCityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetOrdersByCity(requestParameters: AdminApiAdminControllerGetOrdersByCityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الطلبات حسب طريقة الدفع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetOrdersByPaymentMethod(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الطلبات حسب الحالة
     * @param {AdminApiAdminControllerGetOrdersByStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetOrdersByStatus(requestParameters: AdminApiAdminControllerGetOrdersByStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التفعيلات المعلقة
     * @param {AdminApiAdminControllerGetPendingActivationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetPendingActivations(requestParameters?: AdminApiAdminControllerGetPendingActivationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<PendingActivationsResponse>;

    /**
     * 
     * @summary التجار المعلقين
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetPendingVendors(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلبات السحب المعلقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetPendingWithdrawals(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مقاييس الجودة
     * @param {AdminApiAdminControllerGetQualityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetQualityMetrics(requestParameters: AdminApiAdminControllerGetQualityMetricsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحليلات الإيرادات
     * @param {AdminApiAdminControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetRevenueAnalytics(requestParameters: AdminApiAdminControllerGetRevenueAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الأدوار
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetRoles(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إعدادات النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetSettings(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات الدعم الفني
     * @param {AdminApiAdminControllerGetSupportStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetSupportStats(requestParameters?: AdminApiAdminControllerGetSupportStatsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SupportStatsResponse>;

    /**
     * 
     * @summary صحة النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetSystemHealth(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مقاييس النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetSystemMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetTodayStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل مستخدم
     * @param {AdminApiAdminControllerGetUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetUserDetails(requestParameters: AdminApiAdminControllerGetUserDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل طلبات المستخدم
     * @param {AdminApiAdminControllerGetUserOrdersHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetUserOrdersHistory(requestParameters: AdminApiAdminControllerGetUserOrdersHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب المستخدمين
     * @param {AdminApiAdminControllerGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetUsers(requestParameters: AdminApiAdminControllerGetUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary قائمة التجار
     * @param {AdminApiAdminControllerGetVendorsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetVendorsList(requestParameters?: AdminApiAdminControllerGetVendorsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<VendorsListResponse>;

    /**
     * 
     * @summary كوبونات المحفظة
     * @param {AdminApiAdminControllerGetWalletCouponsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetWalletCoupons(requestParameters?: AdminApiAdminControllerGetWalletCouponsRequest, options?: RawAxiosRequestConfig): AxiosPromise<WalletCouponsResponse>;

    /**
     * 
     * @summary جلب طلبات السحب
     * @param {AdminApiAdminControllerGetWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerGetWithdrawals(requestParameters: AdminApiAdminControllerGetWithdrawalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary قائمة النسخ الاحتياطية
     * @param {AdminApiAdminControllerListBackupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerListBackups(requestParameters: AdminApiAdminControllerListBackupsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض حذف البيانات
     * @param {AdminApiAdminControllerRejectDataDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerRejectDataDeletion(requestParameters: AdminApiAdminControllerRejectDataDeletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض طلب إجازة
     * @param {AdminApiAdminControllerRejectLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerRejectLeaveRequest(requestParameters: AdminApiAdminControllerRejectLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض تاجر
     * @param {AdminApiAdminControllerRejectVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerRejectVendor(requestParameters: AdminApiAdminControllerRejectVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض طلب سحب
     * @param {AdminApiAdminControllerRejectWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerRejectWithdrawal(requestParameters: AdminApiAdminControllerRejectWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إعادة تعيين كلمة مرور مستخدم
     * @param {AdminApiAdminControllerResetUserPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerResetUserPassword(requestParameters: AdminApiAdminControllerResetUserPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary استعادة نسخة احتياطية
     * @param {AdminApiAdminControllerRestoreBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerRestoreBackup(requestParameters: AdminApiAdminControllerRestoreBackupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تشغيل حسابات المالية
     * @param {AdminApiAdminControllerRunFinanceCalculationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerRunFinanceCalculations(requestParameters: AdminApiAdminControllerRunFinanceCalculationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FinanceCalculationResponse>;

    /**
     * 
     * @summary تعليق تاجر
     * @param {AdminApiAdminControllerSuspendVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerSuspendVendor(requestParameters: AdminApiAdminControllerSuspendVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء حظر سائق
     * @param {AdminApiAdminControllerUnbanDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUnbanDriver(requestParameters: AdminApiAdminControllerUnbanDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء حظر مستخدم
     * @param {AdminApiAdminControllerUnbanUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUnbanUser(requestParameters: AdminApiAdminControllerUnbanUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary فتح حساب مقفل
     * @param {AdminApiAdminControllerUnlockAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUnlockAccount(requestParameters: AdminApiAdminControllerUnlockAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث إعدادات المظهر
     * @param {AdminApiAdminControllerUpdateAppearanceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateAppearanceSettings(requestParameters: AdminApiAdminControllerUpdateAppearanceSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<SettingsUpdateResponse>;

    /**
     * 
     * @summary تحديث علم ميزة
     * @param {AdminApiAdminControllerUpdateFeatureFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateFeatureFlag(requestParameters: AdminApiAdminControllerUpdateFeatureFlagRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث مسوق
     * @param {AdminApiAdminControllerUpdateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateMarketer(requestParameters: AdminApiAdminControllerUpdateMarketerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث دور
     * @param {AdminApiAdminControllerUpdateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateRole(requestParameters: AdminApiAdminControllerUpdateRoleRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث الإعدادات
     * @param {AdminApiAdminControllerUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminControllerUpdateSettings(requestParameters: AdminApiAdminControllerUpdateSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for adminControllerActivateMarketer operation in AdminApi.
 */
export interface AdminApiAdminControllerActivateMarketerRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerAdjustAttendance operation in AdminApi.
 */
export interface AdminApiAdminControllerAdjustAttendanceRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerAdjustDriverBalance operation in AdminApi.
 */
export interface AdminApiAdminControllerAdjustDriverBalanceRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerAdjustLeaveBalance operation in AdminApi.
 */
export interface AdminApiAdminControllerAdjustLeaveBalanceRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerApproveDataDeletion operation in AdminApi.
 */
export interface AdminApiAdminControllerApproveDataDeletionRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerApproveLeaveRequest operation in AdminApi.
 */
export interface AdminApiAdminControllerApproveLeaveRequestRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerApproveVendor operation in AdminApi.
 */
export interface AdminApiAdminControllerApproveVendorRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerApproveWithdrawal operation in AdminApi.
 */
export interface AdminApiAdminControllerApproveWithdrawalRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerBanDriver operation in AdminApi.
 */
export interface AdminApiAdminControllerBanDriverRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerBanUser operation in AdminApi.
 */
export interface AdminApiAdminControllerBanUserRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerCreateAdmin operation in AdminApi.
 */
export interface AdminApiAdminControllerCreateAdminRequest {
    readonly createAdminRequest: CreateAdminRequest
}

/**
 * Request parameters for adminControllerCreateBackup operation in AdminApi.
 */
export interface AdminApiAdminControllerCreateBackupRequest {
    readonly adminControllerCreateBackupRequest: AdminControllerCreateBackupRequest
}

/**
 * Request parameters for adminControllerCreateCommissionPlan operation in AdminApi.
 */
export interface AdminApiAdminControllerCreateCommissionPlanRequest {
    readonly createCommissionPlanRequest: CreateCommissionPlanRequest
}

/**
 * Request parameters for adminControllerCreateMarketer operation in AdminApi.
 */
export interface AdminApiAdminControllerCreateMarketerRequest {
    readonly adminControllerCreateMarketerRequest: AdminControllerCreateMarketerRequest
}

/**
 * Request parameters for adminControllerCreateRole operation in AdminApi.
 */
export interface AdminApiAdminControllerCreateRoleRequest {
    readonly adminControllerCreateRoleRequest: AdminControllerCreateRoleRequest
}

/**
 * Request parameters for adminControllerDeactivateMarketer operation in AdminApi.
 */
export interface AdminApiAdminControllerDeactivateMarketerRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerDeleteDriver operation in AdminApi.
 */
export interface AdminApiAdminControllerDeleteDriverRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerDeleteDriverAsset operation in AdminApi.
 */
export interface AdminApiAdminControllerDeleteDriverAssetRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerDeleteLeaveRequest operation in AdminApi.
 */
export interface AdminApiAdminControllerDeleteLeaveRequestRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerDeleteShift operation in AdminApi.
 */
export interface AdminApiAdminControllerDeleteShiftRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerDownloadBackup operation in AdminApi.
 */
export interface AdminApiAdminControllerDownloadBackupRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerExportReport operation in AdminApi.
 */
export interface AdminApiAdminControllerExportReportRequest {
    readonly type: string

    readonly format: string
}

/**
 * Request parameters for adminControllerGetAdminUsersList operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAdminUsersListRequest {
    readonly page?: number

    readonly limit?: number

    readonly search?: string
}

/**
 * Request parameters for adminControllerGetAdminsList operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAdminsListRequest {
    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetAllDrivers operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAllDriversRequest {
    readonly status: string

    readonly isAvailable: boolean

    readonly page: number

    readonly limit: number
}

/**
 * Request parameters for adminControllerGetAllDriversAttendance operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAllDriversAttendanceRequest {
    readonly date?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetAllMarketers operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAllMarketersRequest {
    readonly status: string

    readonly page: number

    readonly limit: number
}

/**
 * Request parameters for adminControllerGetAttendanceSummary operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAttendanceSummaryRequest {
    readonly date: string
}

/**
 * Request parameters for adminControllerGetAuditLogDetails operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAuditLogDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetAuditLogs operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAuditLogsRequest {
    readonly action: string

    readonly userId: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetAuditLogsStats operation in AdminApi.
 */
export interface AdminApiAdminControllerGetAuditLogsStatsRequest {
    readonly startDate?: string

    readonly endDate?: string
}

/**
 * Request parameters for adminControllerGetDailyReport operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDailyReportRequest {
    readonly date: string
}

/**
 * Request parameters for adminControllerGetDataDeletionRequests operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDataDeletionRequestsRequest {
    readonly status: string
}

/**
 * Request parameters for adminControllerGetDriverAttendance operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriverAttendanceRequest {
    readonly id: string

    readonly month: number

    readonly year: number
}

/**
 * Request parameters for adminControllerGetDriverDetails operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriverDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetDriverFinancials operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriverFinancialsRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetDriverLeaveBalance operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriverLeaveBalanceRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetDriverPerformance operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriverPerformanceRequest {
    readonly id: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetDriversDocuments operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriversDocumentsRequest {
    readonly status?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetDriversFinance operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriversFinanceRequest {
    readonly startDate?: string

    readonly endDate?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetDriversPayouts operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriversPayoutsRequest {
    readonly status?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetDriversShifts operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriversShiftsRequest {
    readonly status?: string

    readonly date?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetDriversVacationsStats operation in AdminApi.
 */
export interface AdminApiAdminControllerGetDriversVacationsStatsRequest {
    readonly year?: number
}

/**
 * Request parameters for adminControllerGetFailedPasswordAttempts operation in AdminApi.
 */
export interface AdminApiAdminControllerGetFailedPasswordAttemptsRequest {
    readonly threshold: number
}

/**
 * Request parameters for adminControllerGetLeaveRequests operation in AdminApi.
 */
export interface AdminApiAdminControllerGetLeaveRequestsRequest {
    readonly status: string

    readonly page: number

    readonly limit: number
}

/**
 * Request parameters for adminControllerGetMarketerDetails operation in AdminApi.
 */
export interface AdminApiAdminControllerGetMarketerDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetMarketerPerformance operation in AdminApi.
 */
export interface AdminApiAdminControllerGetMarketerPerformanceRequest {
    readonly id: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetMarketerStores operation in AdminApi.
 */
export interface AdminApiAdminControllerGetMarketerStoresRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetMarketersStatistics operation in AdminApi.
 */
export interface AdminApiAdminControllerGetMarketersStatisticsRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetMyAuditActions operation in AdminApi.
 */
export interface AdminApiAdminControllerGetMyAuditActionsRequest {
    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetOpsDriversRealtime operation in AdminApi.
 */
export interface AdminApiAdminControllerGetOpsDriversRealtimeRequest {
    readonly area?: string

    readonly status?: string
}

/**
 * Request parameters for adminControllerGetOpsHeatmap operation in AdminApi.
 */
export interface AdminApiAdminControllerGetOpsHeatmapRequest {
    readonly hours?: number

    readonly resolution?: string
}

/**
 * Request parameters for adminControllerGetOrdersByCity operation in AdminApi.
 */
export interface AdminApiAdminControllerGetOrdersByCityRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetOrdersByStatus operation in AdminApi.
 */
export interface AdminApiAdminControllerGetOrdersByStatusRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetPendingActivations operation in AdminApi.
 */
export interface AdminApiAdminControllerGetPendingActivationsRequest {
    readonly type?: AdminControllerGetPendingActivationsTypeEnum

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetQualityMetrics operation in AdminApi.
 */
export interface AdminApiAdminControllerGetQualityMetricsRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetRevenueAnalytics operation in AdminApi.
 */
export interface AdminApiAdminControllerGetRevenueAnalyticsRequest {
    readonly period: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for adminControllerGetSupportStats operation in AdminApi.
 */
export interface AdminApiAdminControllerGetSupportStatsRequest {
    readonly startDate?: string

    readonly endDate?: string
}

/**
 * Request parameters for adminControllerGetUserDetails operation in AdminApi.
 */
export interface AdminApiAdminControllerGetUserDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetUserOrdersHistory operation in AdminApi.
 */
export interface AdminApiAdminControllerGetUserOrdersHistoryRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerGetUsers operation in AdminApi.
 */
export interface AdminApiAdminControllerGetUsersRequest {
    readonly search: string

    readonly isActive: boolean

    readonly page: number

    readonly limit: number
}

/**
 * Request parameters for adminControllerGetVendorsList operation in AdminApi.
 */
export interface AdminApiAdminControllerGetVendorsListRequest {
    readonly status?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetWalletCoupons operation in AdminApi.
 */
export interface AdminApiAdminControllerGetWalletCouponsRequest {
    readonly status?: string

    readonly page?: number

    readonly limit?: number
}

/**
 * Request parameters for adminControllerGetWithdrawals operation in AdminApi.
 */
export interface AdminApiAdminControllerGetWithdrawalsRequest {
    readonly status: string

    readonly userModel: string

    readonly page: number

    readonly limit: number
}

/**
 * Request parameters for adminControllerListBackups operation in AdminApi.
 */
export interface AdminApiAdminControllerListBackupsRequest {
    readonly page: number

    readonly limit: number
}

/**
 * Request parameters for adminControllerRejectDataDeletion operation in AdminApi.
 */
export interface AdminApiAdminControllerRejectDataDeletionRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerRejectLeaveRequest operation in AdminApi.
 */
export interface AdminApiAdminControllerRejectLeaveRequestRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerRejectVendor operation in AdminApi.
 */
export interface AdminApiAdminControllerRejectVendorRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerRejectWithdrawal operation in AdminApi.
 */
export interface AdminApiAdminControllerRejectWithdrawalRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerResetUserPassword operation in AdminApi.
 */
export interface AdminApiAdminControllerResetUserPasswordRequest {
    readonly userId: string
}

/**
 * Request parameters for adminControllerRestoreBackup operation in AdminApi.
 */
export interface AdminApiAdminControllerRestoreBackupRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerRunFinanceCalculations operation in AdminApi.
 */
export interface AdminApiAdminControllerRunFinanceCalculationsRequest {
    readonly financeCalculationRequest: FinanceCalculationRequest
}

/**
 * Request parameters for adminControllerSuspendVendor operation in AdminApi.
 */
export interface AdminApiAdminControllerSuspendVendorRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerUnbanDriver operation in AdminApi.
 */
export interface AdminApiAdminControllerUnbanDriverRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerUnbanUser operation in AdminApi.
 */
export interface AdminApiAdminControllerUnbanUserRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerUnlockAccount operation in AdminApi.
 */
export interface AdminApiAdminControllerUnlockAccountRequest {
    readonly userId: string
}

/**
 * Request parameters for adminControllerUpdateAppearanceSettings operation in AdminApi.
 */
export interface AdminApiAdminControllerUpdateAppearanceSettingsRequest {
    readonly updateAppearanceSettingsRequest: UpdateAppearanceSettingsRequest
}

/**
 * Request parameters for adminControllerUpdateFeatureFlag operation in AdminApi.
 */
export interface AdminApiAdminControllerUpdateFeatureFlagRequest {
    readonly flag: string
}

/**
 * Request parameters for adminControllerUpdateMarketer operation in AdminApi.
 */
export interface AdminApiAdminControllerUpdateMarketerRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerUpdateRole operation in AdminApi.
 */
export interface AdminApiAdminControllerUpdateRoleRequest {
    readonly id: string
}

/**
 * Request parameters for adminControllerUpdateSettings operation in AdminApi.
 */
export interface AdminApiAdminControllerUpdateSettingsRequest {
    readonly adminControllerUpdateSettingsRequest: AdminControllerUpdateSettingsRequest
}

/**
 * AdminApi - object-oriented interface
 */
export class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * 
     * @summary تفعيل مسوق
     * @param {AdminApiAdminControllerActivateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerActivateMarketer(requestParameters: AdminApiAdminControllerActivateMarketerRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerActivateMarketer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعديل حضور السائق
     * @param {AdminApiAdminControllerAdjustAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerAdjustAttendance(requestParameters: AdminApiAdminControllerAdjustAttendanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerAdjustAttendance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعديل رصيد السائق
     * @param {AdminApiAdminControllerAdjustDriverBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerAdjustDriverBalance(requestParameters: AdminApiAdminControllerAdjustDriverBalanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerAdjustDriverBalance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعديل رصيد الإجازات
     * @param {AdminApiAdminControllerAdjustLeaveBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerAdjustLeaveBalance(requestParameters: AdminApiAdminControllerAdjustLeaveBalanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerAdjustLeaveBalance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على حذف البيانات
     * @param {AdminApiAdminControllerApproveDataDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerApproveDataDeletion(requestParameters: AdminApiAdminControllerApproveDataDeletionRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerApproveDataDeletion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على طلب إجازة
     * @param {AdminApiAdminControllerApproveLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerApproveLeaveRequest(requestParameters: AdminApiAdminControllerApproveLeaveRequestRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerApproveLeaveRequest(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على تاجر
     * @param {AdminApiAdminControllerApproveVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerApproveVendor(requestParameters: AdminApiAdminControllerApproveVendorRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerApproveVendor(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على طلب سحب
     * @param {AdminApiAdminControllerApproveWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerApproveWithdrawal(requestParameters: AdminApiAdminControllerApproveWithdrawalRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerApproveWithdrawal(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حظر سائق
     * @param {AdminApiAdminControllerBanDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerBanDriver(requestParameters: AdminApiAdminControllerBanDriverRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerBanDriver(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حظر مستخدم
     * @param {AdminApiAdminControllerBanUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerBanUser(requestParameters: AdminApiAdminControllerBanUserRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerBanUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مسح الكاش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerClearCache(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerClearCache(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء مستخدم إداري جديد
     * @param {AdminApiAdminControllerCreateAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerCreateAdmin(requestParameters: AdminApiAdminControllerCreateAdminRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateAdmin(requestParameters.createAdminRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء نسخة احتياطية
     * @param {AdminApiAdminControllerCreateBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerCreateBackup(requestParameters: AdminApiAdminControllerCreateBackupRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateBackup(requestParameters.adminControllerCreateBackupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء خطة عمولة جديدة
     * @param {AdminApiAdminControllerCreateCommissionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerCreateCommissionPlan(requestParameters: AdminApiAdminControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateCommissionPlan(requestParameters.createCommissionPlanRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة مسوق جديد
     * @param {AdminApiAdminControllerCreateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerCreateMarketer(requestParameters: AdminApiAdminControllerCreateMarketerRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateMarketer(requestParameters.adminControllerCreateMarketerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء دور
     * @param {AdminApiAdminControllerCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerCreateRole(requestParameters: AdminApiAdminControllerCreateRoleRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerCreateRole(requestParameters.adminControllerCreateRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعطيل مسوق
     * @param {AdminApiAdminControllerDeactivateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerDeactivateMarketer(requestParameters: AdminApiAdminControllerDeactivateMarketerRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeactivateMarketer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف سائق
     * @param {AdminApiAdminControllerDeleteDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerDeleteDriver(requestParameters: AdminApiAdminControllerDeleteDriverRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteDriver(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف أصل سائق
     * @param {AdminApiAdminControllerDeleteDriverAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerDeleteDriverAsset(requestParameters: AdminApiAdminControllerDeleteDriverAssetRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteDriverAsset(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف طلب إجازة
     * @param {AdminApiAdminControllerDeleteLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerDeleteLeaveRequest(requestParameters: AdminApiAdminControllerDeleteLeaveRequestRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteLeaveRequest(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف وردية
     * @param {AdminApiAdminControllerDeleteShiftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerDeleteShift(requestParameters: AdminApiAdminControllerDeleteShiftRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDeleteShift(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحميل نسخة احتياطية
     * @param {AdminApiAdminControllerDownloadBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerDownloadBackup(requestParameters: AdminApiAdminControllerDownloadBackupRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerDownloadBackup(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تصدير المسوقين
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerExportMarketers(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerExportMarketers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تصدير تقارير
     * @param {AdminApiAdminControllerExportReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerExportReport(requestParameters: AdminApiAdminControllerExportReportRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerExportReport(requestParameters.type, requestParameters.format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قائمة المستخدمين الإداريين
     * @param {AdminApiAdminControllerGetAdminUsersListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAdminUsersList(requestParameters: AdminApiAdminControllerGetAdminUsersListRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAdminUsersList(requestParameters.page, requestParameters.limit, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قائمة المستخدمين الإداريين
     * @param {AdminApiAdminControllerGetAdminsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAdminsList(requestParameters: AdminApiAdminControllerGetAdminsListRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAdminsList(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب كل السائقين
     * @param {AdminApiAdminControllerGetAllDriversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAllDrivers(requestParameters: AdminApiAdminControllerGetAllDriversRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAllDrivers(requestParameters.status, requestParameters.isAvailable, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حضور جميع السائقين
     * @param {AdminApiAdminControllerGetAllDriversAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAllDriversAttendance(requestParameters: AdminApiAdminControllerGetAllDriversAttendanceRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAllDriversAttendance(requestParameters.date, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب المسوقين الميدانيين
     * @param {AdminApiAdminControllerGetAllMarketersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAllMarketers(requestParameters: AdminApiAdminControllerGetAllMarketersRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAllMarketers(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إعدادات المظهر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAppearanceSettings(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAppearanceSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملخص الحضور لكل السائقين
     * @param {AdminApiAdminControllerGetAttendanceSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAttendanceSummary(requestParameters: AdminApiAdminControllerGetAttendanceSummaryRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAttendanceSummary(requestParameters.date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل سجل مراجعة
     * @param {AdminApiAdminControllerGetAuditLogDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAuditLogDetails(requestParameters: AdminApiAdminControllerGetAuditLogDetailsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAuditLogDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجلات المراجعة
     * @param {AdminApiAdminControllerGetAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAuditLogs(requestParameters: AdminApiAdminControllerGetAuditLogsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAuditLogs(requestParameters.action, requestParameters.userId, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات سجلات المراجعة
     * @param {AdminApiAdminControllerGetAuditLogsStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetAuditLogsStats(requestParameters: AdminApiAdminControllerGetAuditLogsStatsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetAuditLogsStats(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات الكاش
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetCacheStats(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetCacheStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary بيانات المستخدم الإداري الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetCurrentAdminUser(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetCurrentAdminUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تقرير يومي
     * @param {AdminApiAdminControllerGetDailyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDailyReport(requestParameters: AdminApiAdminControllerGetDailyReportRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDailyReport(requestParameters.date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لوحة التحكم - الإحصائيات العامة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDashboard(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDashboard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلبات حذف البيانات
     * @param {AdminApiAdminControllerGetDataDeletionRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDataDeletionRequests(requestParameters: AdminApiAdminControllerGetDataDeletionRequestsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDataDeletionRequests(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات قاعدة البيانات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDatabaseStats(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDatabaseStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل حضور السائق
     * @param {AdminApiAdminControllerGetDriverAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriverAttendance(requestParameters: AdminApiAdminControllerGetDriverAttendanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriverAttendance(requestParameters.id, requestParameters.month, requestParameters.year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل سائق محدد
     * @param {AdminApiAdminControllerGetDriverDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriverDetails(requestParameters: AdminApiAdminControllerGetDriverDetailsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriverDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مالية السائق
     * @param {AdminApiAdminControllerGetDriverFinancialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriverFinancials(requestParameters: AdminApiAdminControllerGetDriverFinancialsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriverFinancials(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رصيد إجازات السائق
     * @param {AdminApiAdminControllerGetDriverLeaveBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriverLeaveBalance(requestParameters: AdminApiAdminControllerGetDriverLeaveBalanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriverLeaveBalance(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أداء السائق
     * @param {AdminApiAdminControllerGetDriverPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriverPerformance(requestParameters: AdminApiAdminControllerGetDriverPerformanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriverPerformance(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary السائقين حسب الحالة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriversByStatus(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriversByStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary وثائق السائقين
     * @param {AdminApiAdminControllerGetDriversDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriversDocuments(requestParameters: AdminApiAdminControllerGetDriversDocumentsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriversDocuments(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات مالية السائقين
     * @param {AdminApiAdminControllerGetDriversFinanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriversFinance(requestParameters: AdminApiAdminControllerGetDriversFinanceRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriversFinance(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary دفعات السائقين
     * @param {AdminApiAdminControllerGetDriversPayoutsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriversPayouts(requestParameters: AdminApiAdminControllerGetDriversPayoutsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriversPayouts(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ورديات السائقين
     * @param {AdminApiAdminControllerGetDriversShiftsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriversShifts(requestParameters: AdminApiAdminControllerGetDriversShiftsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriversShifts(requestParameters.status, requestParameters.date, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات إجازات السائقين
     * @param {AdminApiAdminControllerGetDriversVacationsStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetDriversVacationsStats(requestParameters: AdminApiAdminControllerGetDriversVacationsStatsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetDriversVacationsStats(requestParameters.year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary محاولات كلمات المرور الفاشلة
     * @param {AdminApiAdminControllerGetFailedPasswordAttemptsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetFailedPasswordAttempts(requestParameters: AdminApiAdminControllerGetFailedPasswordAttemptsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetFailedPasswordAttempts(requestParameters.threshold, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أعلام الميزات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetFeatureFlags(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetFeatureFlags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الإحصائيات المالية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetFinancialStats(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetFinancialStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلبات الإجازات
     * @param {AdminApiAdminControllerGetLeaveRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetLeaveRequests(requestParameters: AdminApiAdminControllerGetLeaveRequestsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetLeaveRequests(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary المقاييس الحية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetLiveMetrics(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetLiveMetrics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل مسوق
     * @param {AdminApiAdminControllerGetMarketerDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetMarketerDetails(requestParameters: AdminApiAdminControllerGetMarketerDetailsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetMarketerDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أداء المسوق
     * @param {AdminApiAdminControllerGetMarketerPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetMarketerPerformance(requestParameters: AdminApiAdminControllerGetMarketerPerformanceRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetMarketerPerformance(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary متاجر المسوق
     * @param {AdminApiAdminControllerGetMarketerStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetMarketerStores(requestParameters: AdminApiAdminControllerGetMarketerStoresRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetMarketerStores(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات المسوقين
     * @param {AdminApiAdminControllerGetMarketersStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetMarketersStatistics(requestParameters: AdminApiAdminControllerGetMarketersStatisticsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetMarketersStatistics(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الأدوار والصلاحيات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetModules(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetModules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إجراءاتي في سجلات المراجعة
     * @param {AdminApiAdminControllerGetMyAuditActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetMyAuditActions(requestParameters: AdminApiAdminControllerGetMyAuditActionsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetMyAuditActions(requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سائقو العمليات في الوقت الفعلي
     * @param {AdminApiAdminControllerGetOpsDriversRealtimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetOpsDriversRealtime(requestParameters: AdminApiAdminControllerGetOpsDriversRealtimeRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetOpsDriversRealtime(requestParameters.area, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary خريطة الحرارة للعمليات
     * @param {AdminApiAdminControllerGetOpsHeatmapRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetOpsHeatmap(requestParameters: AdminApiAdminControllerGetOpsHeatmapRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetOpsHeatmap(requestParameters.hours, requestParameters.resolution, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الطلبات حسب المدينة
     * @param {AdminApiAdminControllerGetOrdersByCityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetOrdersByCity(requestParameters: AdminApiAdminControllerGetOrdersByCityRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetOrdersByCity(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الطلبات حسب طريقة الدفع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetOrdersByPaymentMethod(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetOrdersByPaymentMethod(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الطلبات حسب الحالة
     * @param {AdminApiAdminControllerGetOrdersByStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetOrdersByStatus(requestParameters: AdminApiAdminControllerGetOrdersByStatusRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetOrdersByStatus(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التفعيلات المعلقة
     * @param {AdminApiAdminControllerGetPendingActivationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetPendingActivations(requestParameters: AdminApiAdminControllerGetPendingActivationsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetPendingActivations(requestParameters.type, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التجار المعلقين
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetPendingVendors(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetPendingVendors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلبات السحب المعلقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetPendingWithdrawals(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetPendingWithdrawals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مقاييس الجودة
     * @param {AdminApiAdminControllerGetQualityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetQualityMetrics(requestParameters: AdminApiAdminControllerGetQualityMetricsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetQualityMetrics(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحليلات الإيرادات
     * @param {AdminApiAdminControllerGetRevenueAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetRevenueAnalytics(requestParameters: AdminApiAdminControllerGetRevenueAnalyticsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetRevenueAnalytics(requestParameters.period, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الأدوار
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetRoles(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetRoles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إعدادات النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetSettings(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات الدعم الفني
     * @param {AdminApiAdminControllerGetSupportStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetSupportStats(requestParameters: AdminApiAdminControllerGetSupportStatsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetSupportStats(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary صحة النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetSystemHealth(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetSystemHealth(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مقاييس النظام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetSystemMetrics(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetSystemMetrics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetTodayStats(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetTodayStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل مستخدم
     * @param {AdminApiAdminControllerGetUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetUserDetails(requestParameters: AdminApiAdminControllerGetUserDetailsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetUserDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل طلبات المستخدم
     * @param {AdminApiAdminControllerGetUserOrdersHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetUserOrdersHistory(requestParameters: AdminApiAdminControllerGetUserOrdersHistoryRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetUserOrdersHistory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب المستخدمين
     * @param {AdminApiAdminControllerGetUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetUsers(requestParameters: AdminApiAdminControllerGetUsersRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetUsers(requestParameters.search, requestParameters.isActive, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قائمة التجار
     * @param {AdminApiAdminControllerGetVendorsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetVendorsList(requestParameters: AdminApiAdminControllerGetVendorsListRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetVendorsList(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary كوبونات المحفظة
     * @param {AdminApiAdminControllerGetWalletCouponsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetWalletCoupons(requestParameters: AdminApiAdminControllerGetWalletCouponsRequest = {}, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetWalletCoupons(requestParameters.status, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب طلبات السحب
     * @param {AdminApiAdminControllerGetWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerGetWithdrawals(requestParameters: AdminApiAdminControllerGetWithdrawalsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerGetWithdrawals(requestParameters.status, requestParameters.userModel, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قائمة النسخ الاحتياطية
     * @param {AdminApiAdminControllerListBackupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerListBackups(requestParameters: AdminApiAdminControllerListBackupsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerListBackups(requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض حذف البيانات
     * @param {AdminApiAdminControllerRejectDataDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerRejectDataDeletion(requestParameters: AdminApiAdminControllerRejectDataDeletionRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerRejectDataDeletion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض طلب إجازة
     * @param {AdminApiAdminControllerRejectLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerRejectLeaveRequest(requestParameters: AdminApiAdminControllerRejectLeaveRequestRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerRejectLeaveRequest(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض تاجر
     * @param {AdminApiAdminControllerRejectVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerRejectVendor(requestParameters: AdminApiAdminControllerRejectVendorRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerRejectVendor(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض طلب سحب
     * @param {AdminApiAdminControllerRejectWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerRejectWithdrawal(requestParameters: AdminApiAdminControllerRejectWithdrawalRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerRejectWithdrawal(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إعادة تعيين كلمة مرور مستخدم
     * @param {AdminApiAdminControllerResetUserPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerResetUserPassword(requestParameters: AdminApiAdminControllerResetUserPasswordRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerResetUserPassword(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary استعادة نسخة احتياطية
     * @param {AdminApiAdminControllerRestoreBackupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerRestoreBackup(requestParameters: AdminApiAdminControllerRestoreBackupRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerRestoreBackup(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تشغيل حسابات المالية
     * @param {AdminApiAdminControllerRunFinanceCalculationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerRunFinanceCalculations(requestParameters: AdminApiAdminControllerRunFinanceCalculationsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerRunFinanceCalculations(requestParameters.financeCalculationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعليق تاجر
     * @param {AdminApiAdminControllerSuspendVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerSuspendVendor(requestParameters: AdminApiAdminControllerSuspendVendorRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerSuspendVendor(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء حظر سائق
     * @param {AdminApiAdminControllerUnbanDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUnbanDriver(requestParameters: AdminApiAdminControllerUnbanDriverRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUnbanDriver(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء حظر مستخدم
     * @param {AdminApiAdminControllerUnbanUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUnbanUser(requestParameters: AdminApiAdminControllerUnbanUserRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUnbanUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary فتح حساب مقفل
     * @param {AdminApiAdminControllerUnlockAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUnlockAccount(requestParameters: AdminApiAdminControllerUnlockAccountRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUnlockAccount(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث إعدادات المظهر
     * @param {AdminApiAdminControllerUpdateAppearanceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUpdateAppearanceSettings(requestParameters: AdminApiAdminControllerUpdateAppearanceSettingsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateAppearanceSettings(requestParameters.updateAppearanceSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث علم ميزة
     * @param {AdminApiAdminControllerUpdateFeatureFlagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUpdateFeatureFlag(requestParameters: AdminApiAdminControllerUpdateFeatureFlagRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateFeatureFlag(requestParameters.flag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث مسوق
     * @param {AdminApiAdminControllerUpdateMarketerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUpdateMarketer(requestParameters: AdminApiAdminControllerUpdateMarketerRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateMarketer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث دور
     * @param {AdminApiAdminControllerUpdateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUpdateRole(requestParameters: AdminApiAdminControllerUpdateRoleRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateRole(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث الإعدادات
     * @param {AdminApiAdminControllerUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminControllerUpdateSettings(requestParameters: AdminApiAdminControllerUpdateSettingsRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminControllerUpdateSettings(requestParameters.adminControllerUpdateSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

export const AdminControllerGetPendingActivationsTypeEnum = {
    Stores: 'stores',
    Vendors: 'vendors'
} as const;
export type AdminControllerGetPendingActivationsTypeEnum = typeof AdminControllerGetPendingActivationsTypeEnum[keyof typeof AdminControllerGetPendingActivationsTypeEnum];


/**
 * AdminCMSApi - axios parameter creator
 */
export const AdminCMSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إضافة تخطيط للصفحة الرئيسية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerCreateHomeLayout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/home-layouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة شريحة أونبوردينج
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerCreateOnboardingSlide: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/onboarding-slides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة نص/ترجمة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerCreateString: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/strings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف قسيمة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteCoupon: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerDeleteCoupon', 'id', id)
            const localVarPath = `/admin/wallet/coupons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف تخطيط الصفحة الرئيسية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteHomeLayout: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerDeleteHomeLayout', 'id', id)
            const localVarPath = `/admin/home-layouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف شريحة أونبوردينج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteOnboardingSlide: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerDeleteOnboardingSlide', 'id', id)
            const localVarPath = `/admin/onboarding-slides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف صفحة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeletePage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerDeletePage', 'id', id)
            const localVarPath = `/admin/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف نص/ترجمة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteString: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerDeleteString', 'id', id)
            const localVarPath = `/admin/strings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف اشتراك
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteSubscription: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerDeleteSubscription', 'id', id)
            const localVarPath = `/admin/wallet/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تصدير تقرير
         * @param {string} id 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerExportReport: async (id: string, format: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerExportReport', 'id', id)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('adminCMSControllerExportReport', 'format', format)
            const localVarPath = `/admin/reports/export/{id}/{format}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تصدير التسويات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerExportSettlements: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/wallet/settlements/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء تقرير
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerGenerateReport: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/reports/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التقارير الفورية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerGetRealtimeReports: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/reports/realtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث تخطيط الصفحة الرئيسية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdateHomeLayout: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerUpdateHomeLayout', 'id', id)
            const localVarPath = `/admin/home-layouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث شريحة أونبوردينج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdateOnboardingSlide: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerUpdateOnboardingSlide', 'id', id)
            const localVarPath = `/admin/onboarding-slides/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث صفحة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdatePage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerUpdatePage', 'id', id)
            const localVarPath = `/admin/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث نص/ترجمة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdateString: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('adminCMSControllerUpdateString', 'id', id)
            const localVarPath = `/admin/strings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminCMSApi - functional programming interface
 */
export const AdminCMSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminCMSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إضافة تخطيط للصفحة الرئيسية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerCreateHomeLayout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerCreateHomeLayout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerCreateHomeLayout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة شريحة أونبوردينج
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerCreateOnboardingSlide(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerCreateOnboardingSlide(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerCreateOnboardingSlide']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة نص/ترجمة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerCreateString(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerCreateString(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerCreateString']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف قسيمة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerDeleteCoupon(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerDeleteCoupon(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerDeleteCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف تخطيط الصفحة الرئيسية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerDeleteHomeLayout(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerDeleteHomeLayout(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerDeleteHomeLayout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف شريحة أونبوردينج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerDeleteOnboardingSlide(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerDeleteOnboardingSlide(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerDeleteOnboardingSlide']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف صفحة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerDeletePage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerDeletePage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerDeletePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف نص/ترجمة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerDeleteString(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerDeleteString(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerDeleteString']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف اشتراك
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerDeleteSubscription(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerDeleteSubscription(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerDeleteSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تصدير تقرير
         * @param {string} id 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerExportReport(id: string, format: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerExportReport(id, format, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerExportReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تصدير التسويات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerExportSettlements(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerExportSettlements(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerExportSettlements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء تقرير
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerGenerateReport(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerGenerateReport(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerGenerateReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التقارير الفورية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerGetRealtimeReports(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerGetRealtimeReports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerGetRealtimeReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث تخطيط الصفحة الرئيسية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerUpdateHomeLayout(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerUpdateHomeLayout(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerUpdateHomeLayout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث شريحة أونبوردينج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerUpdateOnboardingSlide(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerUpdateOnboardingSlide(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerUpdateOnboardingSlide']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث صفحة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerUpdatePage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerUpdatePage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerUpdatePage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث نص/ترجمة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminCMSControllerUpdateString(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminCMSControllerUpdateString(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCMSApi.adminCMSControllerUpdateString']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminCMSApi - factory interface
 */
export const AdminCMSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminCMSApiFp(configuration)
    return {
        /**
         * 
         * @summary إضافة تخطيط للصفحة الرئيسية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerCreateHomeLayout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerCreateHomeLayout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة شريحة أونبوردينج
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerCreateOnboardingSlide(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerCreateOnboardingSlide(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة نص/ترجمة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerCreateString(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerCreateString(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف قسيمة
         * @param {AdminCMSApiAdminCMSControllerDeleteCouponRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteCoupon(requestParameters: AdminCMSApiAdminCMSControllerDeleteCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerDeleteCoupon(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف تخطيط الصفحة الرئيسية
         * @param {AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteHomeLayout(requestParameters: AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerDeleteHomeLayout(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف شريحة أونبوردينج
         * @param {AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteOnboardingSlide(requestParameters: AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerDeleteOnboardingSlide(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف صفحة
         * @param {AdminCMSApiAdminCMSControllerDeletePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeletePage(requestParameters: AdminCMSApiAdminCMSControllerDeletePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerDeletePage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف نص/ترجمة
         * @param {AdminCMSApiAdminCMSControllerDeleteStringRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteString(requestParameters: AdminCMSApiAdminCMSControllerDeleteStringRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerDeleteString(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف اشتراك
         * @param {AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerDeleteSubscription(requestParameters: AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerDeleteSubscription(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تصدير تقرير
         * @param {AdminCMSApiAdminCMSControllerExportReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerExportReport(requestParameters: AdminCMSApiAdminCMSControllerExportReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerExportReport(requestParameters.id, requestParameters.format, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تصدير التسويات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerExportSettlements(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerExportSettlements(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء تقرير
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerGenerateReport(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerGenerateReport(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التقارير الفورية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerGetRealtimeReports(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerGetRealtimeReports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث تخطيط الصفحة الرئيسية
         * @param {AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdateHomeLayout(requestParameters: AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerUpdateHomeLayout(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث شريحة أونبوردينج
         * @param {AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdateOnboardingSlide(requestParameters: AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerUpdateOnboardingSlide(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث صفحة
         * @param {AdminCMSApiAdminCMSControllerUpdatePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdatePage(requestParameters: AdminCMSApiAdminCMSControllerUpdatePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerUpdatePage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث نص/ترجمة
         * @param {AdminCMSApiAdminCMSControllerUpdateStringRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminCMSControllerUpdateString(requestParameters: AdminCMSApiAdminCMSControllerUpdateStringRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.adminCMSControllerUpdateString(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminCMSApi - interface
 */
export interface AdminCMSApiInterface {
    /**
     * 
     * @summary إضافة تخطيط للصفحة الرئيسية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerCreateHomeLayout(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة شريحة أونبوردينج
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerCreateOnboardingSlide(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة نص/ترجمة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerCreateString(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف قسيمة
     * @param {AdminCMSApiAdminCMSControllerDeleteCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerDeleteCoupon(requestParameters: AdminCMSApiAdminCMSControllerDeleteCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف تخطيط الصفحة الرئيسية
     * @param {AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerDeleteHomeLayout(requestParameters: AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف شريحة أونبوردينج
     * @param {AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerDeleteOnboardingSlide(requestParameters: AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف صفحة
     * @param {AdminCMSApiAdminCMSControllerDeletePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerDeletePage(requestParameters: AdminCMSApiAdminCMSControllerDeletePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف نص/ترجمة
     * @param {AdminCMSApiAdminCMSControllerDeleteStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerDeleteString(requestParameters: AdminCMSApiAdminCMSControllerDeleteStringRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف اشتراك
     * @param {AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerDeleteSubscription(requestParameters: AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تصدير تقرير
     * @param {AdminCMSApiAdminCMSControllerExportReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerExportReport(requestParameters: AdminCMSApiAdminCMSControllerExportReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تصدير التسويات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerExportSettlements(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء تقرير
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerGenerateReport(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التقارير الفورية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerGetRealtimeReports(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث تخطيط الصفحة الرئيسية
     * @param {AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerUpdateHomeLayout(requestParameters: AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث شريحة أونبوردينج
     * @param {AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerUpdateOnboardingSlide(requestParameters: AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث صفحة
     * @param {AdminCMSApiAdminCMSControllerUpdatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerUpdatePage(requestParameters: AdminCMSApiAdminCMSControllerUpdatePageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث نص/ترجمة
     * @param {AdminCMSApiAdminCMSControllerUpdateStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCMSControllerUpdateString(requestParameters: AdminCMSApiAdminCMSControllerUpdateStringRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for adminCMSControllerDeleteCoupon operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerDeleteCouponRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerDeleteHomeLayout operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerDeleteOnboardingSlide operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerDeletePage operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerDeletePageRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerDeleteString operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerDeleteStringRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerDeleteSubscription operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerExportReport operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerExportReportRequest {
    readonly id: string

    readonly format: string
}

/**
 * Request parameters for adminCMSControllerUpdateHomeLayout operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerUpdateOnboardingSlide operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerUpdatePage operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerUpdatePageRequest {
    readonly id: string
}

/**
 * Request parameters for adminCMSControllerUpdateString operation in AdminCMSApi.
 */
export interface AdminCMSApiAdminCMSControllerUpdateStringRequest {
    readonly id: string
}

/**
 * AdminCMSApi - object-oriented interface
 */
export class AdminCMSApi extends BaseAPI implements AdminCMSApiInterface {
    /**
     * 
     * @summary إضافة تخطيط للصفحة الرئيسية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerCreateHomeLayout(options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerCreateHomeLayout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة شريحة أونبوردينج
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerCreateOnboardingSlide(options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerCreateOnboardingSlide(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة نص/ترجمة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerCreateString(options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerCreateString(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف قسيمة
     * @param {AdminCMSApiAdminCMSControllerDeleteCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerDeleteCoupon(requestParameters: AdminCMSApiAdminCMSControllerDeleteCouponRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerDeleteCoupon(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف تخطيط الصفحة الرئيسية
     * @param {AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerDeleteHomeLayout(requestParameters: AdminCMSApiAdminCMSControllerDeleteHomeLayoutRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerDeleteHomeLayout(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف شريحة أونبوردينج
     * @param {AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerDeleteOnboardingSlide(requestParameters: AdminCMSApiAdminCMSControllerDeleteOnboardingSlideRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerDeleteOnboardingSlide(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف صفحة
     * @param {AdminCMSApiAdminCMSControllerDeletePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerDeletePage(requestParameters: AdminCMSApiAdminCMSControllerDeletePageRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerDeletePage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف نص/ترجمة
     * @param {AdminCMSApiAdminCMSControllerDeleteStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerDeleteString(requestParameters: AdminCMSApiAdminCMSControllerDeleteStringRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerDeleteString(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف اشتراك
     * @param {AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerDeleteSubscription(requestParameters: AdminCMSApiAdminCMSControllerDeleteSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerDeleteSubscription(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تصدير تقرير
     * @param {AdminCMSApiAdminCMSControllerExportReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerExportReport(requestParameters: AdminCMSApiAdminCMSControllerExportReportRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerExportReport(requestParameters.id, requestParameters.format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تصدير التسويات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerExportSettlements(options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerExportSettlements(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء تقرير
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerGenerateReport(options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerGenerateReport(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التقارير الفورية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerGetRealtimeReports(options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerGetRealtimeReports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث تخطيط الصفحة الرئيسية
     * @param {AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerUpdateHomeLayout(requestParameters: AdminCMSApiAdminCMSControllerUpdateHomeLayoutRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerUpdateHomeLayout(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث شريحة أونبوردينج
     * @param {AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerUpdateOnboardingSlide(requestParameters: AdminCMSApiAdminCMSControllerUpdateOnboardingSlideRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerUpdateOnboardingSlide(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث صفحة
     * @param {AdminCMSApiAdminCMSControllerUpdatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerUpdatePage(requestParameters: AdminCMSApiAdminCMSControllerUpdatePageRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerUpdatePage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث نص/ترجمة
     * @param {AdminCMSApiAdminCMSControllerUpdateStringRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public adminCMSControllerUpdateString(requestParameters: AdminCMSApiAdminCMSControllerUpdateStringRequest, options?: RawAxiosRequestConfig) {
        return AdminCMSApiFp(this.configuration).adminCMSControllerUpdateString(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminStoresApi - axios parameter creator
 */
export const AdminStoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تفعيل متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerActivateStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerActivateStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة متغير
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerAddProductVariant: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerAddProductVariant', 'id', id)
            const localVarPath = `/admin/stores/products/{id}/variants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerApproveStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerApproveStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء منتج
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateProduct: async (createProductDto: CreateProductDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProductDto' is not null or undefined
            assertParamExists('storeControllerCreateProduct', 'createProductDto', createProductDto)
            const localVarPath = `/admin/stores/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء متجر
         * @param {CreateStoreDto} createStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateStore: async (createStoreDto: CreateStoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStoreDto' is not null or undefined
            assertParamExists('storeControllerCreateStore', 'createStoreDto', createStoreDto)
            const localVarPath = `/admin/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعطيل متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeactivateStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerDeactivateStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/deactivate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeleteStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerDeleteStore', 'id', id)
            const localVarPath = `/admin/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب متجر محدد - الإدارة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerFindStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerFindStore', 'id', id)
            const localVarPath = `/admin/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب المتاجر - الإدارة
         * @param {string} isActive 
         * @param {string} usageType 
         * @param {string} q 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerFindStores: async (isActive: string, usageType: string, q: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isActive' is not null or undefined
            assertParamExists('storeControllerFindStores', 'isActive', isActive)
            // verify required parameter 'usageType' is not null or undefined
            assertParamExists('storeControllerFindStores', 'usageType', usageType)
            // verify required parameter 'q' is not null or undefined
            assertParamExists('storeControllerFindStores', 'q', q)
            const localVarPath = `/admin/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إغلاق قسري للمتجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerForceCloseStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerForceCloseStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/force-close`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary فتح قسري للمتجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerForceOpenStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerForceOpenStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/force-open`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary المتاجر المعلقة - تحتاج موافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetPendingStores: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/stores/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary متغيرات المنتج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetProductVariants: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerGetProductVariants', 'id', id)
            const localVarPath = `/admin/stores/products/{id}/variants`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب منتجات المتجر - الإدارة
         * @param {string} id 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetProducts: async (id: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerGetProducts', 'id', id)
            const localVarPath = `/admin/stores/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحليلات المتجر - الإدارة
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreAnalytics: async (id: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerGetStoreAnalytics', 'id', id)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('storeControllerGetStoreAnalytics', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('storeControllerGetStoreAnalytics', 'endDate', endDate)
            const localVarPath = `/admin/stores/{id}/analytics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جرد المتجر - الإدارة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreInventory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerGetStoreInventory', 'id', id)
            const localVarPath = `/admin/stores/{id}/inventory`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerRejectStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerRejectStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعليق متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerSuspendStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerSuspendStore', 'id', id)
            const localVarPath = `/admin/stores/{id}/suspend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث منتج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdateProduct: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerUpdateProduct', 'id', id)
            const localVarPath = `/admin/stores/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdateStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('storeControllerUpdateStore', 'id', id)
            const localVarPath = `/admin/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminStoresApi - functional programming interface
 */
export const AdminStoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminStoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تفعيل متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerActivateStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerActivateStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerActivateStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة متغير
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerAddProductVariant(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerAddProductVariant(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerAddProductVariant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerApproveStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerApproveStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerApproveStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء منتج
         * @param {CreateProductDto} createProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerCreateProduct(createProductDto: CreateProductDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerCreateProduct(createProductDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerCreateProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء متجر
         * @param {CreateStoreDto} createStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerCreateStore(createStoreDto: CreateStoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerCreateStore(createStoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerCreateStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعطيل متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerDeactivateStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerDeactivateStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerDeactivateStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerDeleteStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerDeleteStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerDeleteStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب متجر محدد - الإدارة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerFindStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerFindStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerFindStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب المتاجر - الإدارة
         * @param {string} isActive 
         * @param {string} usageType 
         * @param {string} q 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerFindStores(isActive: string, usageType: string, q: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerFindStores(isActive, usageType, q, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerFindStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إغلاق قسري للمتجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerForceCloseStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerForceCloseStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerForceCloseStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary فتح قسري للمتجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerForceOpenStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerForceOpenStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerForceOpenStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary المتاجر المعلقة - تحتاج موافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetPendingStores(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetPendingStores(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerGetPendingStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary متغيرات المنتج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetProductVariants(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetProductVariants(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerGetProductVariants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب منتجات المتجر - الإدارة
         * @param {string} id 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetProducts(id: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetProducts(id, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerGetProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحليلات المتجر - الإدارة
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetStoreAnalytics(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetStoreAnalytics(id, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerGetStoreAnalytics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جرد المتجر - الإدارة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerGetStoreInventory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerGetStoreInventory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerGetStoreInventory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerRejectStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerRejectStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerRejectStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعليق متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerSuspendStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerSuspendStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerSuspendStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث منتج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerUpdateProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerUpdateProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerUpdateProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeControllerUpdateStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeControllerUpdateStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminStoresApi.storeControllerUpdateStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminStoresApi - factory interface
 */
export const AdminStoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminStoresApiFp(configuration)
    return {
        /**
         * 
         * @summary تفعيل متجر
         * @param {AdminStoresApiStoreControllerActivateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerActivateStore(requestParameters: AdminStoresApiStoreControllerActivateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerActivateStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة متغير
         * @param {AdminStoresApiStoreControllerAddProductVariantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerAddProductVariant(requestParameters: AdminStoresApiStoreControllerAddProductVariantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerAddProductVariant(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على متجر
         * @param {AdminStoresApiStoreControllerApproveStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerApproveStore(requestParameters: AdminStoresApiStoreControllerApproveStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerApproveStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء منتج
         * @param {AdminStoresApiStoreControllerCreateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateProduct(requestParameters: AdminStoresApiStoreControllerCreateProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerCreateProduct(requestParameters.createProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء متجر
         * @param {AdminStoresApiStoreControllerCreateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerCreateStore(requestParameters: AdminStoresApiStoreControllerCreateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerCreateStore(requestParameters.createStoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعطيل متجر
         * @param {AdminStoresApiStoreControllerDeactivateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeactivateStore(requestParameters: AdminStoresApiStoreControllerDeactivateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerDeactivateStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف متجر
         * @param {AdminStoresApiStoreControllerDeleteStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerDeleteStore(requestParameters: AdminStoresApiStoreControllerDeleteStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerDeleteStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب متجر محدد - الإدارة
         * @param {AdminStoresApiStoreControllerFindStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerFindStore(requestParameters: AdminStoresApiStoreControllerFindStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerFindStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب المتاجر - الإدارة
         * @param {AdminStoresApiStoreControllerFindStoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerFindStores(requestParameters: AdminStoresApiStoreControllerFindStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerFindStores(requestParameters.isActive, requestParameters.usageType, requestParameters.q, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إغلاق قسري للمتجر
         * @param {AdminStoresApiStoreControllerForceCloseStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerForceCloseStore(requestParameters: AdminStoresApiStoreControllerForceCloseStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerForceCloseStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary فتح قسري للمتجر
         * @param {AdminStoresApiStoreControllerForceOpenStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerForceOpenStore(requestParameters: AdminStoresApiStoreControllerForceOpenStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerForceOpenStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary المتاجر المعلقة - تحتاج موافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetPendingStores(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerGetPendingStores(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary متغيرات المنتج
         * @param {AdminStoresApiStoreControllerGetProductVariantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetProductVariants(requestParameters: AdminStoresApiStoreControllerGetProductVariantsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerGetProductVariants(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب منتجات المتجر - الإدارة
         * @param {AdminStoresApiStoreControllerGetProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetProducts(requestParameters: AdminStoresApiStoreControllerGetProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerGetProducts(requestParameters.id, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحليلات المتجر - الإدارة
         * @param {AdminStoresApiStoreControllerGetStoreAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreAnalytics(requestParameters: AdminStoresApiStoreControllerGetStoreAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerGetStoreAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جرد المتجر - الإدارة
         * @param {AdminStoresApiStoreControllerGetStoreInventoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerGetStoreInventory(requestParameters: AdminStoresApiStoreControllerGetStoreInventoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerGetStoreInventory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض متجر
         * @param {AdminStoresApiStoreControllerRejectStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerRejectStore(requestParameters: AdminStoresApiStoreControllerRejectStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerRejectStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعليق متجر
         * @param {AdminStoresApiStoreControllerSuspendStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerSuspendStore(requestParameters: AdminStoresApiStoreControllerSuspendStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerSuspendStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث منتج
         * @param {AdminStoresApiStoreControllerUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdateProduct(requestParameters: AdminStoresApiStoreControllerUpdateProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerUpdateProduct(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث متجر
         * @param {AdminStoresApiStoreControllerUpdateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeControllerUpdateStore(requestParameters: AdminStoresApiStoreControllerUpdateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeControllerUpdateStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminStoresApi - interface
 */
export interface AdminStoresApiInterface {
    /**
     * 
     * @summary تفعيل متجر
     * @param {AdminStoresApiStoreControllerActivateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerActivateStore(requestParameters: AdminStoresApiStoreControllerActivateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة متغير
     * @param {AdminStoresApiStoreControllerAddProductVariantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerAddProductVariant(requestParameters: AdminStoresApiStoreControllerAddProductVariantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على متجر
     * @param {AdminStoresApiStoreControllerApproveStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerApproveStore(requestParameters: AdminStoresApiStoreControllerApproveStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء منتج
     * @param {AdminStoresApiStoreControllerCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerCreateProduct(requestParameters: AdminStoresApiStoreControllerCreateProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء متجر
     * @param {AdminStoresApiStoreControllerCreateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerCreateStore(requestParameters: AdminStoresApiStoreControllerCreateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعطيل متجر
     * @param {AdminStoresApiStoreControllerDeactivateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerDeactivateStore(requestParameters: AdminStoresApiStoreControllerDeactivateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف متجر
     * @param {AdminStoresApiStoreControllerDeleteStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerDeleteStore(requestParameters: AdminStoresApiStoreControllerDeleteStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب متجر محدد - الإدارة
     * @param {AdminStoresApiStoreControllerFindStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerFindStore(requestParameters: AdminStoresApiStoreControllerFindStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب المتاجر - الإدارة
     * @param {AdminStoresApiStoreControllerFindStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerFindStores(requestParameters: AdminStoresApiStoreControllerFindStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إغلاق قسري للمتجر
     * @param {AdminStoresApiStoreControllerForceCloseStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerForceCloseStore(requestParameters: AdminStoresApiStoreControllerForceCloseStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary فتح قسري للمتجر
     * @param {AdminStoresApiStoreControllerForceOpenStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerForceOpenStore(requestParameters: AdminStoresApiStoreControllerForceOpenStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary المتاجر المعلقة - تحتاج موافقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerGetPendingStores(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary متغيرات المنتج
     * @param {AdminStoresApiStoreControllerGetProductVariantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerGetProductVariants(requestParameters: AdminStoresApiStoreControllerGetProductVariantsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب منتجات المتجر - الإدارة
     * @param {AdminStoresApiStoreControllerGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerGetProducts(requestParameters: AdminStoresApiStoreControllerGetProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحليلات المتجر - الإدارة
     * @param {AdminStoresApiStoreControllerGetStoreAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerGetStoreAnalytics(requestParameters: AdminStoresApiStoreControllerGetStoreAnalyticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جرد المتجر - الإدارة
     * @param {AdminStoresApiStoreControllerGetStoreInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerGetStoreInventory(requestParameters: AdminStoresApiStoreControllerGetStoreInventoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض متجر
     * @param {AdminStoresApiStoreControllerRejectStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerRejectStore(requestParameters: AdminStoresApiStoreControllerRejectStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعليق متجر
     * @param {AdminStoresApiStoreControllerSuspendStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerSuspendStore(requestParameters: AdminStoresApiStoreControllerSuspendStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث منتج
     * @param {AdminStoresApiStoreControllerUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerUpdateProduct(requestParameters: AdminStoresApiStoreControllerUpdateProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث متجر
     * @param {AdminStoresApiStoreControllerUpdateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    storeControllerUpdateStore(requestParameters: AdminStoresApiStoreControllerUpdateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for storeControllerActivateStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerActivateStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerAddProductVariant operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerAddProductVariantRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerApproveStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerApproveStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerCreateProduct operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerCreateProductRequest {
    readonly createProductDto: CreateProductDto
}

/**
 * Request parameters for storeControllerCreateStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerCreateStoreRequest {
    readonly createStoreDto: CreateStoreDto
}

/**
 * Request parameters for storeControllerDeactivateStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerDeactivateStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerDeleteStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerDeleteStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerFindStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerFindStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerFindStores operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerFindStoresRequest {
    readonly isActive: string

    readonly usageType: string

    readonly q: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for storeControllerForceCloseStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerForceCloseStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerForceOpenStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerForceOpenStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerGetProductVariants operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerGetProductVariantsRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerGetProducts operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerGetProductsRequest {
    readonly id: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for storeControllerGetStoreAnalytics operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerGetStoreAnalyticsRequest {
    readonly id: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for storeControllerGetStoreInventory operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerGetStoreInventoryRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerRejectStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerRejectStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerSuspendStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerSuspendStoreRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerUpdateProduct operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerUpdateProductRequest {
    readonly id: string
}

/**
 * Request parameters for storeControllerUpdateStore operation in AdminStoresApi.
 */
export interface AdminStoresApiStoreControllerUpdateStoreRequest {
    readonly id: string
}

/**
 * AdminStoresApi - object-oriented interface
 */
export class AdminStoresApi extends BaseAPI implements AdminStoresApiInterface {
    /**
     * 
     * @summary تفعيل متجر
     * @param {AdminStoresApiStoreControllerActivateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerActivateStore(requestParameters: AdminStoresApiStoreControllerActivateStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerActivateStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة متغير
     * @param {AdminStoresApiStoreControllerAddProductVariantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerAddProductVariant(requestParameters: AdminStoresApiStoreControllerAddProductVariantRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerAddProductVariant(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على متجر
     * @param {AdminStoresApiStoreControllerApproveStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerApproveStore(requestParameters: AdminStoresApiStoreControllerApproveStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerApproveStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء منتج
     * @param {AdminStoresApiStoreControllerCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerCreateProduct(requestParameters: AdminStoresApiStoreControllerCreateProductRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerCreateProduct(requestParameters.createProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء متجر
     * @param {AdminStoresApiStoreControllerCreateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerCreateStore(requestParameters: AdminStoresApiStoreControllerCreateStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerCreateStore(requestParameters.createStoreDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعطيل متجر
     * @param {AdminStoresApiStoreControllerDeactivateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerDeactivateStore(requestParameters: AdminStoresApiStoreControllerDeactivateStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerDeactivateStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف متجر
     * @param {AdminStoresApiStoreControllerDeleteStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerDeleteStore(requestParameters: AdminStoresApiStoreControllerDeleteStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerDeleteStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب متجر محدد - الإدارة
     * @param {AdminStoresApiStoreControllerFindStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerFindStore(requestParameters: AdminStoresApiStoreControllerFindStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerFindStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب المتاجر - الإدارة
     * @param {AdminStoresApiStoreControllerFindStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerFindStores(requestParameters: AdminStoresApiStoreControllerFindStoresRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerFindStores(requestParameters.isActive, requestParameters.usageType, requestParameters.q, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إغلاق قسري للمتجر
     * @param {AdminStoresApiStoreControllerForceCloseStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerForceCloseStore(requestParameters: AdminStoresApiStoreControllerForceCloseStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerForceCloseStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary فتح قسري للمتجر
     * @param {AdminStoresApiStoreControllerForceOpenStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerForceOpenStore(requestParameters: AdminStoresApiStoreControllerForceOpenStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerForceOpenStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary المتاجر المعلقة - تحتاج موافقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerGetPendingStores(options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerGetPendingStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary متغيرات المنتج
     * @param {AdminStoresApiStoreControllerGetProductVariantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerGetProductVariants(requestParameters: AdminStoresApiStoreControllerGetProductVariantsRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerGetProductVariants(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب منتجات المتجر - الإدارة
     * @param {AdminStoresApiStoreControllerGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerGetProducts(requestParameters: AdminStoresApiStoreControllerGetProductsRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerGetProducts(requestParameters.id, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحليلات المتجر - الإدارة
     * @param {AdminStoresApiStoreControllerGetStoreAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerGetStoreAnalytics(requestParameters: AdminStoresApiStoreControllerGetStoreAnalyticsRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerGetStoreAnalytics(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جرد المتجر - الإدارة
     * @param {AdminStoresApiStoreControllerGetStoreInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerGetStoreInventory(requestParameters: AdminStoresApiStoreControllerGetStoreInventoryRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerGetStoreInventory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض متجر
     * @param {AdminStoresApiStoreControllerRejectStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerRejectStore(requestParameters: AdminStoresApiStoreControllerRejectStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerRejectStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعليق متجر
     * @param {AdminStoresApiStoreControllerSuspendStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerSuspendStore(requestParameters: AdminStoresApiStoreControllerSuspendStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerSuspendStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث منتج
     * @param {AdminStoresApiStoreControllerUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerUpdateProduct(requestParameters: AdminStoresApiStoreControllerUpdateProductRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerUpdateProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث متجر
     * @param {AdminStoresApiStoreControllerUpdateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public storeControllerUpdateStore(requestParameters: AdminStoresApiStoreControllerUpdateStoreRequest, options?: RawAxiosRequestConfig) {
        return AdminStoresApiFp(this.configuration).storeControllerUpdateStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AkhdimniApi - axios parameter creator
 */
export const AkhdimniApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تعيين سائق لمهمة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerAssignDriver: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('akhdimniControllerAssignDriver', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('akhdimniControllerAssignDriver', 'body', body)
            const localVarPath = `/akhdimni/admin/errands/{id}/assign-driver`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حساب رسوم المهمة قبل إنشائها
         * @param {CalculateFeeDto} calculateFeeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerCalculateFee: async (calculateFeeDto: CalculateFeeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'calculateFeeDto' is not null or undefined
            assertParamExists('akhdimniControllerCalculateFee', 'calculateFeeDto', calculateFeeDto)
            const localVarPath = `/akhdimni/errands/calculate-fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(calculateFeeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerCancelErrand: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('akhdimniControllerCancelErrand', 'id', id)
            const localVarPath = `/akhdimni/errands/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء طلب مهمة (أخدمني)
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerCreateErrand: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('akhdimniControllerCreateErrand', 'body', body)
            const localVarPath = `/akhdimni/errands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary كل طلبات أخدمني (إدارة)
         * @param {string} status 
         * @param {number} limit 
         * @param {string} cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetAllErrands: async (status: string, limit: number, cursor: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('akhdimniControllerGetAllErrands', 'status', status)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('akhdimniControllerGetAllErrands', 'limit', limit)
            // verify required parameter 'cursor' is not null or undefined
            assertParamExists('akhdimniControllerGetAllErrands', 'cursor', cursor)
            const localVarPath = `/akhdimni/admin/errands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على طلب محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetErrand: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('akhdimniControllerGetErrand', 'id', id)
            const localVarPath = `/akhdimni/errands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مهماتي كسائق
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetMyDriverErrands: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('akhdimniControllerGetMyDriverErrands', 'status', status)
            const localVarPath = `/akhdimni/driver/my-errands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلباتي من أخدمني
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetMyErrands: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('akhdimniControllerGetMyErrands', 'status', status)
            const localVarPath = `/akhdimni/my-errands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تقييم المهمة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerRateErrand: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('akhdimniControllerRateErrand', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('akhdimniControllerRateErrand', 'body', body)
            const localVarPath = `/akhdimni/errands/{id}/rate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث حالة المهمة (سائق)
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerUpdateErrandStatus: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('akhdimniControllerUpdateErrandStatus', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('akhdimniControllerUpdateErrandStatus', 'body', body)
            const localVarPath = `/akhdimni/errands/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AkhdimniApi - functional programming interface
 */
export const AkhdimniApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AkhdimniApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تعيين سائق لمهمة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerAssignDriver(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerAssignDriver(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerAssignDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حساب رسوم المهمة قبل إنشائها
         * @param {CalculateFeeDto} calculateFeeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerCalculateFee(calculateFeeDto: CalculateFeeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerCalculateFee(calculateFeeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerCalculateFee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerCancelErrand(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerCancelErrand(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerCancelErrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء طلب مهمة (أخدمني)
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerCreateErrand(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerCreateErrand(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerCreateErrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary كل طلبات أخدمني (إدارة)
         * @param {string} status 
         * @param {number} limit 
         * @param {string} cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerGetAllErrands(status: string, limit: number, cursor: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerGetAllErrands(status, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerGetAllErrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على طلب محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerGetErrand(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerGetErrand(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerGetErrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مهماتي كسائق
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerGetMyDriverErrands(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerGetMyDriverErrands(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerGetMyDriverErrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلباتي من أخدمني
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerGetMyErrands(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerGetMyErrands(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerGetMyErrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تقييم المهمة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerRateErrand(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerRateErrand(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerRateErrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث حالة المهمة (سائق)
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async akhdimniControllerUpdateErrandStatus(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.akhdimniControllerUpdateErrandStatus(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AkhdimniApi.akhdimniControllerUpdateErrandStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AkhdimniApi - factory interface
 */
export const AkhdimniApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AkhdimniApiFp(configuration)
    return {
        /**
         * 
         * @summary تعيين سائق لمهمة
         * @param {AkhdimniApiAkhdimniControllerAssignDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerAssignDriver(requestParameters: AkhdimniApiAkhdimniControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerAssignDriver(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حساب رسوم المهمة قبل إنشائها
         * @param {AkhdimniApiAkhdimniControllerCalculateFeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerCalculateFee(requestParameters: AkhdimniApiAkhdimniControllerCalculateFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerCalculateFee(requestParameters.calculateFeeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء طلب
         * @param {AkhdimniApiAkhdimniControllerCancelErrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerCancelErrand(requestParameters: AkhdimniApiAkhdimniControllerCancelErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerCancelErrand(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء طلب مهمة (أخدمني)
         * @param {AkhdimniApiAkhdimniControllerCreateErrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerCreateErrand(requestParameters: AkhdimniApiAkhdimniControllerCreateErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerCreateErrand(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary كل طلبات أخدمني (إدارة)
         * @param {AkhdimniApiAkhdimniControllerGetAllErrandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetAllErrands(requestParameters: AkhdimniApiAkhdimniControllerGetAllErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerGetAllErrands(requestParameters.status, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على طلب محدد
         * @param {AkhdimniApiAkhdimniControllerGetErrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetErrand(requestParameters: AkhdimniApiAkhdimniControllerGetErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerGetErrand(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مهماتي كسائق
         * @param {AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetMyDriverErrands(requestParameters: AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerGetMyDriverErrands(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلباتي من أخدمني
         * @param {AkhdimniApiAkhdimniControllerGetMyErrandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerGetMyErrands(requestParameters: AkhdimniApiAkhdimniControllerGetMyErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerGetMyErrands(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تقييم المهمة
         * @param {AkhdimniApiAkhdimniControllerRateErrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerRateErrand(requestParameters: AkhdimniApiAkhdimniControllerRateErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerRateErrand(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث حالة المهمة (سائق)
         * @param {AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        akhdimniControllerUpdateErrandStatus(requestParameters: AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.akhdimniControllerUpdateErrandStatus(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AkhdimniApi - interface
 */
export interface AkhdimniApiInterface {
    /**
     * 
     * @summary تعيين سائق لمهمة
     * @param {AkhdimniApiAkhdimniControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerAssignDriver(requestParameters: AkhdimniApiAkhdimniControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حساب رسوم المهمة قبل إنشائها
     * @param {AkhdimniApiAkhdimniControllerCalculateFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerCalculateFee(requestParameters: AkhdimniApiAkhdimniControllerCalculateFeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء طلب
     * @param {AkhdimniApiAkhdimniControllerCancelErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerCancelErrand(requestParameters: AkhdimniApiAkhdimniControllerCancelErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء طلب مهمة (أخدمني)
     * @param {AkhdimniApiAkhdimniControllerCreateErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerCreateErrand(requestParameters: AkhdimniApiAkhdimniControllerCreateErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary كل طلبات أخدمني (إدارة)
     * @param {AkhdimniApiAkhdimniControllerGetAllErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerGetAllErrands(requestParameters: AkhdimniApiAkhdimniControllerGetAllErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على طلب محدد
     * @param {AkhdimniApiAkhdimniControllerGetErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerGetErrand(requestParameters: AkhdimniApiAkhdimniControllerGetErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مهماتي كسائق
     * @param {AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerGetMyDriverErrands(requestParameters: AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلباتي من أخدمني
     * @param {AkhdimniApiAkhdimniControllerGetMyErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerGetMyErrands(requestParameters: AkhdimniApiAkhdimniControllerGetMyErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تقييم المهمة
     * @param {AkhdimniApiAkhdimniControllerRateErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerRateErrand(requestParameters: AkhdimniApiAkhdimniControllerRateErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث حالة المهمة (سائق)
     * @param {AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    akhdimniControllerUpdateErrandStatus(requestParameters: AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for akhdimniControllerAssignDriver operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerAssignDriverRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for akhdimniControllerCalculateFee operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerCalculateFeeRequest {
    readonly calculateFeeDto: CalculateFeeDto
}

/**
 * Request parameters for akhdimniControllerCancelErrand operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerCancelErrandRequest {
    readonly id: string
}

/**
 * Request parameters for akhdimniControllerCreateErrand operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerCreateErrandRequest {
    readonly body: object
}

/**
 * Request parameters for akhdimniControllerGetAllErrands operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerGetAllErrandsRequest {
    readonly status: string

    readonly limit: number

    readonly cursor: string
}

/**
 * Request parameters for akhdimniControllerGetErrand operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerGetErrandRequest {
    readonly id: string
}

/**
 * Request parameters for akhdimniControllerGetMyDriverErrands operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest {
    readonly status: string
}

/**
 * Request parameters for akhdimniControllerGetMyErrands operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerGetMyErrandsRequest {
    readonly status: string
}

/**
 * Request parameters for akhdimniControllerRateErrand operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerRateErrandRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for akhdimniControllerUpdateErrandStatus operation in AkhdimniApi.
 */
export interface AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest {
    readonly id: string

    readonly body: object
}

/**
 * AkhdimniApi - object-oriented interface
 */
export class AkhdimniApi extends BaseAPI implements AkhdimniApiInterface {
    /**
     * 
     * @summary تعيين سائق لمهمة
     * @param {AkhdimniApiAkhdimniControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerAssignDriver(requestParameters: AkhdimniApiAkhdimniControllerAssignDriverRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerAssignDriver(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حساب رسوم المهمة قبل إنشائها
     * @param {AkhdimniApiAkhdimniControllerCalculateFeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerCalculateFee(requestParameters: AkhdimniApiAkhdimniControllerCalculateFeeRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerCalculateFee(requestParameters.calculateFeeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء طلب
     * @param {AkhdimniApiAkhdimniControllerCancelErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerCancelErrand(requestParameters: AkhdimniApiAkhdimniControllerCancelErrandRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerCancelErrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء طلب مهمة (أخدمني)
     * @param {AkhdimniApiAkhdimniControllerCreateErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerCreateErrand(requestParameters: AkhdimniApiAkhdimniControllerCreateErrandRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerCreateErrand(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary كل طلبات أخدمني (إدارة)
     * @param {AkhdimniApiAkhdimniControllerGetAllErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerGetAllErrands(requestParameters: AkhdimniApiAkhdimniControllerGetAllErrandsRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerGetAllErrands(requestParameters.status, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على طلب محدد
     * @param {AkhdimniApiAkhdimniControllerGetErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerGetErrand(requestParameters: AkhdimniApiAkhdimniControllerGetErrandRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerGetErrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مهماتي كسائق
     * @param {AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerGetMyDriverErrands(requestParameters: AkhdimniApiAkhdimniControllerGetMyDriverErrandsRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerGetMyDriverErrands(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلباتي من أخدمني
     * @param {AkhdimniApiAkhdimniControllerGetMyErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerGetMyErrands(requestParameters: AkhdimniApiAkhdimniControllerGetMyErrandsRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerGetMyErrands(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تقييم المهمة
     * @param {AkhdimniApiAkhdimniControllerRateErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerRateErrand(requestParameters: AkhdimniApiAkhdimniControllerRateErrandRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerRateErrand(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث حالة المهمة (سائق)
     * @param {AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public akhdimniControllerUpdateErrandStatus(requestParameters: AkhdimniApiAkhdimniControllerUpdateErrandStatusRequest, options?: RawAxiosRequestConfig) {
        return AkhdimniApiFp(this.configuration).akhdimniControllerUpdateErrandStatus(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AnalyticsApi - axios parameter creator
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary حساب ROAS
         * @param {FinanceControllerGenerateDailyReportRequest} financeControllerGenerateDailyReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerCalculateRoas: async (financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeControllerGenerateDailyReportRequest' is not null or undefined
            assertParamExists('analyticsControllerCalculateRoas', 'financeControllerGenerateDailyReportRequest', financeControllerGenerateDailyReportRequest)
            const localVarPath = `/analytics/roas/calculate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(financeControllerGenerateDailyReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الإنفاق الإعلاني
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {string} platform 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAdSpend: async (startDate: string, endDate: string, platform: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetAdSpend', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetAdSpend', 'endDate', endDate)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('analyticsControllerGetAdSpend', 'platform', platform)
            const localVarPath = `/analytics/adspend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملخص الإنفاق الإعلاني
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAdSpendSummary: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetAdSpendSummary', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetAdSpendSummary', 'endDate', endDate)
            const localVarPath = `/analytics/adspend/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary معدل التراجع
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetChurnRate: async (period: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('analyticsControllerGetChurnRate', 'period', period)
            const localVarPath = `/analytics/advanced/churn-rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحليل الأفواج
         * @param {string} cohortDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetCohortAnalysis: async (cohortDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cohortDate' is not null or undefined
            assertParamExists('analyticsControllerGetCohortAnalysis', 'cohortDate', cohortDate)
            const localVarPath = `/analytics/users/cohort`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cohortDate !== undefined) {
                localVarQueryParameter['cohortDate'] = cohortDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحليل المجموعات المتقدم
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetCohortAnalysisAdvanced: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('analyticsControllerGetCohortAnalysisAdvanced', 'type', type)
            const localVarPath = `/analytics/advanced/cohort-analysis-advanced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قمع التحويل
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetConversionFunnel: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetConversionFunnel', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetConversionFunnel', 'endDate', endDate)
            const localVarPath = `/analytics/funnel/conversion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary القيمة الدائمة للعميل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetCustomerLTV: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/advanced/ltv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ROAS اليومي
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {string} platform 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDailyRoas: async (startDate: string, endDate: string, platform: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetDailyRoas', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetDailyRoas', 'endDate', endDate)
            // verify required parameter 'platform' is not null or undefined
            assertParamExists('analyticsControllerGetDailyRoas', 'platform', platform)
            const localVarPath = `/analytics/roas/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary نظرة عامة متقدمة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDashboardOverview: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetDashboardOverview', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetDashboardOverview', 'endDate', endDate)
            const localVarPath = `/analytics/advanced/dashboard-overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أداء السائقين
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDriverPerformance: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetDriverPerformance', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetDriverPerformance', 'endDate', endDate)
            const localVarPath = `/analytics/advanced/driver-performance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary نقاط الانسحاب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDropOffPoints: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/funnel/drop-off`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الأحداث التسويقية
         * @param {string} eventType 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEvents: async (eventType: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventType' is not null or undefined
            assertParamExists('analyticsControllerGetEvents', 'eventType', eventType)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetEvents', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetEvents', 'endDate', endDate)
            const localVarPath = `/analytics/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eventType !== undefined) {
                localVarQueryParameter['eventType'] = eventType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملخص الأحداث
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEventsSummary: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetEventsSummary', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetEventsSummary', 'endDate', endDate)
            const localVarPath = `/analytics/events/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحليل القمع
         * @param {string} funnelType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetFunnelAnalysis: async (funnelType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'funnelType' is not null or undefined
            assertParamExists('analyticsControllerGetFunnelAnalysis', 'funnelType', funnelType)
            const localVarPath = `/analytics/advanced/funnel-analysis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (funnelType !== undefined) {
                localVarQueryParameter['funnelType'] = funnelType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التوزيع الجغرافي
         * @param {string} metric 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetGeographicDistribution: async (metric: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('analyticsControllerGetGeographicDistribution', 'metric', metric)
            const localVarPath = `/analytics/advanced/geographic-distribution`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary اتجاهات الأداء
         * @param {string} metric 
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetKPITrends: async (metric: string, period: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metric' is not null or undefined
            assertParamExists('analyticsControllerGetKPITrends', 'metric', metric)
            // verify required parameter 'period' is not null or undefined
            assertParamExists('analyticsControllerGetKPITrends', 'period', period)
            const localVarPath = `/analytics/kpis/trends`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مؤشرات الأداء الرئيسية
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetKPIs: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetKPIs', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetKPIs', 'endDate', endDate)
            const localVarPath = `/analytics/kpis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ساعات الذروة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetPeakHours: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/advanced/peak-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أداء المنتجات
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetProductPerformance: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetProductPerformance', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetProductPerformance', 'endDate', endDate)
            const localVarPath = `/analytics/advanced/product-performance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مؤشرات الأداء الحية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRealTimeKPIs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/kpis/real-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary معدل الاحتفاظ
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRetentionRate: async (period: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('analyticsControllerGetRetentionRate', 'period', period)
            const localVarPath = `/analytics/advanced/retention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفصيل الإيرادات
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueBreakdown: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetRevenueBreakdown', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetRevenueBreakdown', 'endDate', endDate)
            const localVarPath = `/analytics/revenue/breakdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary توقعات الإيرادات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueForecast: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/revenue/forecast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ROAS حسب المنصة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoasByPlatform: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetRoasByPlatform', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetRoasByPlatform', 'endDate', endDate)
            const localVarPath = `/analytics/roas/by-platform`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملخص ROAS
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoasSummary: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('analyticsControllerGetRoasSummary', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('analyticsControllerGetRoasSummary', 'endDate', endDate)
            const localVarPath = `/analytics/roas/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary نمو المستخدمين
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetUserGrowth: async (period: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'period' is not null or undefined
            assertParamExists('analyticsControllerGetUserGrowth', 'period', period)
            const localVarPath = `/analytics/users/growth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary معدل الاحتفاظ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetUserRetention: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/analytics/users/retention`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل إنفاق إعلاني
         * @param {AnalyticsControllerRecordAdSpendRequest} analyticsControllerRecordAdSpendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerRecordAdSpend: async (analyticsControllerRecordAdSpendRequest: AnalyticsControllerRecordAdSpendRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analyticsControllerRecordAdSpendRequest' is not null or undefined
            assertParamExists('analyticsControllerRecordAdSpend', 'analyticsControllerRecordAdSpendRequest', analyticsControllerRecordAdSpendRequest)
            const localVarPath = `/analytics/adspend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(analyticsControllerRecordAdSpendRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تتبع حدث تسويقي
         * @param {AnalyticsControllerTrackEventRequest} analyticsControllerTrackEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerTrackEvent: async (analyticsControllerTrackEventRequest: AnalyticsControllerTrackEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'analyticsControllerTrackEventRequest' is not null or undefined
            assertParamExists('analyticsControllerTrackEvent', 'analyticsControllerTrackEventRequest', analyticsControllerTrackEventRequest)
            const localVarPath = `/analytics/events/track`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(analyticsControllerTrackEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary حساب ROAS
         * @param {FinanceControllerGenerateDailyReportRequest} financeControllerGenerateDailyReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerCalculateRoas(financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerCalculateRoas(financeControllerGenerateDailyReportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerCalculateRoas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الإنفاق الإعلاني
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {string} platform 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetAdSpend(startDate: string, endDate: string, platform: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetAdSpend(startDate, endDate, platform, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetAdSpend']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملخص الإنفاق الإعلاني
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetAdSpendSummary(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetAdSpendSummary(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetAdSpendSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary معدل التراجع
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetChurnRate(period: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetChurnRate(period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetChurnRate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحليل الأفواج
         * @param {string} cohortDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetCohortAnalysis(cohortDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetCohortAnalysis(cohortDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetCohortAnalysis']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحليل المجموعات المتقدم
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetCohortAnalysisAdvanced(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetCohortAnalysisAdvanced(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetCohortAnalysisAdvanced']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary قمع التحويل
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetConversionFunnel(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetConversionFunnel(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetConversionFunnel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary القيمة الدائمة للعميل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetCustomerLTV(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetCustomerLTV(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetCustomerLTV']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ROAS اليومي
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {string} platform 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetDailyRoas(startDate: string, endDate: string, platform: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetDailyRoas(startDate, endDate, platform, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetDailyRoas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary نظرة عامة متقدمة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetDashboardOverview(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetDashboardOverview(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetDashboardOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أداء السائقين
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetDriverPerformance(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetDriverPerformance(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetDriverPerformance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary نقاط الانسحاب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetDropOffPoints(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetDropOffPoints(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetDropOffPoints']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الأحداث التسويقية
         * @param {string} eventType 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetEvents(eventType: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetEvents(eventType, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملخص الأحداث
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetEventsSummary(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetEventsSummary(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetEventsSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحليل القمع
         * @param {string} funnelType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetFunnelAnalysis(funnelType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetFunnelAnalysis(funnelType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetFunnelAnalysis']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التوزيع الجغرافي
         * @param {string} metric 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetGeographicDistribution(metric: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetGeographicDistribution(metric, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetGeographicDistribution']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary اتجاهات الأداء
         * @param {string} metric 
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetKPITrends(metric: string, period: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetKPITrends(metric, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetKPITrends']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مؤشرات الأداء الرئيسية
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetKPIs(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetKPIs(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetKPIs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ساعات الذروة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetPeakHours(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetPeakHours(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetPeakHours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أداء المنتجات
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetProductPerformance(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetProductPerformance(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetProductPerformance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مؤشرات الأداء الحية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetRealTimeKPIs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetRealTimeKPIs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetRealTimeKPIs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary معدل الاحتفاظ
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetRetentionRate(period: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetRetentionRate(period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetRetentionRate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفصيل الإيرادات
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetRevenueBreakdown(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetRevenueBreakdown(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetRevenueBreakdown']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary توقعات الإيرادات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetRevenueForecast(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetRevenueForecast(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetRevenueForecast']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ROAS حسب المنصة
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetRoasByPlatform(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetRoasByPlatform(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetRoasByPlatform']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملخص ROAS
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetRoasSummary(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetRoasSummary(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetRoasSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary نمو المستخدمين
         * @param {string} period 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetUserGrowth(period: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetUserGrowth(period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetUserGrowth']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary معدل الاحتفاظ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerGetUserRetention(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerGetUserRetention(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerGetUserRetention']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل إنفاق إعلاني
         * @param {AnalyticsControllerRecordAdSpendRequest} analyticsControllerRecordAdSpendRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerRecordAdSpend(analyticsControllerRecordAdSpendRequest: AnalyticsControllerRecordAdSpendRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerRecordAdSpend(analyticsControllerRecordAdSpendRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerRecordAdSpend']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تتبع حدث تسويقي
         * @param {AnalyticsControllerTrackEventRequest} analyticsControllerTrackEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async analyticsControllerTrackEvent(analyticsControllerTrackEventRequest: AnalyticsControllerTrackEventRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.analyticsControllerTrackEvent(analyticsControllerTrackEventRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.analyticsControllerTrackEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * 
         * @summary حساب ROAS
         * @param {AnalyticsApiAnalyticsControllerCalculateRoasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerCalculateRoas(requestParameters: AnalyticsApiAnalyticsControllerCalculateRoasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerCalculateRoas(requestParameters.financeControllerGenerateDailyReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الإنفاق الإعلاني
         * @param {AnalyticsApiAnalyticsControllerGetAdSpendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAdSpend(requestParameters: AnalyticsApiAnalyticsControllerGetAdSpendRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetAdSpend(requestParameters.startDate, requestParameters.endDate, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملخص الإنفاق الإعلاني
         * @param {AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetAdSpendSummary(requestParameters: AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetAdSpendSummary(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary معدل التراجع
         * @param {AnalyticsApiAnalyticsControllerGetChurnRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetChurnRate(requestParameters: AnalyticsApiAnalyticsControllerGetChurnRateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetChurnRate(requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحليل الأفواج
         * @param {AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetCohortAnalysis(requestParameters: AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetCohortAnalysis(requestParameters.cohortDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحليل المجموعات المتقدم
         * @param {AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetCohortAnalysisAdvanced(requestParameters: AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetCohortAnalysisAdvanced(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قمع التحويل
         * @param {AnalyticsApiAnalyticsControllerGetConversionFunnelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetConversionFunnel(requestParameters: AnalyticsApiAnalyticsControllerGetConversionFunnelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetConversionFunnel(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary القيمة الدائمة للعميل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetCustomerLTV(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetCustomerLTV(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ROAS اليومي
         * @param {AnalyticsApiAnalyticsControllerGetDailyRoasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDailyRoas(requestParameters: AnalyticsApiAnalyticsControllerGetDailyRoasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetDailyRoas(requestParameters.startDate, requestParameters.endDate, requestParameters.platform, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary نظرة عامة متقدمة
         * @param {AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDashboardOverview(requestParameters: AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetDashboardOverview(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أداء السائقين
         * @param {AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDriverPerformance(requestParameters: AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetDriverPerformance(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary نقاط الانسحاب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetDropOffPoints(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetDropOffPoints(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الأحداث التسويقية
         * @param {AnalyticsApiAnalyticsControllerGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEvents(requestParameters: AnalyticsApiAnalyticsControllerGetEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetEvents(requestParameters.eventType, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملخص الأحداث
         * @param {AnalyticsApiAnalyticsControllerGetEventsSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetEventsSummary(requestParameters: AnalyticsApiAnalyticsControllerGetEventsSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetEventsSummary(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحليل القمع
         * @param {AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetFunnelAnalysis(requestParameters: AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetFunnelAnalysis(requestParameters.funnelType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التوزيع الجغرافي
         * @param {AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetGeographicDistribution(requestParameters: AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetGeographicDistribution(requestParameters.metric, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary اتجاهات الأداء
         * @param {AnalyticsApiAnalyticsControllerGetKPITrendsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetKPITrends(requestParameters: AnalyticsApiAnalyticsControllerGetKPITrendsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetKPITrends(requestParameters.metric, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مؤشرات الأداء الرئيسية
         * @param {AnalyticsApiAnalyticsControllerGetKPIsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetKPIs(requestParameters: AnalyticsApiAnalyticsControllerGetKPIsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetKPIs(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ساعات الذروة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetPeakHours(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetPeakHours(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أداء المنتجات
         * @param {AnalyticsApiAnalyticsControllerGetProductPerformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetProductPerformance(requestParameters: AnalyticsApiAnalyticsControllerGetProductPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetProductPerformance(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مؤشرات الأداء الحية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRealTimeKPIs(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetRealTimeKPIs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary معدل الاحتفاظ
         * @param {AnalyticsApiAnalyticsControllerGetRetentionRateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRetentionRate(requestParameters: AnalyticsApiAnalyticsControllerGetRetentionRateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetRetentionRate(requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفصيل الإيرادات
         * @param {AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueBreakdown(requestParameters: AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetRevenueBreakdown(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary توقعات الإيرادات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRevenueForecast(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetRevenueForecast(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ROAS حسب المنصة
         * @param {AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoasByPlatform(requestParameters: AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetRoasByPlatform(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملخص ROAS
         * @param {AnalyticsApiAnalyticsControllerGetRoasSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetRoasSummary(requestParameters: AnalyticsApiAnalyticsControllerGetRoasSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetRoasSummary(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary نمو المستخدمين
         * @param {AnalyticsApiAnalyticsControllerGetUserGrowthRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetUserGrowth(requestParameters: AnalyticsApiAnalyticsControllerGetUserGrowthRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetUserGrowth(requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary معدل الاحتفاظ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerGetUserRetention(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerGetUserRetention(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل إنفاق إعلاني
         * @param {AnalyticsApiAnalyticsControllerRecordAdSpendRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerRecordAdSpend(requestParameters: AnalyticsApiAnalyticsControllerRecordAdSpendRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerRecordAdSpend(requestParameters.analyticsControllerRecordAdSpendRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تتبع حدث تسويقي
         * @param {AnalyticsApiAnalyticsControllerTrackEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        analyticsControllerTrackEvent(requestParameters: AnalyticsApiAnalyticsControllerTrackEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.analyticsControllerTrackEvent(requestParameters.analyticsControllerTrackEventRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - interface
 */
export interface AnalyticsApiInterface {
    /**
     * 
     * @summary حساب ROAS
     * @param {AnalyticsApiAnalyticsControllerCalculateRoasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerCalculateRoas(requestParameters: AnalyticsApiAnalyticsControllerCalculateRoasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الإنفاق الإعلاني
     * @param {AnalyticsApiAnalyticsControllerGetAdSpendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetAdSpend(requestParameters: AnalyticsApiAnalyticsControllerGetAdSpendRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملخص الإنفاق الإعلاني
     * @param {AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetAdSpendSummary(requestParameters: AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary معدل التراجع
     * @param {AnalyticsApiAnalyticsControllerGetChurnRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetChurnRate(requestParameters: AnalyticsApiAnalyticsControllerGetChurnRateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحليل الأفواج
     * @param {AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetCohortAnalysis(requestParameters: AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحليل المجموعات المتقدم
     * @param {AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetCohortAnalysisAdvanced(requestParameters: AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary قمع التحويل
     * @param {AnalyticsApiAnalyticsControllerGetConversionFunnelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetConversionFunnel(requestParameters: AnalyticsApiAnalyticsControllerGetConversionFunnelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary القيمة الدائمة للعميل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetCustomerLTV(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ROAS اليومي
     * @param {AnalyticsApiAnalyticsControllerGetDailyRoasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetDailyRoas(requestParameters: AnalyticsApiAnalyticsControllerGetDailyRoasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary نظرة عامة متقدمة
     * @param {AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetDashboardOverview(requestParameters: AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أداء السائقين
     * @param {AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetDriverPerformance(requestParameters: AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary نقاط الانسحاب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetDropOffPoints(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الأحداث التسويقية
     * @param {AnalyticsApiAnalyticsControllerGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetEvents(requestParameters: AnalyticsApiAnalyticsControllerGetEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملخص الأحداث
     * @param {AnalyticsApiAnalyticsControllerGetEventsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetEventsSummary(requestParameters: AnalyticsApiAnalyticsControllerGetEventsSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحليل القمع
     * @param {AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetFunnelAnalysis(requestParameters: AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التوزيع الجغرافي
     * @param {AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetGeographicDistribution(requestParameters: AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary اتجاهات الأداء
     * @param {AnalyticsApiAnalyticsControllerGetKPITrendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetKPITrends(requestParameters: AnalyticsApiAnalyticsControllerGetKPITrendsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مؤشرات الأداء الرئيسية
     * @param {AnalyticsApiAnalyticsControllerGetKPIsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetKPIs(requestParameters: AnalyticsApiAnalyticsControllerGetKPIsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ساعات الذروة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetPeakHours(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أداء المنتجات
     * @param {AnalyticsApiAnalyticsControllerGetProductPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetProductPerformance(requestParameters: AnalyticsApiAnalyticsControllerGetProductPerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مؤشرات الأداء الحية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRealTimeKPIs(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary معدل الاحتفاظ
     * @param {AnalyticsApiAnalyticsControllerGetRetentionRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRetentionRate(requestParameters: AnalyticsApiAnalyticsControllerGetRetentionRateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفصيل الإيرادات
     * @param {AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRevenueBreakdown(requestParameters: AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary توقعات الإيرادات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRevenueForecast(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ROAS حسب المنصة
     * @param {AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRoasByPlatform(requestParameters: AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملخص ROAS
     * @param {AnalyticsApiAnalyticsControllerGetRoasSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetRoasSummary(requestParameters: AnalyticsApiAnalyticsControllerGetRoasSummaryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary نمو المستخدمين
     * @param {AnalyticsApiAnalyticsControllerGetUserGrowthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetUserGrowth(requestParameters: AnalyticsApiAnalyticsControllerGetUserGrowthRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary معدل الاحتفاظ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerGetUserRetention(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل إنفاق إعلاني
     * @param {AnalyticsApiAnalyticsControllerRecordAdSpendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerRecordAdSpend(requestParameters: AnalyticsApiAnalyticsControllerRecordAdSpendRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تتبع حدث تسويقي
     * @param {AnalyticsApiAnalyticsControllerTrackEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    analyticsControllerTrackEvent(requestParameters: AnalyticsApiAnalyticsControllerTrackEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for analyticsControllerCalculateRoas operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerCalculateRoasRequest {
    readonly financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest
}

/**
 * Request parameters for analyticsControllerGetAdSpend operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetAdSpendRequest {
    readonly startDate: string

    readonly endDate: string

    readonly platform: string
}

/**
 * Request parameters for analyticsControllerGetAdSpendSummary operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetChurnRate operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetChurnRateRequest {
    readonly period: string
}

/**
 * Request parameters for analyticsControllerGetCohortAnalysis operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest {
    readonly cohortDate: string
}

/**
 * Request parameters for analyticsControllerGetCohortAnalysisAdvanced operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest {
    readonly type: string
}

/**
 * Request parameters for analyticsControllerGetConversionFunnel operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetConversionFunnelRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetDailyRoas operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetDailyRoasRequest {
    readonly startDate: string

    readonly endDate: string

    readonly platform: string
}

/**
 * Request parameters for analyticsControllerGetDashboardOverview operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetDriverPerformance operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetEvents operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetEventsRequest {
    readonly eventType: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetEventsSummary operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetEventsSummaryRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetFunnelAnalysis operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest {
    readonly funnelType: string
}

/**
 * Request parameters for analyticsControllerGetGeographicDistribution operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest {
    readonly metric: string
}

/**
 * Request parameters for analyticsControllerGetKPITrends operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetKPITrendsRequest {
    readonly metric: string

    readonly period: string
}

/**
 * Request parameters for analyticsControllerGetKPIs operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetKPIsRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetProductPerformance operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetProductPerformanceRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetRetentionRate operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetRetentionRateRequest {
    readonly period: string
}

/**
 * Request parameters for analyticsControllerGetRevenueBreakdown operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetRoasByPlatform operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetRoasSummary operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetRoasSummaryRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for analyticsControllerGetUserGrowth operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerGetUserGrowthRequest {
    readonly period: string
}

/**
 * Request parameters for analyticsControllerRecordAdSpend operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerRecordAdSpendRequest {
    readonly analyticsControllerRecordAdSpendRequest: AnalyticsControllerRecordAdSpendRequest
}

/**
 * Request parameters for analyticsControllerTrackEvent operation in AnalyticsApi.
 */
export interface AnalyticsApiAnalyticsControllerTrackEventRequest {
    readonly analyticsControllerTrackEventRequest: AnalyticsControllerTrackEventRequest
}

/**
 * AnalyticsApi - object-oriented interface
 */
export class AnalyticsApi extends BaseAPI implements AnalyticsApiInterface {
    /**
     * 
     * @summary حساب ROAS
     * @param {AnalyticsApiAnalyticsControllerCalculateRoasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerCalculateRoas(requestParameters: AnalyticsApiAnalyticsControllerCalculateRoasRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerCalculateRoas(requestParameters.financeControllerGenerateDailyReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الإنفاق الإعلاني
     * @param {AnalyticsApiAnalyticsControllerGetAdSpendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetAdSpend(requestParameters: AnalyticsApiAnalyticsControllerGetAdSpendRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetAdSpend(requestParameters.startDate, requestParameters.endDate, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملخص الإنفاق الإعلاني
     * @param {AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetAdSpendSummary(requestParameters: AnalyticsApiAnalyticsControllerGetAdSpendSummaryRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetAdSpendSummary(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary معدل التراجع
     * @param {AnalyticsApiAnalyticsControllerGetChurnRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetChurnRate(requestParameters: AnalyticsApiAnalyticsControllerGetChurnRateRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetChurnRate(requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحليل الأفواج
     * @param {AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetCohortAnalysis(requestParameters: AnalyticsApiAnalyticsControllerGetCohortAnalysisRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetCohortAnalysis(requestParameters.cohortDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحليل المجموعات المتقدم
     * @param {AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetCohortAnalysisAdvanced(requestParameters: AnalyticsApiAnalyticsControllerGetCohortAnalysisAdvancedRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetCohortAnalysisAdvanced(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قمع التحويل
     * @param {AnalyticsApiAnalyticsControllerGetConversionFunnelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetConversionFunnel(requestParameters: AnalyticsApiAnalyticsControllerGetConversionFunnelRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetConversionFunnel(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary القيمة الدائمة للعميل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetCustomerLTV(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetCustomerLTV(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ROAS اليومي
     * @param {AnalyticsApiAnalyticsControllerGetDailyRoasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetDailyRoas(requestParameters: AnalyticsApiAnalyticsControllerGetDailyRoasRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetDailyRoas(requestParameters.startDate, requestParameters.endDate, requestParameters.platform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary نظرة عامة متقدمة
     * @param {AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetDashboardOverview(requestParameters: AnalyticsApiAnalyticsControllerGetDashboardOverviewRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetDashboardOverview(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أداء السائقين
     * @param {AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetDriverPerformance(requestParameters: AnalyticsApiAnalyticsControllerGetDriverPerformanceRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetDriverPerformance(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary نقاط الانسحاب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetDropOffPoints(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetDropOffPoints(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الأحداث التسويقية
     * @param {AnalyticsApiAnalyticsControllerGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetEvents(requestParameters: AnalyticsApiAnalyticsControllerGetEventsRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetEvents(requestParameters.eventType, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملخص الأحداث
     * @param {AnalyticsApiAnalyticsControllerGetEventsSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetEventsSummary(requestParameters: AnalyticsApiAnalyticsControllerGetEventsSummaryRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetEventsSummary(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحليل القمع
     * @param {AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetFunnelAnalysis(requestParameters: AnalyticsApiAnalyticsControllerGetFunnelAnalysisRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetFunnelAnalysis(requestParameters.funnelType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التوزيع الجغرافي
     * @param {AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetGeographicDistribution(requestParameters: AnalyticsApiAnalyticsControllerGetGeographicDistributionRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetGeographicDistribution(requestParameters.metric, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary اتجاهات الأداء
     * @param {AnalyticsApiAnalyticsControllerGetKPITrendsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetKPITrends(requestParameters: AnalyticsApiAnalyticsControllerGetKPITrendsRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetKPITrends(requestParameters.metric, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مؤشرات الأداء الرئيسية
     * @param {AnalyticsApiAnalyticsControllerGetKPIsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetKPIs(requestParameters: AnalyticsApiAnalyticsControllerGetKPIsRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetKPIs(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ساعات الذروة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetPeakHours(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetPeakHours(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أداء المنتجات
     * @param {AnalyticsApiAnalyticsControllerGetProductPerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetProductPerformance(requestParameters: AnalyticsApiAnalyticsControllerGetProductPerformanceRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetProductPerformance(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مؤشرات الأداء الحية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetRealTimeKPIs(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetRealTimeKPIs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary معدل الاحتفاظ
     * @param {AnalyticsApiAnalyticsControllerGetRetentionRateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetRetentionRate(requestParameters: AnalyticsApiAnalyticsControllerGetRetentionRateRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetRetentionRate(requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفصيل الإيرادات
     * @param {AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetRevenueBreakdown(requestParameters: AnalyticsApiAnalyticsControllerGetRevenueBreakdownRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetRevenueBreakdown(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary توقعات الإيرادات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetRevenueForecast(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetRevenueForecast(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ROAS حسب المنصة
     * @param {AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetRoasByPlatform(requestParameters: AnalyticsApiAnalyticsControllerGetRoasByPlatformRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetRoasByPlatform(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملخص ROAS
     * @param {AnalyticsApiAnalyticsControllerGetRoasSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetRoasSummary(requestParameters: AnalyticsApiAnalyticsControllerGetRoasSummaryRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetRoasSummary(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary نمو المستخدمين
     * @param {AnalyticsApiAnalyticsControllerGetUserGrowthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetUserGrowth(requestParameters: AnalyticsApiAnalyticsControllerGetUserGrowthRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetUserGrowth(requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary معدل الاحتفاظ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerGetUserRetention(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerGetUserRetention(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل إنفاق إعلاني
     * @param {AnalyticsApiAnalyticsControllerRecordAdSpendRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerRecordAdSpend(requestParameters: AnalyticsApiAnalyticsControllerRecordAdSpendRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerRecordAdSpend(requestParameters.analyticsControllerRecordAdSpendRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تتبع حدث تسويقي
     * @param {AnalyticsApiAnalyticsControllerTrackEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public analyticsControllerTrackEvent(requestParameters: AnalyticsApiAnalyticsControllerTrackEventRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).analyticsControllerTrackEvent(requestParameters.analyticsControllerTrackEventRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AppApi - axios parameter creator
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - interface
 */
export interface AppApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * AppApi - object-oriented interface
 */
export class AppApi extends BaseAPI implements AppApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary التحقق من موافقة محددة
         * @param {AuthControllerCheckConsentTypeEnum} type نوع الموافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckConsent: async (type: AuthControllerCheckConsentTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('authControllerCheckConsent', 'type', type)
            const localVarPath = `/auth/consent/check/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلب إعادة تعيين كلمة المرور
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('authControllerForgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/auth/forgot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل موافقات المستخدم
         * @param {AuthControllerGetConsentHistoryTypeEnum} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetConsentHistory: async (type?: AuthControllerGetConsentHistoryTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/consent/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملخص موافقات المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetConsentSummary: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/consent/summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل موافقات متعددة دفعة واحدة
         * @param {BulkConsentDto} bulkConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGrantBulkConsents: async (bulkConsentDto: BulkConsentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkConsentDto' is not null or undefined
            assertParamExists('authControllerGrantBulkConsents', 'bulkConsentDto', bulkConsentDto)
            const localVarPath = `/auth/consent/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkConsentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل موافقة المستخدم
         * @param {ConsentDto} consentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGrantConsent: async (consentDto: ConsentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentDto' is not null or undefined
            assertParamExists('authControllerGrantConsent', 'consentDto', consentDto)
            const localVarPath = `/auth/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(consentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل الدخول عبر Firebase
         * @param {FirebaseAuthDto} firebaseAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginWithFirebase: async (firebaseAuthDto: FirebaseAuthDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'firebaseAuthDto' is not null or undefined
            assertParamExists('authControllerLoginWithFirebase', 'firebaseAuthDto', firebaseAuthDto)
            const localVarPath = `/auth/firebase/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(firebaseAuthDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إعادة تعيين كلمة المرور
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword: async (resetPasswordDto: ResetPasswordDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDto' is not null or undefined
            assertParamExists('authControllerResetPassword', 'resetPasswordDto', resetPasswordDto)
            const localVarPath = `/auth/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التحقق من رمز OTP
         * @param {VerifyOtpDto} verifyOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyOtp: async (verifyOtpDto: VerifyOtpDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyOtpDto' is not null or undefined
            assertParamExists('authControllerVerifyOtp', 'verifyOtpDto', verifyOtpDto)
            const localVarPath = `/auth/verify-otp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyOtpDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التحقق من رمز إعادة التعيين
         * @param {VerifyResetCodeDto} verifyResetCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyResetCode: async (verifyResetCodeDto: VerifyResetCodeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyResetCodeDto' is not null or undefined
            assertParamExists('authControllerVerifyResetCode', 'verifyResetCodeDto', verifyResetCodeDto)
            const localVarPath = `/auth/reset/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyResetCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سحب الموافقة
         * @param {AuthControllerWithdrawConsentTypeEnum} type نوع الموافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerWithdrawConsent: async (type: AuthControllerWithdrawConsentTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('authControllerWithdrawConsent', 'type', type)
            const localVarPath = `/auth/consent/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary التحقق من موافقة محددة
         * @param {AuthControllerCheckConsentTypeEnum} type نوع الموافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerCheckConsent(type: AuthControllerCheckConsentTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerCheckConsent(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerCheckConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلب إعادة تعيين كلمة المرور
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerForgotPassword(forgotPasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerForgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل موافقات المستخدم
         * @param {AuthControllerGetConsentHistoryTypeEnum} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetConsentHistory(type?: AuthControllerGetConsentHistoryTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetConsentHistory(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerGetConsentHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملخص موافقات المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetConsentSummary(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetConsentSummary(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerGetConsentSummary']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل موافقات متعددة دفعة واحدة
         * @param {BulkConsentDto} bulkConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGrantBulkConsents(bulkConsentDto: BulkConsentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGrantBulkConsents(bulkConsentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerGrantBulkConsents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل موافقة المستخدم
         * @param {ConsentDto} consentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGrantConsent(consentDto: ConsentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGrantConsent(consentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerGrantConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل الدخول عبر Firebase
         * @param {FirebaseAuthDto} firebaseAuthDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLoginWithFirebase(firebaseAuthDto: FirebaseAuthDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLoginWithFirebase(firebaseAuthDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLoginWithFirebase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إعادة تعيين كلمة المرور
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerResetPassword(resetPasswordDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التحقق من رمز OTP
         * @param {VerifyOtpDto} verifyOtpDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerifyOtp(verifyOtpDto: VerifyOtpDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerifyOtp(verifyOtpDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerVerifyOtp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التحقق من رمز إعادة التعيين
         * @param {VerifyResetCodeDto} verifyResetCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerVerifyResetCode(verifyResetCodeDto: VerifyResetCodeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerVerifyResetCode(verifyResetCodeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerVerifyResetCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سحب الموافقة
         * @param {AuthControllerWithdrawConsentTypeEnum} type نوع الموافقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerWithdrawConsent(type: AuthControllerWithdrawConsentTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerWithdrawConsent(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerWithdrawConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary التحقق من موافقة محددة
         * @param {AuthApiAuthControllerCheckConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerCheckConsent(requestParameters: AuthApiAuthControllerCheckConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerCheckConsent(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلب إعادة تعيين كلمة المرور
         * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerForgotPassword(requestParameters: AuthApiAuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerForgotPassword(requestParameters.forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل موافقات المستخدم
         * @param {AuthApiAuthControllerGetConsentHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetConsentHistory(requestParameters: AuthApiAuthControllerGetConsentHistoryRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerGetConsentHistory(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملخص موافقات المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetConsentSummary(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerGetConsentSummary(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل موافقات متعددة دفعة واحدة
         * @param {AuthApiAuthControllerGrantBulkConsentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGrantBulkConsents(requestParameters: AuthApiAuthControllerGrantBulkConsentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerGrantBulkConsents(requestParameters.bulkConsentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل موافقة المستخدم
         * @param {AuthApiAuthControllerGrantConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGrantConsent(requestParameters: AuthApiAuthControllerGrantConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerGrantConsent(requestParameters.consentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل الدخول عبر Firebase
         * @param {AuthApiAuthControllerLoginWithFirebaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLoginWithFirebase(requestParameters: AuthApiAuthControllerLoginWithFirebaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerLoginWithFirebase(requestParameters.firebaseAuthDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إعادة تعيين كلمة المرور
         * @param {AuthApiAuthControllerResetPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerResetPassword(requestParameters: AuthApiAuthControllerResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerResetPassword(requestParameters.resetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التحقق من رمز OTP
         * @param {AuthApiAuthControllerVerifyOtpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyOtp(requestParameters: AuthApiAuthControllerVerifyOtpRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerVerifyOtp(requestParameters.verifyOtpDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التحقق من رمز إعادة التعيين
         * @param {AuthApiAuthControllerVerifyResetCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerVerifyResetCode(requestParameters: AuthApiAuthControllerVerifyResetCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerVerifyResetCode(requestParameters.verifyResetCodeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سحب الموافقة
         * @param {AuthApiAuthControllerWithdrawConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerWithdrawConsent(requestParameters: AuthApiAuthControllerWithdrawConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerWithdrawConsent(requestParameters.type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary التحقق من موافقة محددة
     * @param {AuthApiAuthControllerCheckConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerCheckConsent(requestParameters: AuthApiAuthControllerCheckConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلب إعادة تعيين كلمة المرور
     * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerForgotPassword(requestParameters: AuthApiAuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل موافقات المستخدم
     * @param {AuthApiAuthControllerGetConsentHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetConsentHistory(requestParameters?: AuthApiAuthControllerGetConsentHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملخص موافقات المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGetConsentSummary(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل موافقات متعددة دفعة واحدة
     * @param {AuthApiAuthControllerGrantBulkConsentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGrantBulkConsents(requestParameters: AuthApiAuthControllerGrantBulkConsentsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل موافقة المستخدم
     * @param {AuthApiAuthControllerGrantConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerGrantConsent(requestParameters: AuthApiAuthControllerGrantConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل الدخول عبر Firebase
     * @param {AuthApiAuthControllerLoginWithFirebaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerLoginWithFirebase(requestParameters: AuthApiAuthControllerLoginWithFirebaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إعادة تعيين كلمة المرور
     * @param {AuthApiAuthControllerResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerResetPassword(requestParameters: AuthApiAuthControllerResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التحقق من رمز OTP
     * @param {AuthApiAuthControllerVerifyOtpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyOtp(requestParameters: AuthApiAuthControllerVerifyOtpRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التحقق من رمز إعادة التعيين
     * @param {AuthApiAuthControllerVerifyResetCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerVerifyResetCode(requestParameters: AuthApiAuthControllerVerifyResetCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سحب الموافقة
     * @param {AuthApiAuthControllerWithdrawConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authControllerWithdrawConsent(requestParameters: AuthApiAuthControllerWithdrawConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for authControllerCheckConsent operation in AuthApi.
 */
export interface AuthApiAuthControllerCheckConsentRequest {
    /**
     * نوع الموافقة
     */
    readonly type: AuthControllerCheckConsentTypeEnum
}

/**
 * Request parameters for authControllerForgotPassword operation in AuthApi.
 */
export interface AuthApiAuthControllerForgotPasswordRequest {
    readonly forgotPasswordDto: ForgotPasswordDto
}

/**
 * Request parameters for authControllerGetConsentHistory operation in AuthApi.
 */
export interface AuthApiAuthControllerGetConsentHistoryRequest {
    readonly type?: AuthControllerGetConsentHistoryTypeEnum
}

/**
 * Request parameters for authControllerGrantBulkConsents operation in AuthApi.
 */
export interface AuthApiAuthControllerGrantBulkConsentsRequest {
    readonly bulkConsentDto: BulkConsentDto
}

/**
 * Request parameters for authControllerGrantConsent operation in AuthApi.
 */
export interface AuthApiAuthControllerGrantConsentRequest {
    readonly consentDto: ConsentDto
}

/**
 * Request parameters for authControllerLoginWithFirebase operation in AuthApi.
 */
export interface AuthApiAuthControllerLoginWithFirebaseRequest {
    readonly firebaseAuthDto: FirebaseAuthDto
}

/**
 * Request parameters for authControllerResetPassword operation in AuthApi.
 */
export interface AuthApiAuthControllerResetPasswordRequest {
    readonly resetPasswordDto: ResetPasswordDto
}

/**
 * Request parameters for authControllerVerifyOtp operation in AuthApi.
 */
export interface AuthApiAuthControllerVerifyOtpRequest {
    readonly verifyOtpDto: VerifyOtpDto
}

/**
 * Request parameters for authControllerVerifyResetCode operation in AuthApi.
 */
export interface AuthApiAuthControllerVerifyResetCodeRequest {
    readonly verifyResetCodeDto: VerifyResetCodeDto
}

/**
 * Request parameters for authControllerWithdrawConsent operation in AuthApi.
 */
export interface AuthApiAuthControllerWithdrawConsentRequest {
    /**
     * نوع الموافقة
     */
    readonly type: AuthControllerWithdrawConsentTypeEnum
}

/**
 * AuthApi - object-oriented interface
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @summary التحقق من موافقة محددة
     * @param {AuthApiAuthControllerCheckConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerCheckConsent(requestParameters: AuthApiAuthControllerCheckConsentRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerCheckConsent(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلب إعادة تعيين كلمة المرور
     * @param {AuthApiAuthControllerForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerForgotPassword(requestParameters: AuthApiAuthControllerForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerForgotPassword(requestParameters.forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل موافقات المستخدم
     * @param {AuthApiAuthControllerGetConsentHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerGetConsentHistory(requestParameters: AuthApiAuthControllerGetConsentHistoryRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetConsentHistory(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملخص موافقات المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerGetConsentSummary(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGetConsentSummary(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل موافقات متعددة دفعة واحدة
     * @param {AuthApiAuthControllerGrantBulkConsentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerGrantBulkConsents(requestParameters: AuthApiAuthControllerGrantBulkConsentsRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGrantBulkConsents(requestParameters.bulkConsentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل موافقة المستخدم
     * @param {AuthApiAuthControllerGrantConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerGrantConsent(requestParameters: AuthApiAuthControllerGrantConsentRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerGrantConsent(requestParameters.consentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل الدخول عبر Firebase
     * @param {AuthApiAuthControllerLoginWithFirebaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerLoginWithFirebase(requestParameters: AuthApiAuthControllerLoginWithFirebaseRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLoginWithFirebase(requestParameters.firebaseAuthDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إعادة تعيين كلمة المرور
     * @param {AuthApiAuthControllerResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerResetPassword(requestParameters: AuthApiAuthControllerResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerResetPassword(requestParameters.resetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التحقق من رمز OTP
     * @param {AuthApiAuthControllerVerifyOtpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerVerifyOtp(requestParameters: AuthApiAuthControllerVerifyOtpRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerVerifyOtp(requestParameters.verifyOtpDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التحقق من رمز إعادة التعيين
     * @param {AuthApiAuthControllerVerifyResetCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerVerifyResetCode(requestParameters: AuthApiAuthControllerVerifyResetCodeRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerVerifyResetCode(requestParameters.verifyResetCodeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سحب الموافقة
     * @param {AuthApiAuthControllerWithdrawConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerWithdrawConsent(requestParameters: AuthApiAuthControllerWithdrawConsentRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerWithdrawConsent(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }
}

export const AuthControllerCheckConsentTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;
export type AuthControllerCheckConsentTypeEnum = typeof AuthControllerCheckConsentTypeEnum[keyof typeof AuthControllerCheckConsentTypeEnum];
export const AuthControllerGetConsentHistoryTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;
export type AuthControllerGetConsentHistoryTypeEnum = typeof AuthControllerGetConsentHistoryTypeEnum[keyof typeof AuthControllerGetConsentHistoryTypeEnum];
export const AuthControllerWithdrawConsentTypeEnum = {
    PrivacyPolicy: 'privacy_policy',
    TermsOfService: 'terms_of_service',
    Marketing: 'marketing',
    DataProcessing: 'data_processing'
} as const;
export type AuthControllerWithdrawConsentTypeEnum = typeof AuthControllerWithdrawConsentTypeEnum[keyof typeof AuthControllerWithdrawConsentTypeEnum];


/**
 * CartApi - axios parameter creator
 */
export const CartApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إضافة عنوان التوصيل
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddDeliveryAddress: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerAddDeliveryAddress', 'body', body)
            const localVarPath = `/delivery/cart/delivery-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة ملاحظة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddNote: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerAddNote', 'body', body)
            const localVarPath = `/delivery/cart/note`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة ملاحظة لسلة Shein
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddSheinNote: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerAddSheinNote', 'body', body)
            const localVarPath = `/delivery/cart/shein/note`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة منتج للسلة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToCart: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerAddToCart', 'body', body)
            const localVarPath = `/delivery/cart/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة منتج للسلة (توافق)
         * @param {CartControllerAddToCartCompatRequest} cartControllerAddToCartCompatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToCartCompat: async (cartControllerAddToCartCompatRequest: CartControllerAddToCartCompatRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartControllerAddToCartCompatRequest' is not null or undefined
            assertParamExists('cartControllerAddToCartCompat', 'cartControllerAddToCartCompatRequest', cartControllerAddToCartCompatRequest)
            const localVarPath = `/delivery/cart/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartControllerAddToCartCompatRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة منتج Shein للسلة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToSheinCart: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerAddToSheinCart', 'body', body)
            const localVarPath = `/delivery/cart/shein/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفريغ كل السلات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerClearAllCarts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/combined/clear-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفريغ السلة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerClearCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفريغ سلة Shein
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerClearSheinCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/shein`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف سلة أو منتج من السلة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerDeleteCartItem: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cartControllerDeleteCartItem', 'id', id)
            const localVarPath = `/delivery/cart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف منتج من سلة محددة (Admin)
         * @param {string} cartId 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerDeleteSpecificCartItem: async (cartId: string, productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartControllerDeleteSpecificCartItem', 'cartId', cartId)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('cartControllerDeleteSpecificCartItem', 'productId', productId)
            const localVarPath = `/delivery/cart/{cartId}/items/{productId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على السلات المهجورة (Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetAbandonedCarts: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/abandoned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على سلة بالمعرف
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartById: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartControllerGetCartById', 'cartId', cartId)
            const localVarPath = `/delivery/cart/{cartId}`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary عدد العناصر في السلة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حساب رسوم التوصيل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartFee: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/fee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على السلة الموحدة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCombinedCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/combined`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على سلتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetMyCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على سلة Shein
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetMySheinCart: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/cart/shein`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على سلة مستخدم
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetUserCart: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cartControllerGetUserCart', 'userId', userId)
            const localVarPath = `/delivery/cart/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary دمج سلة الضيف مع سلة المستخدم
         * @param {CartControllerMergeCartRequest} cartControllerMergeCartRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerMergeCart: async (cartControllerMergeCartRequest: CartControllerMergeCartRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartControllerMergeCartRequest' is not null or undefined
            assertParamExists('cartControllerMergeCart', 'cartControllerMergeCartRequest', cartControllerMergeCartRequest)
            const localVarPath = `/delivery/cart/merge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cartControllerMergeCartRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف منتج من السلة
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromCart: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('cartControllerRemoveFromCart', 'productId', productId)
            const localVarPath = `/delivery/cart/items/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف منتج من السلة (توافق)
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromCartCompat: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('cartControllerRemoveFromCartCompat', 'productId', productId)
            const localVarPath = `/delivery/cart/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف منتج Shein من السلة
         * @param {string} sheinProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromSheinCart: async (sheinProductId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sheinProductId' is not null or undefined
            assertParamExists('cartControllerRemoveFromSheinCart', 'sheinProductId', sheinProductId)
            const localVarPath = `/delivery/cart/shein/items/{sheinProductId}`
                .replace(`{${"sheinProductId"}}`, encodeURIComponent(String(sheinProductId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إرسال إشعار استعادة السلة (Admin)
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerSendRetargetNotification: async (cartId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cartId' is not null or undefined
            assertParamExists('cartControllerSendRetargetNotification', 'cartId', cartId)
            const localVarPath = `/delivery/cart/{cartId}/retarget/push`
                .replace(`{${"cartId"}}`, encodeURIComponent(String(cartId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث كمية منتج
         * @param {string} productId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateCartItem: async (productId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('cartControllerUpdateCartItem', 'productId', productId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerUpdateCartItem', 'body', body)
            const localVarPath = `/delivery/cart/items/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث كمية منتج (توافق)
         * @param {string} productId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateCartItemCompat: async (productId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('cartControllerUpdateCartItemCompat', 'productId', productId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerUpdateCartItemCompat', 'body', body)
            const localVarPath = `/delivery/cart/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث كمية منتج Shein
         * @param {string} sheinProductId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateSheinCartItem: async (sheinProductId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sheinProductId' is not null or undefined
            assertParamExists('cartControllerUpdateSheinCartItem', 'sheinProductId', sheinProductId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerUpdateSheinCartItem', 'body', body)
            const localVarPath = `/delivery/cart/shein/items/{sheinProductId}`
                .replace(`{${"sheinProductId"}}`, encodeURIComponent(String(sheinProductId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث تكاليف الشحن
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateSheinShipping: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cartControllerUpdateSheinShipping', 'body', body)
            const localVarPath = `/delivery/cart/shein/shipping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CartApi - functional programming interface
 */
export const CartApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CartApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إضافة عنوان التوصيل
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddDeliveryAddress(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddDeliveryAddress(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddDeliveryAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة ملاحظة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddNote(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddNote(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة ملاحظة لسلة Shein
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddSheinNote(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddSheinNote(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddSheinNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة منتج للسلة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddToCart(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddToCart(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddToCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة منتج للسلة (توافق)
         * @param {CartControllerAddToCartCompatRequest} cartControllerAddToCartCompatRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddToCartCompat(cartControllerAddToCartCompatRequest: CartControllerAddToCartCompatRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddToCartCompat(cartControllerAddToCartCompatRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddToCartCompat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة منتج Shein للسلة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerAddToSheinCart(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerAddToSheinCart(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerAddToSheinCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفريغ كل السلات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerClearAllCarts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerClearAllCarts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerClearAllCarts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفريغ السلة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerClearCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerClearCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerClearCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفريغ سلة Shein
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerClearSheinCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerClearSheinCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerClearSheinCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف سلة أو منتج من السلة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerDeleteCartItem(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerDeleteCartItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerDeleteCartItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف منتج من سلة محددة (Admin)
         * @param {string} cartId 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerDeleteSpecificCartItem(cartId: string, productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerDeleteSpecificCartItem(cartId, productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerDeleteSpecificCartItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على السلات المهجورة (Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetAbandonedCarts(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetAbandonedCarts(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetAbandonedCarts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على سلة بالمعرف
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetCartById(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetCartById(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetCartById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary عدد العناصر في السلة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetCartCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetCartCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetCartCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حساب رسوم التوصيل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetCartFee(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetCartFee(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetCartFee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على السلة الموحدة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetCombinedCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetCombinedCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetCombinedCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على سلتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetMyCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetMyCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetMyCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على سلة Shein
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetMySheinCart(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetMySheinCart(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetMySheinCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على سلة مستخدم
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerGetUserCart(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerGetUserCart(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerGetUserCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary دمج سلة الضيف مع سلة المستخدم
         * @param {CartControllerMergeCartRequest} cartControllerMergeCartRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerMergeCart(cartControllerMergeCartRequest: CartControllerMergeCartRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerMergeCart(cartControllerMergeCartRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerMergeCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف منتج من السلة
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerRemoveFromCart(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerRemoveFromCart(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerRemoveFromCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف منتج من السلة (توافق)
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerRemoveFromCartCompat(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerRemoveFromCartCompat(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerRemoveFromCartCompat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف منتج Shein من السلة
         * @param {string} sheinProductId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerRemoveFromSheinCart(sheinProductId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerRemoveFromSheinCart(sheinProductId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerRemoveFromSheinCart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إرسال إشعار استعادة السلة (Admin)
         * @param {string} cartId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerSendRetargetNotification(cartId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerSendRetargetNotification(cartId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerSendRetargetNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث كمية منتج
         * @param {string} productId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerUpdateCartItem(productId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerUpdateCartItem(productId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerUpdateCartItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث كمية منتج (توافق)
         * @param {string} productId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerUpdateCartItemCompat(productId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerUpdateCartItemCompat(productId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerUpdateCartItemCompat']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث كمية منتج Shein
         * @param {string} sheinProductId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerUpdateSheinCartItem(sheinProductId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerUpdateSheinCartItem(sheinProductId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerUpdateSheinCartItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث تكاليف الشحن
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cartControllerUpdateSheinShipping(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cartControllerUpdateSheinShipping(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CartApi.cartControllerUpdateSheinShipping']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CartApi - factory interface
 */
export const CartApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CartApiFp(configuration)
    return {
        /**
         * 
         * @summary إضافة عنوان التوصيل
         * @param {CartApiCartControllerAddDeliveryAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddDeliveryAddress(requestParameters: CartApiCartControllerAddDeliveryAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerAddDeliveryAddress(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة ملاحظة
         * @param {CartApiCartControllerAddNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddNote(requestParameters: CartApiCartControllerAddNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerAddNote(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة ملاحظة لسلة Shein
         * @param {CartApiCartControllerAddSheinNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddSheinNote(requestParameters: CartApiCartControllerAddSheinNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerAddSheinNote(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة منتج للسلة
         * @param {CartApiCartControllerAddToCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToCart(requestParameters: CartApiCartControllerAddToCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerAddToCart(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة منتج للسلة (توافق)
         * @param {CartApiCartControllerAddToCartCompatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToCartCompat(requestParameters: CartApiCartControllerAddToCartCompatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerAddToCartCompat(requestParameters.cartControllerAddToCartCompatRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة منتج Shein للسلة
         * @param {CartApiCartControllerAddToSheinCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerAddToSheinCart(requestParameters: CartApiCartControllerAddToSheinCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerAddToSheinCart(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفريغ كل السلات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerClearAllCarts(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerClearAllCarts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفريغ السلة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerClearCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerClearCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفريغ سلة Shein
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerClearSheinCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerClearSheinCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف سلة أو منتج من السلة
         * @param {CartApiCartControllerDeleteCartItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerDeleteCartItem(requestParameters: CartApiCartControllerDeleteCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerDeleteCartItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف منتج من سلة محددة (Admin)
         * @param {CartApiCartControllerDeleteSpecificCartItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerDeleteSpecificCartItem(requestParameters: CartApiCartControllerDeleteSpecificCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerDeleteSpecificCartItem(requestParameters.cartId, requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على السلات المهجورة (Admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetAbandonedCarts(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetAbandonedCarts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على سلة بالمعرف
         * @param {CartApiCartControllerGetCartByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartById(requestParameters: CartApiCartControllerGetCartByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetCartById(requestParameters.cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary عدد العناصر في السلة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartCount(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetCartCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حساب رسوم التوصيل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCartFee(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetCartFee(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على السلة الموحدة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetCombinedCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetCombinedCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على سلتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetMyCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetMyCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على سلة Shein
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetMySheinCart(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetMySheinCart(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على سلة مستخدم
         * @param {CartApiCartControllerGetUserCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerGetUserCart(requestParameters: CartApiCartControllerGetUserCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerGetUserCart(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary دمج سلة الضيف مع سلة المستخدم
         * @param {CartApiCartControllerMergeCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerMergeCart(requestParameters: CartApiCartControllerMergeCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerMergeCart(requestParameters.cartControllerMergeCartRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف منتج من السلة
         * @param {CartApiCartControllerRemoveFromCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromCart(requestParameters: CartApiCartControllerRemoveFromCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerRemoveFromCart(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف منتج من السلة (توافق)
         * @param {CartApiCartControllerRemoveFromCartCompatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromCartCompat(requestParameters: CartApiCartControllerRemoveFromCartCompatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerRemoveFromCartCompat(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف منتج Shein من السلة
         * @param {CartApiCartControllerRemoveFromSheinCartRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerRemoveFromSheinCart(requestParameters: CartApiCartControllerRemoveFromSheinCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerRemoveFromSheinCart(requestParameters.sheinProductId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إرسال إشعار استعادة السلة (Admin)
         * @param {CartApiCartControllerSendRetargetNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerSendRetargetNotification(requestParameters: CartApiCartControllerSendRetargetNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerSendRetargetNotification(requestParameters.cartId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث كمية منتج
         * @param {CartApiCartControllerUpdateCartItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateCartItem(requestParameters: CartApiCartControllerUpdateCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerUpdateCartItem(requestParameters.productId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث كمية منتج (توافق)
         * @param {CartApiCartControllerUpdateCartItemCompatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateCartItemCompat(requestParameters: CartApiCartControllerUpdateCartItemCompatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerUpdateCartItemCompat(requestParameters.productId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث كمية منتج Shein
         * @param {CartApiCartControllerUpdateSheinCartItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateSheinCartItem(requestParameters: CartApiCartControllerUpdateSheinCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerUpdateSheinCartItem(requestParameters.sheinProductId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث تكاليف الشحن
         * @param {CartApiCartControllerUpdateSheinShippingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cartControllerUpdateSheinShipping(requestParameters: CartApiCartControllerUpdateSheinShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cartControllerUpdateSheinShipping(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CartApi - interface
 */
export interface CartApiInterface {
    /**
     * 
     * @summary إضافة عنوان التوصيل
     * @param {CartApiCartControllerAddDeliveryAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddDeliveryAddress(requestParameters: CartApiCartControllerAddDeliveryAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة ملاحظة
     * @param {CartApiCartControllerAddNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddNote(requestParameters: CartApiCartControllerAddNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة ملاحظة لسلة Shein
     * @param {CartApiCartControllerAddSheinNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddSheinNote(requestParameters: CartApiCartControllerAddSheinNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة منتج للسلة
     * @param {CartApiCartControllerAddToCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddToCart(requestParameters: CartApiCartControllerAddToCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة منتج للسلة (توافق)
     * @param {CartApiCartControllerAddToCartCompatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddToCartCompat(requestParameters: CartApiCartControllerAddToCartCompatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة منتج Shein للسلة
     * @param {CartApiCartControllerAddToSheinCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerAddToSheinCart(requestParameters: CartApiCartControllerAddToSheinCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفريغ كل السلات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerClearAllCarts(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفريغ السلة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerClearCart(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفريغ سلة Shein
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerClearSheinCart(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف سلة أو منتج من السلة
     * @param {CartApiCartControllerDeleteCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerDeleteCartItem(requestParameters: CartApiCartControllerDeleteCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف منتج من سلة محددة (Admin)
     * @param {CartApiCartControllerDeleteSpecificCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerDeleteSpecificCartItem(requestParameters: CartApiCartControllerDeleteSpecificCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على السلات المهجورة (Admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetAbandonedCarts(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على سلة بالمعرف
     * @param {CartApiCartControllerGetCartByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetCartById(requestParameters: CartApiCartControllerGetCartByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary عدد العناصر في السلة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetCartCount(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حساب رسوم التوصيل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetCartFee(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على السلة الموحدة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetCombinedCart(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على سلتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetMyCart(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على سلة Shein
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetMySheinCart(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على سلة مستخدم
     * @param {CartApiCartControllerGetUserCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerGetUserCart(requestParameters: CartApiCartControllerGetUserCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary دمج سلة الضيف مع سلة المستخدم
     * @param {CartApiCartControllerMergeCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerMergeCart(requestParameters: CartApiCartControllerMergeCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف منتج من السلة
     * @param {CartApiCartControllerRemoveFromCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerRemoveFromCart(requestParameters: CartApiCartControllerRemoveFromCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف منتج من السلة (توافق)
     * @param {CartApiCartControllerRemoveFromCartCompatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerRemoveFromCartCompat(requestParameters: CartApiCartControllerRemoveFromCartCompatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف منتج Shein من السلة
     * @param {CartApiCartControllerRemoveFromSheinCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerRemoveFromSheinCart(requestParameters: CartApiCartControllerRemoveFromSheinCartRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إرسال إشعار استعادة السلة (Admin)
     * @param {CartApiCartControllerSendRetargetNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerSendRetargetNotification(requestParameters: CartApiCartControllerSendRetargetNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث كمية منتج
     * @param {CartApiCartControllerUpdateCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerUpdateCartItem(requestParameters: CartApiCartControllerUpdateCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث كمية منتج (توافق)
     * @param {CartApiCartControllerUpdateCartItemCompatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerUpdateCartItemCompat(requestParameters: CartApiCartControllerUpdateCartItemCompatRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث كمية منتج Shein
     * @param {CartApiCartControllerUpdateSheinCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerUpdateSheinCartItem(requestParameters: CartApiCartControllerUpdateSheinCartItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث تكاليف الشحن
     * @param {CartApiCartControllerUpdateSheinShippingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cartControllerUpdateSheinShipping(requestParameters: CartApiCartControllerUpdateSheinShippingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for cartControllerAddDeliveryAddress operation in CartApi.
 */
export interface CartApiCartControllerAddDeliveryAddressRequest {
    readonly body: object
}

/**
 * Request parameters for cartControllerAddNote operation in CartApi.
 */
export interface CartApiCartControllerAddNoteRequest {
    readonly body: object
}

/**
 * Request parameters for cartControllerAddSheinNote operation in CartApi.
 */
export interface CartApiCartControllerAddSheinNoteRequest {
    readonly body: object
}

/**
 * Request parameters for cartControllerAddToCart operation in CartApi.
 */
export interface CartApiCartControllerAddToCartRequest {
    readonly body: object
}

/**
 * Request parameters for cartControllerAddToCartCompat operation in CartApi.
 */
export interface CartApiCartControllerAddToCartCompatRequest {
    readonly cartControllerAddToCartCompatRequest: CartControllerAddToCartCompatRequest
}

/**
 * Request parameters for cartControllerAddToSheinCart operation in CartApi.
 */
export interface CartApiCartControllerAddToSheinCartRequest {
    readonly body: object
}

/**
 * Request parameters for cartControllerDeleteCartItem operation in CartApi.
 */
export interface CartApiCartControllerDeleteCartItemRequest {
    readonly id: string
}

/**
 * Request parameters for cartControllerDeleteSpecificCartItem operation in CartApi.
 */
export interface CartApiCartControllerDeleteSpecificCartItemRequest {
    readonly cartId: string

    readonly productId: string
}

/**
 * Request parameters for cartControllerGetCartById operation in CartApi.
 */
export interface CartApiCartControllerGetCartByIdRequest {
    readonly cartId: string
}

/**
 * Request parameters for cartControllerGetUserCart operation in CartApi.
 */
export interface CartApiCartControllerGetUserCartRequest {
    readonly userId: string
}

/**
 * Request parameters for cartControllerMergeCart operation in CartApi.
 */
export interface CartApiCartControllerMergeCartRequest {
    readonly cartControllerMergeCartRequest: CartControllerMergeCartRequest
}

/**
 * Request parameters for cartControllerRemoveFromCart operation in CartApi.
 */
export interface CartApiCartControllerRemoveFromCartRequest {
    readonly productId: string
}

/**
 * Request parameters for cartControllerRemoveFromCartCompat operation in CartApi.
 */
export interface CartApiCartControllerRemoveFromCartCompatRequest {
    readonly productId: string
}

/**
 * Request parameters for cartControllerRemoveFromSheinCart operation in CartApi.
 */
export interface CartApiCartControllerRemoveFromSheinCartRequest {
    readonly sheinProductId: string
}

/**
 * Request parameters for cartControllerSendRetargetNotification operation in CartApi.
 */
export interface CartApiCartControllerSendRetargetNotificationRequest {
    readonly cartId: string
}

/**
 * Request parameters for cartControllerUpdateCartItem operation in CartApi.
 */
export interface CartApiCartControllerUpdateCartItemRequest {
    readonly productId: string

    readonly body: object
}

/**
 * Request parameters for cartControllerUpdateCartItemCompat operation in CartApi.
 */
export interface CartApiCartControllerUpdateCartItemCompatRequest {
    readonly productId: string

    readonly body: object
}

/**
 * Request parameters for cartControllerUpdateSheinCartItem operation in CartApi.
 */
export interface CartApiCartControllerUpdateSheinCartItemRequest {
    readonly sheinProductId: string

    readonly body: object
}

/**
 * Request parameters for cartControllerUpdateSheinShipping operation in CartApi.
 */
export interface CartApiCartControllerUpdateSheinShippingRequest {
    readonly body: object
}

/**
 * CartApi - object-oriented interface
 */
export class CartApi extends BaseAPI implements CartApiInterface {
    /**
     * 
     * @summary إضافة عنوان التوصيل
     * @param {CartApiCartControllerAddDeliveryAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerAddDeliveryAddress(requestParameters: CartApiCartControllerAddDeliveryAddressRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddDeliveryAddress(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة ملاحظة
     * @param {CartApiCartControllerAddNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerAddNote(requestParameters: CartApiCartControllerAddNoteRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddNote(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة ملاحظة لسلة Shein
     * @param {CartApiCartControllerAddSheinNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerAddSheinNote(requestParameters: CartApiCartControllerAddSheinNoteRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddSheinNote(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة منتج للسلة
     * @param {CartApiCartControllerAddToCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerAddToCart(requestParameters: CartApiCartControllerAddToCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddToCart(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة منتج للسلة (توافق)
     * @param {CartApiCartControllerAddToCartCompatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerAddToCartCompat(requestParameters: CartApiCartControllerAddToCartCompatRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddToCartCompat(requestParameters.cartControllerAddToCartCompatRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة منتج Shein للسلة
     * @param {CartApiCartControllerAddToSheinCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerAddToSheinCart(requestParameters: CartApiCartControllerAddToSheinCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerAddToSheinCart(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفريغ كل السلات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerClearAllCarts(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerClearAllCarts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفريغ السلة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerClearCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerClearCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفريغ سلة Shein
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerClearSheinCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerClearSheinCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف سلة أو منتج من السلة
     * @param {CartApiCartControllerDeleteCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerDeleteCartItem(requestParameters: CartApiCartControllerDeleteCartItemRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerDeleteCartItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف منتج من سلة محددة (Admin)
     * @param {CartApiCartControllerDeleteSpecificCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerDeleteSpecificCartItem(requestParameters: CartApiCartControllerDeleteSpecificCartItemRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerDeleteSpecificCartItem(requestParameters.cartId, requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على السلات المهجورة (Admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetAbandonedCarts(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetAbandonedCarts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على سلة بالمعرف
     * @param {CartApiCartControllerGetCartByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetCartById(requestParameters: CartApiCartControllerGetCartByIdRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetCartById(requestParameters.cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary عدد العناصر في السلة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetCartCount(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetCartCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حساب رسوم التوصيل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetCartFee(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetCartFee(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على السلة الموحدة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetCombinedCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetCombinedCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على سلتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetMyCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetMyCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على سلة Shein
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetMySheinCart(options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetMySheinCart(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على سلة مستخدم
     * @param {CartApiCartControllerGetUserCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerGetUserCart(requestParameters: CartApiCartControllerGetUserCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerGetUserCart(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary دمج سلة الضيف مع سلة المستخدم
     * @param {CartApiCartControllerMergeCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerMergeCart(requestParameters: CartApiCartControllerMergeCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerMergeCart(requestParameters.cartControllerMergeCartRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف منتج من السلة
     * @param {CartApiCartControllerRemoveFromCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerRemoveFromCart(requestParameters: CartApiCartControllerRemoveFromCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerRemoveFromCart(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف منتج من السلة (توافق)
     * @param {CartApiCartControllerRemoveFromCartCompatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerRemoveFromCartCompat(requestParameters: CartApiCartControllerRemoveFromCartCompatRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerRemoveFromCartCompat(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف منتج Shein من السلة
     * @param {CartApiCartControllerRemoveFromSheinCartRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerRemoveFromSheinCart(requestParameters: CartApiCartControllerRemoveFromSheinCartRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerRemoveFromSheinCart(requestParameters.sheinProductId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إرسال إشعار استعادة السلة (Admin)
     * @param {CartApiCartControllerSendRetargetNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerSendRetargetNotification(requestParameters: CartApiCartControllerSendRetargetNotificationRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerSendRetargetNotification(requestParameters.cartId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث كمية منتج
     * @param {CartApiCartControllerUpdateCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerUpdateCartItem(requestParameters: CartApiCartControllerUpdateCartItemRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerUpdateCartItem(requestParameters.productId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث كمية منتج (توافق)
     * @param {CartApiCartControllerUpdateCartItemCompatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerUpdateCartItemCompat(requestParameters: CartApiCartControllerUpdateCartItemCompatRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerUpdateCartItemCompat(requestParameters.productId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث كمية منتج Shein
     * @param {CartApiCartControllerUpdateSheinCartItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerUpdateSheinCartItem(requestParameters: CartApiCartControllerUpdateSheinCartItemRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerUpdateSheinCartItem(requestParameters.sheinProductId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث تكاليف الشحن
     * @param {CartApiCartControllerUpdateSheinShippingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public cartControllerUpdateSheinShipping(requestParameters: CartApiCartControllerUpdateSheinShippingRequest, options?: RawAxiosRequestConfig) {
        return CartApiFp(this.configuration).cartControllerUpdateSheinShipping(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ContentApi - axios parameter creator
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إلغاء الاشتراك
         * @param {ContentControllerCancelSubscriptionRequest} contentControllerCancelSubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCancelSubscription: async (contentControllerCancelSubscriptionRequest: ContentControllerCancelSubscriptionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentControllerCancelSubscriptionRequest' is not null or undefined
            assertParamExists('contentControllerCancelSubscription', 'contentControllerCancelSubscriptionRequest', contentControllerCancelSubscriptionRequest)
            const localVarPath = `/content/my-subscription/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contentControllerCancelSubscriptionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء بانر جديد
         * @param {CreateBannerDto} createBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateBanner: async (createBannerDto: CreateBannerDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBannerDto' is not null or undefined
            assertParamExists('contentControllerCreateBanner', 'createBannerDto', createBannerDto)
            const localVarPath = `/content/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBannerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء صفحة CMS
         * @param {ContentControllerCreateCMSPageRequest} contentControllerCreateCMSPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateCMSPage: async (contentControllerCreateCMSPageRequest: ContentControllerCreateCMSPageRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentControllerCreateCMSPageRequest' is not null or undefined
            assertParamExists('contentControllerCreateCMSPage', 'contentControllerCreateCMSPageRequest', contentControllerCreateCMSPageRequest)
            const localVarPath = `/content/admin/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contentControllerCreateCMSPageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة سؤال شائع
         * @param {ContentControllerCreateFAQRequest} contentControllerCreateFAQRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateFAQ: async (contentControllerCreateFAQRequest: ContentControllerCreateFAQRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentControllerCreateFAQRequest' is not null or undefined
            assertParamExists('contentControllerCreateFAQ', 'contentControllerCreateFAQRequest', contentControllerCreateFAQRequest)
            const localVarPath = `/content/admin/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contentControllerCreateFAQRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء قسم متجر
         * @param {CreateStoreSectionDto} createStoreSectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateStoreSection: async (createStoreSectionDto: CreateStoreSectionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStoreSectionDto' is not null or undefined
            assertParamExists('contentControllerCreateStoreSection', 'createStoreSectionDto', createStoreSectionDto)
            const localVarPath = `/content/sections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStoreSectionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء خطة اشتراك
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateSubscriptionPlan: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('contentControllerCreateSubscriptionPlan', 'body', body)
            const localVarPath = `/content/subscription-plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف بانر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDeleteBanner: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerDeleteBanner', 'id', id)
            const localVarPath = `/content/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف سؤال شائع
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDeleteFAQ: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerDeleteFAQ', 'id', id)
            const localVarPath = `/content/admin/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف قسم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDeleteStoreSection: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerDeleteStoreSection', 'id', id)
            const localVarPath = `/content/sections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على البانرات النشطة (public)
         * @param {string} placement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetActiveBanners: async (placement: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placement' is not null or undefined
            assertParamExists('contentControllerGetActiveBanners', 'placement', placement)
            const localVarPath = `/content/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (placement !== undefined) {
                localVarQueryParameter['placement'] = placement;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary كل البانرات (admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetAllBanners: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/admin/banners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إعدادات التطبيق (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetAppSettings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/app-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على صفحة CMS بالـ slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetCMSPageBySlug: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('contentControllerGetCMSPageBySlug', 'slug', slug)
            const localVarPath = `/content/pages/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على صفحات CMS (public)
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetCMSPages: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('contentControllerGetCMSPages', 'type', type)
            const localVarPath = `/content/pages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الأسئلة الشائعة (public)
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetFAQs: async (category: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('contentControllerGetFAQs', 'category', category)
            const localVarPath = `/content/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على اشتراكي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetMySubscription: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/my-subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على أقسام المتجر (public)
         * @param {string} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetStoreSections: async (storeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('contentControllerGetStoreSections', 'storeId', storeId)
            const localVarPath = `/content/stores/{storeId}/sections`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على خطط الاشتراك (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetSubscriptionPlans: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/subscription-plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل نقرة على بانر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerRecordBannerClick: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerRecordBannerClick', 'id', id)
            const localVarPath = `/content/banners/{id}/click`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الاشتراك في خطة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerSubscribe: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('contentControllerSubscribe', 'body', body)
            const localVarPath = `/content/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث إعدادات التطبيق
         * @param {ContentControllerUpdateAppSettingsRequest} contentControllerUpdateAppSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateAppSettings: async (contentControllerUpdateAppSettingsRequest: ContentControllerUpdateAppSettingsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentControllerUpdateAppSettingsRequest' is not null or undefined
            assertParamExists('contentControllerUpdateAppSettings', 'contentControllerUpdateAppSettingsRequest', contentControllerUpdateAppSettingsRequest)
            const localVarPath = `/content/admin/app-settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contentControllerUpdateAppSettingsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث بانر
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateBanner: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerUpdateBanner', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('contentControllerUpdateBanner', 'body', body)
            const localVarPath = `/content/banners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث صفحة CMS
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateCMSPage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerUpdateCMSPage', 'id', id)
            const localVarPath = `/content/admin/pages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث سؤال شائع
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateFAQ: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerUpdateFAQ', 'id', id)
            const localVarPath = `/content/admin/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث قسم
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateStoreSection: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('contentControllerUpdateStoreSection', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('contentControllerUpdateStoreSection', 'body', body)
            const localVarPath = `/content/sections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 */
export const ContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إلغاء الاشتراك
         * @param {ContentControllerCancelSubscriptionRequest} contentControllerCancelSubscriptionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCancelSubscription(contentControllerCancelSubscriptionRequest: ContentControllerCancelSubscriptionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCancelSubscription(contentControllerCancelSubscriptionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCancelSubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء بانر جديد
         * @param {CreateBannerDto} createBannerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCreateBanner(createBannerDto: CreateBannerDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCreateBanner(createBannerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCreateBanner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء صفحة CMS
         * @param {ContentControllerCreateCMSPageRequest} contentControllerCreateCMSPageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCreateCMSPage(contentControllerCreateCMSPageRequest: ContentControllerCreateCMSPageRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCreateCMSPage(contentControllerCreateCMSPageRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCreateCMSPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة سؤال شائع
         * @param {ContentControllerCreateFAQRequest} contentControllerCreateFAQRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCreateFAQ(contentControllerCreateFAQRequest: ContentControllerCreateFAQRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCreateFAQ(contentControllerCreateFAQRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCreateFAQ']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء قسم متجر
         * @param {CreateStoreSectionDto} createStoreSectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCreateStoreSection(createStoreSectionDto: CreateStoreSectionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCreateStoreSection(createStoreSectionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCreateStoreSection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء خطة اشتراك
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerCreateSubscriptionPlan(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerCreateSubscriptionPlan(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerCreateSubscriptionPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف بانر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerDeleteBanner(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerDeleteBanner(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerDeleteBanner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف سؤال شائع
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerDeleteFAQ(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerDeleteFAQ(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerDeleteFAQ']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف قسم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerDeleteStoreSection(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerDeleteStoreSection(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerDeleteStoreSection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على البانرات النشطة (public)
         * @param {string} placement 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetActiveBanners(placement: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetActiveBanners(placement, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetActiveBanners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary كل البانرات (admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetAllBanners(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetAllBanners(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetAllBanners']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إعدادات التطبيق (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetAppSettings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetAppSettings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetAppSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على صفحة CMS بالـ slug
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetCMSPageBySlug(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetCMSPageBySlug(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetCMSPageBySlug']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على صفحات CMS (public)
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetCMSPages(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetCMSPages(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetCMSPages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الأسئلة الشائعة (public)
         * @param {string} category 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetFAQs(category: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetFAQs(category, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetFAQs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على اشتراكي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetMySubscription(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetMySubscription(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetMySubscription']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على أقسام المتجر (public)
         * @param {string} storeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetStoreSections(storeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetStoreSections(storeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetStoreSections']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على خطط الاشتراك (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerGetSubscriptionPlans(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerGetSubscriptionPlans(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerGetSubscriptionPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل نقرة على بانر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerRecordBannerClick(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerRecordBannerClick(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerRecordBannerClick']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الاشتراك في خطة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerSubscribe(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerSubscribe(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerSubscribe']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث إعدادات التطبيق
         * @param {ContentControllerUpdateAppSettingsRequest} contentControllerUpdateAppSettingsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerUpdateAppSettings(contentControllerUpdateAppSettingsRequest: ContentControllerUpdateAppSettingsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerUpdateAppSettings(contentControllerUpdateAppSettingsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerUpdateAppSettings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث بانر
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerUpdateBanner(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerUpdateBanner(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerUpdateBanner']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث صفحة CMS
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerUpdateCMSPage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerUpdateCMSPage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerUpdateCMSPage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث سؤال شائع
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerUpdateFAQ(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerUpdateFAQ(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerUpdateFAQ']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث قسم
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentControllerUpdateStoreSection(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contentControllerUpdateStoreSection(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContentApi.contentControllerUpdateStoreSection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContentApi - factory interface
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContentApiFp(configuration)
    return {
        /**
         * 
         * @summary إلغاء الاشتراك
         * @param {ContentApiContentControllerCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCancelSubscription(requestParameters: ContentApiContentControllerCancelSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerCancelSubscription(requestParameters.contentControllerCancelSubscriptionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء بانر جديد
         * @param {ContentApiContentControllerCreateBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateBanner(requestParameters: ContentApiContentControllerCreateBannerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerCreateBanner(requestParameters.createBannerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء صفحة CMS
         * @param {ContentApiContentControllerCreateCMSPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateCMSPage(requestParameters: ContentApiContentControllerCreateCMSPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerCreateCMSPage(requestParameters.contentControllerCreateCMSPageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة سؤال شائع
         * @param {ContentApiContentControllerCreateFAQRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateFAQ(requestParameters: ContentApiContentControllerCreateFAQRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerCreateFAQ(requestParameters.contentControllerCreateFAQRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء قسم متجر
         * @param {ContentApiContentControllerCreateStoreSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateStoreSection(requestParameters: ContentApiContentControllerCreateStoreSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerCreateStoreSection(requestParameters.createStoreSectionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء خطة اشتراك
         * @param {ContentApiContentControllerCreateSubscriptionPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerCreateSubscriptionPlan(requestParameters: ContentApiContentControllerCreateSubscriptionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerCreateSubscriptionPlan(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف بانر
         * @param {ContentApiContentControllerDeleteBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDeleteBanner(requestParameters: ContentApiContentControllerDeleteBannerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerDeleteBanner(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف سؤال شائع
         * @param {ContentApiContentControllerDeleteFAQRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDeleteFAQ(requestParameters: ContentApiContentControllerDeleteFAQRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerDeleteFAQ(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف قسم
         * @param {ContentApiContentControllerDeleteStoreSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerDeleteStoreSection(requestParameters: ContentApiContentControllerDeleteStoreSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerDeleteStoreSection(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على البانرات النشطة (public)
         * @param {ContentApiContentControllerGetActiveBannersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetActiveBanners(requestParameters: ContentApiContentControllerGetActiveBannersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetActiveBanners(requestParameters.placement, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary كل البانرات (admin)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetAllBanners(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetAllBanners(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إعدادات التطبيق (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetAppSettings(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetAppSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على صفحة CMS بالـ slug
         * @param {ContentApiContentControllerGetCMSPageBySlugRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetCMSPageBySlug(requestParameters: ContentApiContentControllerGetCMSPageBySlugRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetCMSPageBySlug(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على صفحات CMS (public)
         * @param {ContentApiContentControllerGetCMSPagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetCMSPages(requestParameters: ContentApiContentControllerGetCMSPagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetCMSPages(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الأسئلة الشائعة (public)
         * @param {ContentApiContentControllerGetFAQsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetFAQs(requestParameters: ContentApiContentControllerGetFAQsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetFAQs(requestParameters.category, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على اشتراكي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetMySubscription(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetMySubscription(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على أقسام المتجر (public)
         * @param {ContentApiContentControllerGetStoreSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetStoreSections(requestParameters: ContentApiContentControllerGetStoreSectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetStoreSections(requestParameters.storeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على خطط الاشتراك (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerGetSubscriptionPlans(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerGetSubscriptionPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل نقرة على بانر
         * @param {ContentApiContentControllerRecordBannerClickRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerRecordBannerClick(requestParameters: ContentApiContentControllerRecordBannerClickRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerRecordBannerClick(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الاشتراك في خطة
         * @param {ContentApiContentControllerSubscribeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerSubscribe(requestParameters: ContentApiContentControllerSubscribeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerSubscribe(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث إعدادات التطبيق
         * @param {ContentApiContentControllerUpdateAppSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateAppSettings(requestParameters: ContentApiContentControllerUpdateAppSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerUpdateAppSettings(requestParameters.contentControllerUpdateAppSettingsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث بانر
         * @param {ContentApiContentControllerUpdateBannerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateBanner(requestParameters: ContentApiContentControllerUpdateBannerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerUpdateBanner(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث صفحة CMS
         * @param {ContentApiContentControllerUpdateCMSPageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateCMSPage(requestParameters: ContentApiContentControllerUpdateCMSPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerUpdateCMSPage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث سؤال شائع
         * @param {ContentApiContentControllerUpdateFAQRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateFAQ(requestParameters: ContentApiContentControllerUpdateFAQRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerUpdateFAQ(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث قسم
         * @param {ContentApiContentControllerUpdateStoreSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentControllerUpdateStoreSection(requestParameters: ContentApiContentControllerUpdateStoreSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.contentControllerUpdateStoreSection(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - interface
 */
export interface ContentApiInterface {
    /**
     * 
     * @summary إلغاء الاشتراك
     * @param {ContentApiContentControllerCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerCancelSubscription(requestParameters: ContentApiContentControllerCancelSubscriptionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء بانر جديد
     * @param {ContentApiContentControllerCreateBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerCreateBanner(requestParameters: ContentApiContentControllerCreateBannerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء صفحة CMS
     * @param {ContentApiContentControllerCreateCMSPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerCreateCMSPage(requestParameters: ContentApiContentControllerCreateCMSPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة سؤال شائع
     * @param {ContentApiContentControllerCreateFAQRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerCreateFAQ(requestParameters: ContentApiContentControllerCreateFAQRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء قسم متجر
     * @param {ContentApiContentControllerCreateStoreSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerCreateStoreSection(requestParameters: ContentApiContentControllerCreateStoreSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء خطة اشتراك
     * @param {ContentApiContentControllerCreateSubscriptionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerCreateSubscriptionPlan(requestParameters: ContentApiContentControllerCreateSubscriptionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف بانر
     * @param {ContentApiContentControllerDeleteBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerDeleteBanner(requestParameters: ContentApiContentControllerDeleteBannerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف سؤال شائع
     * @param {ContentApiContentControllerDeleteFAQRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerDeleteFAQ(requestParameters: ContentApiContentControllerDeleteFAQRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف قسم
     * @param {ContentApiContentControllerDeleteStoreSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerDeleteStoreSection(requestParameters: ContentApiContentControllerDeleteStoreSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على البانرات النشطة (public)
     * @param {ContentApiContentControllerGetActiveBannersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetActiveBanners(requestParameters: ContentApiContentControllerGetActiveBannersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary كل البانرات (admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetAllBanners(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إعدادات التطبيق (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetAppSettings(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على صفحة CMS بالـ slug
     * @param {ContentApiContentControllerGetCMSPageBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetCMSPageBySlug(requestParameters: ContentApiContentControllerGetCMSPageBySlugRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على صفحات CMS (public)
     * @param {ContentApiContentControllerGetCMSPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetCMSPages(requestParameters: ContentApiContentControllerGetCMSPagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الأسئلة الشائعة (public)
     * @param {ContentApiContentControllerGetFAQsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetFAQs(requestParameters: ContentApiContentControllerGetFAQsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على اشتراكي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetMySubscription(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على أقسام المتجر (public)
     * @param {ContentApiContentControllerGetStoreSectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetStoreSections(requestParameters: ContentApiContentControllerGetStoreSectionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على خطط الاشتراك (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerGetSubscriptionPlans(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل نقرة على بانر
     * @param {ContentApiContentControllerRecordBannerClickRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerRecordBannerClick(requestParameters: ContentApiContentControllerRecordBannerClickRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الاشتراك في خطة
     * @param {ContentApiContentControllerSubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerSubscribe(requestParameters: ContentApiContentControllerSubscribeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث إعدادات التطبيق
     * @param {ContentApiContentControllerUpdateAppSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerUpdateAppSettings(requestParameters: ContentApiContentControllerUpdateAppSettingsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث بانر
     * @param {ContentApiContentControllerUpdateBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerUpdateBanner(requestParameters: ContentApiContentControllerUpdateBannerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث صفحة CMS
     * @param {ContentApiContentControllerUpdateCMSPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerUpdateCMSPage(requestParameters: ContentApiContentControllerUpdateCMSPageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث سؤال شائع
     * @param {ContentApiContentControllerUpdateFAQRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerUpdateFAQ(requestParameters: ContentApiContentControllerUpdateFAQRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث قسم
     * @param {ContentApiContentControllerUpdateStoreSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    contentControllerUpdateStoreSection(requestParameters: ContentApiContentControllerUpdateStoreSectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for contentControllerCancelSubscription operation in ContentApi.
 */
export interface ContentApiContentControllerCancelSubscriptionRequest {
    readonly contentControllerCancelSubscriptionRequest: ContentControllerCancelSubscriptionRequest
}

/**
 * Request parameters for contentControllerCreateBanner operation in ContentApi.
 */
export interface ContentApiContentControllerCreateBannerRequest {
    readonly createBannerDto: CreateBannerDto
}

/**
 * Request parameters for contentControllerCreateCMSPage operation in ContentApi.
 */
export interface ContentApiContentControllerCreateCMSPageRequest {
    readonly contentControllerCreateCMSPageRequest: ContentControllerCreateCMSPageRequest
}

/**
 * Request parameters for contentControllerCreateFAQ operation in ContentApi.
 */
export interface ContentApiContentControllerCreateFAQRequest {
    readonly contentControllerCreateFAQRequest: ContentControllerCreateFAQRequest
}

/**
 * Request parameters for contentControllerCreateStoreSection operation in ContentApi.
 */
export interface ContentApiContentControllerCreateStoreSectionRequest {
    readonly createStoreSectionDto: CreateStoreSectionDto
}

/**
 * Request parameters for contentControllerCreateSubscriptionPlan operation in ContentApi.
 */
export interface ContentApiContentControllerCreateSubscriptionPlanRequest {
    readonly body: object
}

/**
 * Request parameters for contentControllerDeleteBanner operation in ContentApi.
 */
export interface ContentApiContentControllerDeleteBannerRequest {
    readonly id: string
}

/**
 * Request parameters for contentControllerDeleteFAQ operation in ContentApi.
 */
export interface ContentApiContentControllerDeleteFAQRequest {
    readonly id: string
}

/**
 * Request parameters for contentControllerDeleteStoreSection operation in ContentApi.
 */
export interface ContentApiContentControllerDeleteStoreSectionRequest {
    readonly id: string
}

/**
 * Request parameters for contentControllerGetActiveBanners operation in ContentApi.
 */
export interface ContentApiContentControllerGetActiveBannersRequest {
    readonly placement: string
}

/**
 * Request parameters for contentControllerGetCMSPageBySlug operation in ContentApi.
 */
export interface ContentApiContentControllerGetCMSPageBySlugRequest {
    readonly slug: string
}

/**
 * Request parameters for contentControllerGetCMSPages operation in ContentApi.
 */
export interface ContentApiContentControllerGetCMSPagesRequest {
    readonly type: string
}

/**
 * Request parameters for contentControllerGetFAQs operation in ContentApi.
 */
export interface ContentApiContentControllerGetFAQsRequest {
    readonly category: string
}

/**
 * Request parameters for contentControllerGetStoreSections operation in ContentApi.
 */
export interface ContentApiContentControllerGetStoreSectionsRequest {
    readonly storeId: string
}

/**
 * Request parameters for contentControllerRecordBannerClick operation in ContentApi.
 */
export interface ContentApiContentControllerRecordBannerClickRequest {
    readonly id: string
}

/**
 * Request parameters for contentControllerSubscribe operation in ContentApi.
 */
export interface ContentApiContentControllerSubscribeRequest {
    readonly body: object
}

/**
 * Request parameters for contentControllerUpdateAppSettings operation in ContentApi.
 */
export interface ContentApiContentControllerUpdateAppSettingsRequest {
    readonly contentControllerUpdateAppSettingsRequest: ContentControllerUpdateAppSettingsRequest
}

/**
 * Request parameters for contentControllerUpdateBanner operation in ContentApi.
 */
export interface ContentApiContentControllerUpdateBannerRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for contentControllerUpdateCMSPage operation in ContentApi.
 */
export interface ContentApiContentControllerUpdateCMSPageRequest {
    readonly id: string
}

/**
 * Request parameters for contentControllerUpdateFAQ operation in ContentApi.
 */
export interface ContentApiContentControllerUpdateFAQRequest {
    readonly id: string
}

/**
 * Request parameters for contentControllerUpdateStoreSection operation in ContentApi.
 */
export interface ContentApiContentControllerUpdateStoreSectionRequest {
    readonly id: string

    readonly body: object
}

/**
 * ContentApi - object-oriented interface
 */
export class ContentApi extends BaseAPI implements ContentApiInterface {
    /**
     * 
     * @summary إلغاء الاشتراك
     * @param {ContentApiContentControllerCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerCancelSubscription(requestParameters: ContentApiContentControllerCancelSubscriptionRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCancelSubscription(requestParameters.contentControllerCancelSubscriptionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء بانر جديد
     * @param {ContentApiContentControllerCreateBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerCreateBanner(requestParameters: ContentApiContentControllerCreateBannerRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCreateBanner(requestParameters.createBannerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء صفحة CMS
     * @param {ContentApiContentControllerCreateCMSPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerCreateCMSPage(requestParameters: ContentApiContentControllerCreateCMSPageRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCreateCMSPage(requestParameters.contentControllerCreateCMSPageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة سؤال شائع
     * @param {ContentApiContentControllerCreateFAQRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerCreateFAQ(requestParameters: ContentApiContentControllerCreateFAQRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCreateFAQ(requestParameters.contentControllerCreateFAQRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء قسم متجر
     * @param {ContentApiContentControllerCreateStoreSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerCreateStoreSection(requestParameters: ContentApiContentControllerCreateStoreSectionRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCreateStoreSection(requestParameters.createStoreSectionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء خطة اشتراك
     * @param {ContentApiContentControllerCreateSubscriptionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerCreateSubscriptionPlan(requestParameters: ContentApiContentControllerCreateSubscriptionPlanRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerCreateSubscriptionPlan(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف بانر
     * @param {ContentApiContentControllerDeleteBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerDeleteBanner(requestParameters: ContentApiContentControllerDeleteBannerRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerDeleteBanner(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف سؤال شائع
     * @param {ContentApiContentControllerDeleteFAQRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerDeleteFAQ(requestParameters: ContentApiContentControllerDeleteFAQRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerDeleteFAQ(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف قسم
     * @param {ContentApiContentControllerDeleteStoreSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerDeleteStoreSection(requestParameters: ContentApiContentControllerDeleteStoreSectionRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerDeleteStoreSection(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على البانرات النشطة (public)
     * @param {ContentApiContentControllerGetActiveBannersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetActiveBanners(requestParameters: ContentApiContentControllerGetActiveBannersRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetActiveBanners(requestParameters.placement, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary كل البانرات (admin)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetAllBanners(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetAllBanners(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إعدادات التطبيق (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetAppSettings(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetAppSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على صفحة CMS بالـ slug
     * @param {ContentApiContentControllerGetCMSPageBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetCMSPageBySlug(requestParameters: ContentApiContentControllerGetCMSPageBySlugRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetCMSPageBySlug(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على صفحات CMS (public)
     * @param {ContentApiContentControllerGetCMSPagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetCMSPages(requestParameters: ContentApiContentControllerGetCMSPagesRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetCMSPages(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الأسئلة الشائعة (public)
     * @param {ContentApiContentControllerGetFAQsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetFAQs(requestParameters: ContentApiContentControllerGetFAQsRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetFAQs(requestParameters.category, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على اشتراكي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetMySubscription(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetMySubscription(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على أقسام المتجر (public)
     * @param {ContentApiContentControllerGetStoreSectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetStoreSections(requestParameters: ContentApiContentControllerGetStoreSectionsRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetStoreSections(requestParameters.storeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على خطط الاشتراك (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerGetSubscriptionPlans(options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerGetSubscriptionPlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل نقرة على بانر
     * @param {ContentApiContentControllerRecordBannerClickRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerRecordBannerClick(requestParameters: ContentApiContentControllerRecordBannerClickRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerRecordBannerClick(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الاشتراك في خطة
     * @param {ContentApiContentControllerSubscribeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerSubscribe(requestParameters: ContentApiContentControllerSubscribeRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerSubscribe(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث إعدادات التطبيق
     * @param {ContentApiContentControllerUpdateAppSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerUpdateAppSettings(requestParameters: ContentApiContentControllerUpdateAppSettingsRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerUpdateAppSettings(requestParameters.contentControllerUpdateAppSettingsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث بانر
     * @param {ContentApiContentControllerUpdateBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerUpdateBanner(requestParameters: ContentApiContentControllerUpdateBannerRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerUpdateBanner(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث صفحة CMS
     * @param {ContentApiContentControllerUpdateCMSPageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerUpdateCMSPage(requestParameters: ContentApiContentControllerUpdateCMSPageRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerUpdateCMSPage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث سؤال شائع
     * @param {ContentApiContentControllerUpdateFAQRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerUpdateFAQ(requestParameters: ContentApiContentControllerUpdateFAQRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerUpdateFAQ(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث قسم
     * @param {ContentApiContentControllerUpdateStoreSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public contentControllerUpdateStoreSection(requestParameters: ContentApiContentControllerUpdateStoreSectionRequest, options?: RawAxiosRequestConfig) {
        return ContentApiFp(this.configuration).contentControllerUpdateStoreSection(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeliveryStoresApi - axios parameter creator
 */
export const DeliveryStoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary جلب متجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerFindStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryStoreControllerFindStore', 'id', id)
            const localVarPath = `/delivery/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب المتاجر - عام
         * @param {string} categoryId 
         * @param {boolean} isTrending 
         * @param {boolean} isFeatured 
         * @param {string} usageType 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerFindStores: async (categoryId: string, isTrending: boolean, isFeatured: boolean, usageType: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('deliveryStoreControllerFindStores', 'categoryId', categoryId)
            // verify required parameter 'isTrending' is not null or undefined
            assertParamExists('deliveryStoreControllerFindStores', 'isTrending', isTrending)
            // verify required parameter 'isFeatured' is not null or undefined
            assertParamExists('deliveryStoreControllerFindStores', 'isFeatured', isFeatured)
            // verify required parameter 'usageType' is not null or undefined
            assertParamExists('deliveryStoreControllerFindStores', 'usageType', usageType)
            const localVarPath = `/delivery/stores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (isTrending !== undefined) {
                localVarQueryParameter['isTrending'] = isTrending;
            }

            if (isFeatured !== undefined) {
                localVarQueryParameter['isFeatured'] = isFeatured;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب منتجات المتجر
         * @param {string} id 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerGetProducts: async (id: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryStoreControllerGetProducts', 'id', id)
            const localVarPath = `/delivery/stores/{id}/products`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مراجعات المتجر
         * @param {string} id 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerGetStoreReviews: async (id: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryStoreControllerGetStoreReviews', 'id', id)
            const localVarPath = `/delivery/stores/{id}/reviews`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات المتجر - عامة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerGetStoreStatistics: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryStoreControllerGetStoreStatistics', 'id', id)
            const localVarPath = `/delivery/stores/{id}/statistics`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary البحث عن متاجر
         * @param {string} q 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerSearchStores: async (q: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('deliveryStoreControllerSearchStores', 'q', q)
            const localVarPath = `/delivery/stores/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerUpdateStore: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deliveryStoreControllerUpdateStore', 'id', id)
            const localVarPath = `/delivery/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryStoresApi - functional programming interface
 */
export const DeliveryStoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeliveryStoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary جلب متجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerFindStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerFindStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerFindStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب المتاجر - عام
         * @param {string} categoryId 
         * @param {boolean} isTrending 
         * @param {boolean} isFeatured 
         * @param {string} usageType 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerFindStores(categoryId: string, isTrending: boolean, isFeatured: boolean, usageType: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerFindStores(categoryId, isTrending, isFeatured, usageType, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerFindStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب منتجات المتجر
         * @param {string} id 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerGetProducts(id: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerGetProducts(id, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerGetProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مراجعات المتجر
         * @param {string} id 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerGetStoreReviews(id: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerGetStoreReviews(id, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerGetStoreReviews']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات المتجر - عامة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerGetStoreStatistics(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerGetStoreStatistics(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerGetStoreStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary البحث عن متاجر
         * @param {string} q 
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerSearchStores(q: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerSearchStores(q, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerSearchStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryStoreControllerUpdateStore(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryStoreControllerUpdateStore(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryStoresApi.deliveryStoreControllerUpdateStore']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeliveryStoresApi - factory interface
 */
export const DeliveryStoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeliveryStoresApiFp(configuration)
    return {
        /**
         * 
         * @summary جلب متجر محدد
         * @param {DeliveryStoresApiDeliveryStoreControllerFindStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerFindStore(requestParameters: DeliveryStoresApiDeliveryStoreControllerFindStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerFindStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب المتاجر - عام
         * @param {DeliveryStoresApiDeliveryStoreControllerFindStoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerFindStores(requestParameters: DeliveryStoresApiDeliveryStoreControllerFindStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerFindStores(requestParameters.categoryId, requestParameters.isTrending, requestParameters.isFeatured, requestParameters.usageType, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب منتجات المتجر
         * @param {DeliveryStoresApiDeliveryStoreControllerGetProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerGetProducts(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerGetProducts(requestParameters.id, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مراجعات المتجر
         * @param {DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerGetStoreReviews(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerGetStoreReviews(requestParameters.id, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات المتجر - عامة
         * @param {DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerGetStoreStatistics(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerGetStoreStatistics(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary البحث عن متاجر
         * @param {DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerSearchStores(requestParameters: DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerSearchStores(requestParameters.q, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث متجر
         * @param {DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryStoreControllerUpdateStore(requestParameters: DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deliveryStoreControllerUpdateStore(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeliveryStoresApi - interface
 */
export interface DeliveryStoresApiInterface {
    /**
     * 
     * @summary جلب متجر محدد
     * @param {DeliveryStoresApiDeliveryStoreControllerFindStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerFindStore(requestParameters: DeliveryStoresApiDeliveryStoreControllerFindStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب المتاجر - عام
     * @param {DeliveryStoresApiDeliveryStoreControllerFindStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerFindStores(requestParameters: DeliveryStoresApiDeliveryStoreControllerFindStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب منتجات المتجر
     * @param {DeliveryStoresApiDeliveryStoreControllerGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerGetProducts(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مراجعات المتجر
     * @param {DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerGetStoreReviews(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات المتجر - عامة
     * @param {DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerGetStoreStatistics(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary البحث عن متاجر
     * @param {DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerSearchStores(requestParameters: DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث متجر
     * @param {DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deliveryStoreControllerUpdateStore(requestParameters: DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for deliveryStoreControllerFindStore operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerFindStoreRequest {
    readonly id: string
}

/**
 * Request parameters for deliveryStoreControllerFindStores operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerFindStoresRequest {
    readonly categoryId: string

    readonly isTrending: boolean

    readonly isFeatured: boolean

    readonly usageType: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for deliveryStoreControllerGetProducts operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerGetProductsRequest {
    readonly id: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for deliveryStoreControllerGetStoreReviews operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest {
    readonly id: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for deliveryStoreControllerGetStoreStatistics operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest {
    readonly id: string
}

/**
 * Request parameters for deliveryStoreControllerSearchStores operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest {
    readonly q: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for deliveryStoreControllerUpdateStore operation in DeliveryStoresApi.
 */
export interface DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest {
    readonly id: string
}

/**
 * DeliveryStoresApi - object-oriented interface
 */
export class DeliveryStoresApi extends BaseAPI implements DeliveryStoresApiInterface {
    /**
     * 
     * @summary جلب متجر محدد
     * @param {DeliveryStoresApiDeliveryStoreControllerFindStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerFindStore(requestParameters: DeliveryStoresApiDeliveryStoreControllerFindStoreRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerFindStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب المتاجر - عام
     * @param {DeliveryStoresApiDeliveryStoreControllerFindStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerFindStores(requestParameters: DeliveryStoresApiDeliveryStoreControllerFindStoresRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerFindStores(requestParameters.categoryId, requestParameters.isTrending, requestParameters.isFeatured, requestParameters.usageType, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب منتجات المتجر
     * @param {DeliveryStoresApiDeliveryStoreControllerGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerGetProducts(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetProductsRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerGetProducts(requestParameters.id, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مراجعات المتجر
     * @param {DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerGetStoreReviews(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetStoreReviewsRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerGetStoreReviews(requestParameters.id, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات المتجر - عامة
     * @param {DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerGetStoreStatistics(requestParameters: DeliveryStoresApiDeliveryStoreControllerGetStoreStatisticsRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerGetStoreStatistics(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary البحث عن متاجر
     * @param {DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerSearchStores(requestParameters: DeliveryStoresApiDeliveryStoreControllerSearchStoresRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerSearchStores(requestParameters.q, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث متجر
     * @param {DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deliveryStoreControllerUpdateStore(requestParameters: DeliveryStoresApiDeliveryStoreControllerUpdateStoreRequest, options?: RawAxiosRequestConfig) {
        return DeliveryStoresApiFp(this.configuration).deliveryStoreControllerUpdateStore(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DriverApi - axios parameter creator
 */
export const DriverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary قبول طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerAcceptOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('driverControllerAcceptOrder', 'id', id)
            const localVarPath = `/drivers/orders/{id}/accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerCancelVacation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('driverControllerCancelVacation', 'id', id)
            const localVarPath = `/drivers/vacations/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تغيير كلمة المرور
         * @param {DriverControllerChangePasswordRequest} driverControllerChangePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerChangePassword: async (driverControllerChangePasswordRequest: DriverControllerChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverControllerChangePasswordRequest' is not null or undefined
            assertParamExists('driverControllerChangePassword', 'driverControllerChangePasswordRequest', driverControllerChangePasswordRequest)
            const localVarPath = `/drivers/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driverControllerChangePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إتمام التوصيل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerCompleteDelivery: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('driverControllerCompleteDelivery', 'id', id)
            const localVarPath = `/drivers/orders/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء سائق جديد (للإدارة)
         * @param {CreateDriverDto} createDriverDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerCreate: async (createDriverDto: CreateDriverDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDriverDto' is not null or undefined
            assertParamExists('driverControllerCreate', 'createDriverDto', createDriverDto)
            const localVarPath = `/drivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDriverDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب السائقين المتاحين
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerFindAvailable: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب سائق محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('driverControllerFindOne', 'id', id)
            const localVarPath = `/drivers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الطلبات المتاحة للاستلام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetAvailableOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/orders/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أرباح اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetDailyEarnings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/earnings/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مستنداتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetDocuments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary مستندات سائق (Admin)
         * @param {string} driverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetDriverDocumentsAdmin: async (driverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('driverControllerGetDriverDocumentsAdmin', 'driverId', driverId)
            const localVarPath = `/drivers/{driverId}/documents`
                .replace(`{${"driverId"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أرباحي
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetEarnings: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('driverControllerGetEarnings', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('driverControllerGetEarnings', 'endDate', endDate)
            const localVarPath = `/drivers/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إجازاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetMyVacations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/vacations/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل الطلبات
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetOrdersHistory: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/orders/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملفي الشخصي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائياتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رصيد الإجازات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetVacationBalance: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/vacations/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سياسة الإجازات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetVacationPolicy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/vacations/policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أرباح الأسبوع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetWeeklyEarnings: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/drivers/earnings/weekly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerRejectOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('driverControllerRejectOrder', 'id', id)
            const localVarPath = `/drivers/orders/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الإبلاغ عن مشكلة
         * @param {DriverControllerReportIssueRequest} driverControllerReportIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerReportIssue: async (driverControllerReportIssueRequest: DriverControllerReportIssueRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverControllerReportIssueRequest' is not null or undefined
            assertParamExists('driverControllerReportIssue', 'driverControllerReportIssueRequest', driverControllerReportIssueRequest)
            const localVarPath = `/drivers/issues/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driverControllerReportIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلب إجازة
         * @param {DriverControllerRequestVacationRequest} driverControllerRequestVacationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerRequestVacation: async (driverControllerRequestVacationRequest: DriverControllerRequestVacationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverControllerRequestVacationRequest' is not null or undefined
            assertParamExists('driverControllerRequestVacation', 'driverControllerRequestVacationRequest', driverControllerRequestVacationRequest)
            const localVarPath = `/drivers/vacations/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driverControllerRequestVacationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary بدء التوصيل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerStartDelivery: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('driverControllerStartDelivery', 'id', id)
            const localVarPath = `/drivers/orders/{id}/start-delivery`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث حالة التوفر
         * @param {DriverControllerUpdateAvailabilityRequest} driverControllerUpdateAvailabilityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUpdateAvailability: async (driverControllerUpdateAvailabilityRequest: DriverControllerUpdateAvailabilityRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverControllerUpdateAvailabilityRequest' is not null or undefined
            assertParamExists('driverControllerUpdateAvailability', 'driverControllerUpdateAvailabilityRequest', driverControllerUpdateAvailabilityRequest)
            const localVarPath = `/drivers/availability`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driverControllerUpdateAvailabilityRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث موقع السائق
         * @param {UpdateLocationDto} updateLocationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUpdateLocation: async (updateLocationDto: UpdateLocationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateLocationDto' is not null or undefined
            assertParamExists('driverControllerUpdateLocation', 'updateLocationDto', updateLocationDto)
            const localVarPath = `/drivers/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateLocationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث الملف الشخصي
         * @param {DriverControllerUpdateProfileRequest} driverControllerUpdateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUpdateProfile: async (driverControllerUpdateProfileRequest: DriverControllerUpdateProfileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverControllerUpdateProfileRequest' is not null or undefined
            assertParamExists('driverControllerUpdateProfile', 'driverControllerUpdateProfileRequest', driverControllerUpdateProfileRequest)
            const localVarPath = `/drivers/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driverControllerUpdateProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفع مستند
         * @param {DriverControllerUploadDocumentRequest} driverControllerUploadDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUploadDocument: async (driverControllerUploadDocumentRequest: DriverControllerUploadDocumentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverControllerUploadDocumentRequest' is not null or undefined
            assertParamExists('driverControllerUploadDocument', 'driverControllerUploadDocumentRequest', driverControllerUploadDocumentRequest)
            const localVarPath = `/drivers/documents/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driverControllerUploadDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التحقق من مستند (Admin)
         * @param {string} driverId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerVerifyDocument: async (driverId: string, docId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('driverControllerVerifyDocument', 'driverId', driverId)
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('driverControllerVerifyDocument', 'docId', docId)
            const localVarPath = `/drivers/{driverId}/documents/{docId}/verify`
                .replace(`{${"driverId"}}`, encodeURIComponent(String(driverId)))
                .replace(`{${"docId"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DriverApi - functional programming interface
 */
export const DriverApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DriverApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary قبول طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerAcceptOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerAcceptOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerAcceptOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerCancelVacation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerCancelVacation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerCancelVacation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تغيير كلمة المرور
         * @param {DriverControllerChangePasswordRequest} driverControllerChangePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerChangePassword(driverControllerChangePasswordRequest: DriverControllerChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerChangePassword(driverControllerChangePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إتمام التوصيل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerCompleteDelivery(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerCompleteDelivery(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerCompleteDelivery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء سائق جديد (للإدارة)
         * @param {CreateDriverDto} createDriverDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerCreate(createDriverDto: CreateDriverDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerCreate(createDriverDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب السائقين المتاحين
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerFindAvailable(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerFindAvailable(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerFindAvailable']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب سائق محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الطلبات المتاحة للاستلام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetAvailableOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetAvailableOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetAvailableOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أرباح اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetDailyEarnings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetDailyEarnings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetDailyEarnings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مستنداتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetDocuments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetDocuments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetDocuments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary مستندات سائق (Admin)
         * @param {string} driverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetDriverDocumentsAdmin(driverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetDriverDocumentsAdmin(driverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetDriverDocumentsAdmin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أرباحي
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetEarnings(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetEarnings(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetEarnings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إجازاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetMyVacations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetMyVacations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetMyVacations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل الطلبات
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetOrdersHistory(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetOrdersHistory(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetOrdersHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملفي الشخصي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائياتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رصيد الإجازات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetVacationBalance(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetVacationBalance(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetVacationBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سياسة الإجازات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetVacationPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetVacationPolicy(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetVacationPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أرباح الأسبوع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerGetWeeklyEarnings(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerGetWeeklyEarnings(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerGetWeeklyEarnings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerRejectOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerRejectOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerRejectOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الإبلاغ عن مشكلة
         * @param {DriverControllerReportIssueRequest} driverControllerReportIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerReportIssue(driverControllerReportIssueRequest: DriverControllerReportIssueRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerReportIssue(driverControllerReportIssueRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerReportIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلب إجازة
         * @param {DriverControllerRequestVacationRequest} driverControllerRequestVacationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerRequestVacation(driverControllerRequestVacationRequest: DriverControllerRequestVacationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerRequestVacation(driverControllerRequestVacationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerRequestVacation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary بدء التوصيل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerStartDelivery(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerStartDelivery(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerStartDelivery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث حالة التوفر
         * @param {DriverControllerUpdateAvailabilityRequest} driverControllerUpdateAvailabilityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerUpdateAvailability(driverControllerUpdateAvailabilityRequest: DriverControllerUpdateAvailabilityRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerUpdateAvailability(driverControllerUpdateAvailabilityRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerUpdateAvailability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث موقع السائق
         * @param {UpdateLocationDto} updateLocationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerUpdateLocation(updateLocationDto: UpdateLocationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerUpdateLocation(updateLocationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerUpdateLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث الملف الشخصي
         * @param {DriverControllerUpdateProfileRequest} driverControllerUpdateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerUpdateProfile(driverControllerUpdateProfileRequest: DriverControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerUpdateProfile(driverControllerUpdateProfileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerUpdateProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفع مستند
         * @param {DriverControllerUploadDocumentRequest} driverControllerUploadDocumentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerUploadDocument(driverControllerUploadDocumentRequest: DriverControllerUploadDocumentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerUploadDocument(driverControllerUploadDocumentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerUploadDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التحقق من مستند (Admin)
         * @param {string} driverId 
         * @param {string} docId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async driverControllerVerifyDocument(driverId: string, docId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.driverControllerVerifyDocument(driverId, docId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DriverApi.driverControllerVerifyDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DriverApi - factory interface
 */
export const DriverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DriverApiFp(configuration)
    return {
        /**
         * 
         * @summary قبول طلب
         * @param {DriverApiDriverControllerAcceptOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerAcceptOrder(requestParameters: DriverApiDriverControllerAcceptOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerAcceptOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء طلب إجازة
         * @param {DriverApiDriverControllerCancelVacationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerCancelVacation(requestParameters: DriverApiDriverControllerCancelVacationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerCancelVacation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تغيير كلمة المرور
         * @param {DriverApiDriverControllerChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerChangePassword(requestParameters: DriverApiDriverControllerChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerChangePassword(requestParameters.driverControllerChangePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إتمام التوصيل
         * @param {DriverApiDriverControllerCompleteDeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerCompleteDelivery(requestParameters: DriverApiDriverControllerCompleteDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerCompleteDelivery(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء سائق جديد (للإدارة)
         * @param {DriverApiDriverControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerCreate(requestParameters: DriverApiDriverControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerCreate(requestParameters.createDriverDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب السائقين المتاحين
         * @param {DriverApiDriverControllerFindAvailableRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerFindAvailable(requestParameters: DriverApiDriverControllerFindAvailableRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerFindAvailable(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب سائق محدد
         * @param {DriverApiDriverControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerFindOne(requestParameters: DriverApiDriverControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الطلبات المتاحة للاستلام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetAvailableOrders(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetAvailableOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أرباح اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetDailyEarnings(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetDailyEarnings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مستنداتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetDocuments(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary مستندات سائق (Admin)
         * @param {DriverApiDriverControllerGetDriverDocumentsAdminRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetDriverDocumentsAdmin(requestParameters: DriverApiDriverControllerGetDriverDocumentsAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetDriverDocumentsAdmin(requestParameters.driverId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أرباحي
         * @param {DriverApiDriverControllerGetEarningsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetEarnings(requestParameters: DriverApiDriverControllerGetEarningsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetEarnings(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إجازاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetMyVacations(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetMyVacations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل الطلبات
         * @param {DriverApiDriverControllerGetOrdersHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetOrdersHistory(requestParameters: DriverApiDriverControllerGetOrdersHistoryRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetOrdersHistory(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملفي الشخصي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائياتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رصيد الإجازات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetVacationBalance(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetVacationBalance(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سياسة الإجازات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetVacationPolicy(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetVacationPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أرباح الأسبوع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerGetWeeklyEarnings(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerGetWeeklyEarnings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض طلب
         * @param {DriverApiDriverControllerRejectOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerRejectOrder(requestParameters: DriverApiDriverControllerRejectOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerRejectOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الإبلاغ عن مشكلة
         * @param {DriverApiDriverControllerReportIssueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerReportIssue(requestParameters: DriverApiDriverControllerReportIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerReportIssue(requestParameters.driverControllerReportIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلب إجازة
         * @param {DriverApiDriverControllerRequestVacationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerRequestVacation(requestParameters: DriverApiDriverControllerRequestVacationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerRequestVacation(requestParameters.driverControllerRequestVacationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary بدء التوصيل
         * @param {DriverApiDriverControllerStartDeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerStartDelivery(requestParameters: DriverApiDriverControllerStartDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerStartDelivery(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث حالة التوفر
         * @param {DriverApiDriverControllerUpdateAvailabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUpdateAvailability(requestParameters: DriverApiDriverControllerUpdateAvailabilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerUpdateAvailability(requestParameters.driverControllerUpdateAvailabilityRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث موقع السائق
         * @param {DriverApiDriverControllerUpdateLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUpdateLocation(requestParameters: DriverApiDriverControllerUpdateLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerUpdateLocation(requestParameters.updateLocationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث الملف الشخصي
         * @param {DriverApiDriverControllerUpdateProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUpdateProfile(requestParameters: DriverApiDriverControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerUpdateProfile(requestParameters.driverControllerUpdateProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفع مستند
         * @param {DriverApiDriverControllerUploadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerUploadDocument(requestParameters: DriverApiDriverControllerUploadDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerUploadDocument(requestParameters.driverControllerUploadDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التحقق من مستند (Admin)
         * @param {DriverApiDriverControllerVerifyDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        driverControllerVerifyDocument(requestParameters: DriverApiDriverControllerVerifyDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.driverControllerVerifyDocument(requestParameters.driverId, requestParameters.docId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DriverApi - interface
 */
export interface DriverApiInterface {
    /**
     * 
     * @summary قبول طلب
     * @param {DriverApiDriverControllerAcceptOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerAcceptOrder(requestParameters: DriverApiDriverControllerAcceptOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء طلب إجازة
     * @param {DriverApiDriverControllerCancelVacationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerCancelVacation(requestParameters: DriverApiDriverControllerCancelVacationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تغيير كلمة المرور
     * @param {DriverApiDriverControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerChangePassword(requestParameters: DriverApiDriverControllerChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إتمام التوصيل
     * @param {DriverApiDriverControllerCompleteDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerCompleteDelivery(requestParameters: DriverApiDriverControllerCompleteDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء سائق جديد (للإدارة)
     * @param {DriverApiDriverControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerCreate(requestParameters: DriverApiDriverControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب السائقين المتاحين
     * @param {DriverApiDriverControllerFindAvailableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerFindAvailable(requestParameters?: DriverApiDriverControllerFindAvailableRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب سائق محدد
     * @param {DriverApiDriverControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerFindOne(requestParameters: DriverApiDriverControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الطلبات المتاحة للاستلام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetAvailableOrders(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أرباح اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetDailyEarnings(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مستنداتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetDocuments(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary مستندات سائق (Admin)
     * @param {DriverApiDriverControllerGetDriverDocumentsAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetDriverDocumentsAdmin(requestParameters: DriverApiDriverControllerGetDriverDocumentsAdminRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أرباحي
     * @param {DriverApiDriverControllerGetEarningsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetEarnings(requestParameters: DriverApiDriverControllerGetEarningsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إجازاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetMyVacations(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل الطلبات
     * @param {DriverApiDriverControllerGetOrdersHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetOrdersHistory(requestParameters?: DriverApiDriverControllerGetOrdersHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملفي الشخصي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائياتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رصيد الإجازات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetVacationBalance(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سياسة الإجازات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetVacationPolicy(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أرباح الأسبوع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerGetWeeklyEarnings(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض طلب
     * @param {DriverApiDriverControllerRejectOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerRejectOrder(requestParameters: DriverApiDriverControllerRejectOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الإبلاغ عن مشكلة
     * @param {DriverApiDriverControllerReportIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerReportIssue(requestParameters: DriverApiDriverControllerReportIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلب إجازة
     * @param {DriverApiDriverControllerRequestVacationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerRequestVacation(requestParameters: DriverApiDriverControllerRequestVacationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary بدء التوصيل
     * @param {DriverApiDriverControllerStartDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerStartDelivery(requestParameters: DriverApiDriverControllerStartDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث حالة التوفر
     * @param {DriverApiDriverControllerUpdateAvailabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerUpdateAvailability(requestParameters: DriverApiDriverControllerUpdateAvailabilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث موقع السائق
     * @param {DriverApiDriverControllerUpdateLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerUpdateLocation(requestParameters: DriverApiDriverControllerUpdateLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث الملف الشخصي
     * @param {DriverApiDriverControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerUpdateProfile(requestParameters: DriverApiDriverControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفع مستند
     * @param {DriverApiDriverControllerUploadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerUploadDocument(requestParameters: DriverApiDriverControllerUploadDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التحقق من مستند (Admin)
     * @param {DriverApiDriverControllerVerifyDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    driverControllerVerifyDocument(requestParameters: DriverApiDriverControllerVerifyDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for driverControllerAcceptOrder operation in DriverApi.
 */
export interface DriverApiDriverControllerAcceptOrderRequest {
    readonly id: string
}

/**
 * Request parameters for driverControllerCancelVacation operation in DriverApi.
 */
export interface DriverApiDriverControllerCancelVacationRequest {
    readonly id: string
}

/**
 * Request parameters for driverControllerChangePassword operation in DriverApi.
 */
export interface DriverApiDriverControllerChangePasswordRequest {
    readonly driverControllerChangePasswordRequest: DriverControllerChangePasswordRequest
}

/**
 * Request parameters for driverControllerCompleteDelivery operation in DriverApi.
 */
export interface DriverApiDriverControllerCompleteDeliveryRequest {
    readonly id: string
}

/**
 * Request parameters for driverControllerCreate operation in DriverApi.
 */
export interface DriverApiDriverControllerCreateRequest {
    readonly createDriverDto: CreateDriverDto
}

/**
 * Request parameters for driverControllerFindAvailable operation in DriverApi.
 */
export interface DriverApiDriverControllerFindAvailableRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for driverControllerFindOne operation in DriverApi.
 */
export interface DriverApiDriverControllerFindOneRequest {
    readonly id: string
}

/**
 * Request parameters for driverControllerGetDriverDocumentsAdmin operation in DriverApi.
 */
export interface DriverApiDriverControllerGetDriverDocumentsAdminRequest {
    readonly driverId: string
}

/**
 * Request parameters for driverControllerGetEarnings operation in DriverApi.
 */
export interface DriverApiDriverControllerGetEarningsRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for driverControllerGetOrdersHistory operation in DriverApi.
 */
export interface DriverApiDriverControllerGetOrdersHistoryRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for driverControllerRejectOrder operation in DriverApi.
 */
export interface DriverApiDriverControllerRejectOrderRequest {
    readonly id: string
}

/**
 * Request parameters for driverControllerReportIssue operation in DriverApi.
 */
export interface DriverApiDriverControllerReportIssueRequest {
    readonly driverControllerReportIssueRequest: DriverControllerReportIssueRequest
}

/**
 * Request parameters for driverControllerRequestVacation operation in DriverApi.
 */
export interface DriverApiDriverControllerRequestVacationRequest {
    readonly driverControllerRequestVacationRequest: DriverControllerRequestVacationRequest
}

/**
 * Request parameters for driverControllerStartDelivery operation in DriverApi.
 */
export interface DriverApiDriverControllerStartDeliveryRequest {
    readonly id: string
}

/**
 * Request parameters for driverControllerUpdateAvailability operation in DriverApi.
 */
export interface DriverApiDriverControllerUpdateAvailabilityRequest {
    readonly driverControllerUpdateAvailabilityRequest: DriverControllerUpdateAvailabilityRequest
}

/**
 * Request parameters for driverControllerUpdateLocation operation in DriverApi.
 */
export interface DriverApiDriverControllerUpdateLocationRequest {
    readonly updateLocationDto: UpdateLocationDto
}

/**
 * Request parameters for driverControllerUpdateProfile operation in DriverApi.
 */
export interface DriverApiDriverControllerUpdateProfileRequest {
    readonly driverControllerUpdateProfileRequest: DriverControllerUpdateProfileRequest
}

/**
 * Request parameters for driverControllerUploadDocument operation in DriverApi.
 */
export interface DriverApiDriverControllerUploadDocumentRequest {
    readonly driverControllerUploadDocumentRequest: DriverControllerUploadDocumentRequest
}

/**
 * Request parameters for driverControllerVerifyDocument operation in DriverApi.
 */
export interface DriverApiDriverControllerVerifyDocumentRequest {
    readonly driverId: string

    readonly docId: string
}

/**
 * DriverApi - object-oriented interface
 */
export class DriverApi extends BaseAPI implements DriverApiInterface {
    /**
     * 
     * @summary قبول طلب
     * @param {DriverApiDriverControllerAcceptOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerAcceptOrder(requestParameters: DriverApiDriverControllerAcceptOrderRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerAcceptOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء طلب إجازة
     * @param {DriverApiDriverControllerCancelVacationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerCancelVacation(requestParameters: DriverApiDriverControllerCancelVacationRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerCancelVacation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تغيير كلمة المرور
     * @param {DriverApiDriverControllerChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerChangePassword(requestParameters: DriverApiDriverControllerChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerChangePassword(requestParameters.driverControllerChangePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إتمام التوصيل
     * @param {DriverApiDriverControllerCompleteDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerCompleteDelivery(requestParameters: DriverApiDriverControllerCompleteDeliveryRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerCompleteDelivery(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء سائق جديد (للإدارة)
     * @param {DriverApiDriverControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerCreate(requestParameters: DriverApiDriverControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerCreate(requestParameters.createDriverDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب السائقين المتاحين
     * @param {DriverApiDriverControllerFindAvailableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerFindAvailable(requestParameters: DriverApiDriverControllerFindAvailableRequest = {}, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerFindAvailable(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب سائق محدد
     * @param {DriverApiDriverControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerFindOne(requestParameters: DriverApiDriverControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الطلبات المتاحة للاستلام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetAvailableOrders(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetAvailableOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أرباح اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetDailyEarnings(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetDailyEarnings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مستنداتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetDocuments(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetDocuments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary مستندات سائق (Admin)
     * @param {DriverApiDriverControllerGetDriverDocumentsAdminRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetDriverDocumentsAdmin(requestParameters: DriverApiDriverControllerGetDriverDocumentsAdminRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetDriverDocumentsAdmin(requestParameters.driverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أرباحي
     * @param {DriverApiDriverControllerGetEarningsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetEarnings(requestParameters: DriverApiDriverControllerGetEarningsRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetEarnings(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إجازاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetMyVacations(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetMyVacations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل الطلبات
     * @param {DriverApiDriverControllerGetOrdersHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetOrdersHistory(requestParameters: DriverApiDriverControllerGetOrdersHistoryRequest = {}, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetOrdersHistory(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملفي الشخصي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetProfile(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائياتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetStatistics(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رصيد الإجازات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetVacationBalance(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetVacationBalance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سياسة الإجازات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetVacationPolicy(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetVacationPolicy(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أرباح الأسبوع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerGetWeeklyEarnings(options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerGetWeeklyEarnings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض طلب
     * @param {DriverApiDriverControllerRejectOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerRejectOrder(requestParameters: DriverApiDriverControllerRejectOrderRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerRejectOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الإبلاغ عن مشكلة
     * @param {DriverApiDriverControllerReportIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerReportIssue(requestParameters: DriverApiDriverControllerReportIssueRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerReportIssue(requestParameters.driverControllerReportIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلب إجازة
     * @param {DriverApiDriverControllerRequestVacationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerRequestVacation(requestParameters: DriverApiDriverControllerRequestVacationRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerRequestVacation(requestParameters.driverControllerRequestVacationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary بدء التوصيل
     * @param {DriverApiDriverControllerStartDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerStartDelivery(requestParameters: DriverApiDriverControllerStartDeliveryRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerStartDelivery(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث حالة التوفر
     * @param {DriverApiDriverControllerUpdateAvailabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerUpdateAvailability(requestParameters: DriverApiDriverControllerUpdateAvailabilityRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerUpdateAvailability(requestParameters.driverControllerUpdateAvailabilityRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث موقع السائق
     * @param {DriverApiDriverControllerUpdateLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerUpdateLocation(requestParameters: DriverApiDriverControllerUpdateLocationRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerUpdateLocation(requestParameters.updateLocationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث الملف الشخصي
     * @param {DriverApiDriverControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerUpdateProfile(requestParameters: DriverApiDriverControllerUpdateProfileRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerUpdateProfile(requestParameters.driverControllerUpdateProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفع مستند
     * @param {DriverApiDriverControllerUploadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerUploadDocument(requestParameters: DriverApiDriverControllerUploadDocumentRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerUploadDocument(requestParameters.driverControllerUploadDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التحقق من مستند (Admin)
     * @param {DriverApiDriverControllerVerifyDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public driverControllerVerifyDocument(requestParameters: DriverApiDriverControllerVerifyDocumentRequest, options?: RawAxiosRequestConfig) {
        return DriverApiFp(this.configuration).driverControllerVerifyDocument(requestParameters.driverId, requestParameters.docId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ERSystemApi - axios parameter creator
 */
export const ERSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary الموافقة على طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerApproveLeaveRequest: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerApproveLeaveRequest', 'id', id)
            const localVarPath = `/er/leave-requests/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على كشف راتب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerApprovePayroll: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerApprovePayroll', 'id', id)
            const localVarPath = `/er/payroll/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل حضور
         * @param {ERControllerCheckInRequest} eRControllerCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCheckIn: async (eRControllerCheckInRequest: ERControllerCheckInRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eRControllerCheckInRequest' is not null or undefined
            assertParamExists('eRControllerCheckIn', 'eRControllerCheckInRequest', eRControllerCheckInRequest)
            const localVarPath = `/er/attendance/check-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRControllerCheckInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل انصراف
         * @param {ERControllerCheckInRequest} eRControllerCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCheckOut: async (eRControllerCheckInRequest: ERControllerCheckInRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eRControllerCheckInRequest' is not null or undefined
            assertParamExists('eRControllerCheckOut', 'eRControllerCheckInRequest', eRControllerCheckInRequest)
            const localVarPath = `/er/attendance/check-out`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRControllerCheckInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء حساب
         * @param {CreateChartAccountDto} createChartAccountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateAccount: async (createChartAccountDto: CreateChartAccountDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createChartAccountDto' is not null or undefined
            assertParamExists('eRControllerCreateAccount', 'createChartAccountDto', createChartAccountDto)
            const localVarPath = `/er/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChartAccountDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة موظف جديد
         * @param {CreateEmployeeDto} createEmployeeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateEmployee: async (createEmployeeDto: CreateEmployeeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmployeeDto' is not null or undefined
            assertParamExists('eRControllerCreateEmployee', 'createEmployeeDto', createEmployeeDto)
            const localVarPath = `/er/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmployeeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء قيد يومية
         * @param {CreateJournalEntryDto} createJournalEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateJournalEntry: async (createJournalEntryDto: CreateJournalEntryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJournalEntryDto' is not null or undefined
            assertParamExists('eRControllerCreateJournalEntry', 'createJournalEntryDto', createJournalEntryDto)
            const localVarPath = `/er/journal-entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJournalEntryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تقديم طلب إجازة
         * @param {CreateLeaveRequestDto} createLeaveRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateLeaveRequest: async (createLeaveRequestDto: CreateLeaveRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLeaveRequestDto' is not null or undefined
            assertParamExists('eRControllerCreateLeaveRequest', 'createLeaveRequestDto', createLeaveRequestDto)
            const localVarPath = `/er/leave-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createLeaveRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف أصل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteAsset: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerDeleteAsset', 'id', id)
            const localVarPath = `/er/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف مستندات متعددة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteBulkDocuments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/er/documents/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف حساب من دليل الحسابات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteChartAccount: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerDeleteChartAccount', 'id', id)
            const localVarPath = `/er/accounts/chart/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف مستند
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteDocument: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerDeleteDocument', 'id', id)
            const localVarPath = `/er/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف موظف
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteEmployee: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerDeleteEmployee', 'id', id)
            const localVarPath = `/er/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف كشف راتب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeletePayroll: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerDeletePayroll', 'id', id)
            const localVarPath = `/er/payroll/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تنزيل مستند
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDownloadDocument: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerDownloadDocument', 'id', id)
            const localVarPath = `/er/documents/{id}/download`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تصدير مستندات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerExportDocuments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/er/documents/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء كشف راتب
         * @param {ERControllerGeneratePayrollRequest} eRControllerGeneratePayrollRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGeneratePayroll: async (eRControllerGeneratePayrollRequest: ERControllerGeneratePayrollRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eRControllerGeneratePayrollRequest' is not null or undefined
            assertParamExists('eRControllerGeneratePayroll', 'eRControllerGeneratePayrollRequest', eRControllerGeneratePayrollRequest)
            const localVarPath = `/er/payroll/generate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRControllerGeneratePayrollRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على حساب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetAccount: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerGetAccount', 'id', id)
            const localVarPath = `/er/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary دليل الحسابات
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetAccounts: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('eRControllerGetAccounts', 'type', type)
            const localVarPath = `/er/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل الموظفين
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetAllEmployees: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('eRControllerGetAllEmployees', 'status', status)
            const localVarPath = `/er/employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على موظف محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetEmployee: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerGetEmployee', 'id', id)
            const localVarPath = `/er/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل حضور موظف
         * @param {string} employeeId 
         * @param {number} month 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetEmployeeAttendance: async (employeeId: string, month: number, year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('eRControllerGetEmployeeAttendance', 'employeeId', employeeId)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('eRControllerGetEmployeeAttendance', 'month', month)
            // verify required parameter 'year' is not null or undefined
            assertParamExists('eRControllerGetEmployeeAttendance', 'year', year)
            const localVarPath = `/er/attendance/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على قيود اليومية
         * @param {string} type 
         * @param {string} status 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetJournalEntries: async (type: string, status: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('eRControllerGetJournalEntries', 'type', type)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('eRControllerGetJournalEntries', 'status', status)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('eRControllerGetJournalEntries', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('eRControllerGetJournalEntries', 'endDate', endDate)
            const localVarPath = `/er/journal-entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ميزان المراجعة
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetTrialBalance: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('eRControllerGetTrialBalance', 'date', date)
            const localVarPath = `/er/reports/trial-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديد كدفع
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerMarkAsPaid: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerMarkAsPaid', 'id', id)
            const localVarPath = `/er/payroll/{id}/mark-paid`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ترحيل قيد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerPostJournalEntry: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerPostJournalEntry', 'id', id)
            const localVarPath = `/er/journal-entries/{id}/post`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفض طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerRejectLeaveRequest: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerRejectLeaveRequest', 'id', id)
            const localVarPath = `/er/leave-requests/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث موظف
         * @param {string} id 
         * @param {UpdateEmployeeDto} updateEmployeeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerUpdateEmployee: async (id: string, updateEmployeeDto: UpdateEmployeeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eRControllerUpdateEmployee', 'id', id)
            // verify required parameter 'updateEmployeeDto' is not null or undefined
            assertParamExists('eRControllerUpdateEmployee', 'updateEmployeeDto', updateEmployeeDto)
            const localVarPath = `/er/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEmployeeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ERSystemApi - functional programming interface
 */
export const ERSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ERSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary الموافقة على طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerApproveLeaveRequest(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerApproveLeaveRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerApproveLeaveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على كشف راتب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerApprovePayroll(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerApprovePayroll(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerApprovePayroll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل حضور
         * @param {ERControllerCheckInRequest} eRControllerCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerCheckIn(eRControllerCheckInRequest: ERControllerCheckInRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerCheckIn(eRControllerCheckInRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerCheckIn']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل انصراف
         * @param {ERControllerCheckInRequest} eRControllerCheckInRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerCheckOut(eRControllerCheckInRequest: ERControllerCheckInRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerCheckOut(eRControllerCheckInRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerCheckOut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء حساب
         * @param {CreateChartAccountDto} createChartAccountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerCreateAccount(createChartAccountDto: CreateChartAccountDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerCreateAccount(createChartAccountDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerCreateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة موظف جديد
         * @param {CreateEmployeeDto} createEmployeeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerCreateEmployee(createEmployeeDto: CreateEmployeeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerCreateEmployee(createEmployeeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerCreateEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء قيد يومية
         * @param {CreateJournalEntryDto} createJournalEntryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerCreateJournalEntry(createJournalEntryDto: CreateJournalEntryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerCreateJournalEntry(createJournalEntryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerCreateJournalEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تقديم طلب إجازة
         * @param {CreateLeaveRequestDto} createLeaveRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerCreateLeaveRequest(createLeaveRequestDto: CreateLeaveRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerCreateLeaveRequest(createLeaveRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerCreateLeaveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف أصل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDeleteAsset(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDeleteAsset(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDeleteAsset']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف مستندات متعددة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDeleteBulkDocuments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDeleteBulkDocuments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDeleteBulkDocuments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف حساب من دليل الحسابات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDeleteChartAccount(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDeleteChartAccount(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDeleteChartAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف مستند
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDeleteDocument(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDeleteDocument(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDeleteDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف موظف
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDeleteEmployee(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDeleteEmployee(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDeleteEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف كشف راتب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDeletePayroll(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDeletePayroll(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDeletePayroll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تنزيل مستند
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerDownloadDocument(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerDownloadDocument(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerDownloadDocument']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تصدير مستندات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerExportDocuments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerExportDocuments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerExportDocuments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء كشف راتب
         * @param {ERControllerGeneratePayrollRequest} eRControllerGeneratePayrollRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGeneratePayroll(eRControllerGeneratePayrollRequest: ERControllerGeneratePayrollRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGeneratePayroll(eRControllerGeneratePayrollRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGeneratePayroll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على حساب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetAccount(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetAccount(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary دليل الحسابات
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetAccounts(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetAccounts(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل الموظفين
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetAllEmployees(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetAllEmployees(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetAllEmployees']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على موظف محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetEmployee(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetEmployee(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل حضور موظف
         * @param {string} employeeId 
         * @param {number} month 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetEmployeeAttendance(employeeId: string, month: number, year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetEmployeeAttendance(employeeId, month, year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetEmployeeAttendance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على قيود اليومية
         * @param {string} type 
         * @param {string} status 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetJournalEntries(type: string, status: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetJournalEntries(type, status, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetJournalEntries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ميزان المراجعة
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerGetTrialBalance(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerGetTrialBalance(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerGetTrialBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديد كدفع
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerMarkAsPaid(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerMarkAsPaid(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerMarkAsPaid']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ترحيل قيد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerPostJournalEntry(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerPostJournalEntry(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerPostJournalEntry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفض طلب إجازة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerRejectLeaveRequest(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerRejectLeaveRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerRejectLeaveRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث موظف
         * @param {string} id 
         * @param {UpdateEmployeeDto} updateEmployeeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eRControllerUpdateEmployee(id: string, updateEmployeeDto: UpdateEmployeeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eRControllerUpdateEmployee(id, updateEmployeeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ERSystemApi.eRControllerUpdateEmployee']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ERSystemApi - factory interface
 */
export const ERSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ERSystemApiFp(configuration)
    return {
        /**
         * 
         * @summary الموافقة على طلب إجازة
         * @param {ERSystemApiERControllerApproveLeaveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerApproveLeaveRequest(requestParameters: ERSystemApiERControllerApproveLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerApproveLeaveRequest(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على كشف راتب
         * @param {ERSystemApiERControllerApprovePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerApprovePayroll(requestParameters: ERSystemApiERControllerApprovePayrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerApprovePayroll(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل حضور
         * @param {ERSystemApiERControllerCheckInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCheckIn(requestParameters: ERSystemApiERControllerCheckInRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerCheckIn(requestParameters.eRControllerCheckInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل انصراف
         * @param {ERSystemApiERControllerCheckOutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCheckOut(requestParameters: ERSystemApiERControllerCheckOutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerCheckOut(requestParameters.eRControllerCheckInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء حساب
         * @param {ERSystemApiERControllerCreateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateAccount(requestParameters: ERSystemApiERControllerCreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerCreateAccount(requestParameters.createChartAccountDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة موظف جديد
         * @param {ERSystemApiERControllerCreateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateEmployee(requestParameters: ERSystemApiERControllerCreateEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerCreateEmployee(requestParameters.createEmployeeDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء قيد يومية
         * @param {ERSystemApiERControllerCreateJournalEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateJournalEntry(requestParameters: ERSystemApiERControllerCreateJournalEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerCreateJournalEntry(requestParameters.createJournalEntryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تقديم طلب إجازة
         * @param {ERSystemApiERControllerCreateLeaveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerCreateLeaveRequest(requestParameters: ERSystemApiERControllerCreateLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerCreateLeaveRequest(requestParameters.createLeaveRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف أصل
         * @param {ERSystemApiERControllerDeleteAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteAsset(requestParameters: ERSystemApiERControllerDeleteAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDeleteAsset(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف مستندات متعددة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteBulkDocuments(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDeleteBulkDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف حساب من دليل الحسابات
         * @param {ERSystemApiERControllerDeleteChartAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteChartAccount(requestParameters: ERSystemApiERControllerDeleteChartAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDeleteChartAccount(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف مستند
         * @param {ERSystemApiERControllerDeleteDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteDocument(requestParameters: ERSystemApiERControllerDeleteDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDeleteDocument(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف موظف
         * @param {ERSystemApiERControllerDeleteEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeleteEmployee(requestParameters: ERSystemApiERControllerDeleteEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDeleteEmployee(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف كشف راتب
         * @param {ERSystemApiERControllerDeletePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDeletePayroll(requestParameters: ERSystemApiERControllerDeletePayrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDeletePayroll(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تنزيل مستند
         * @param {ERSystemApiERControllerDownloadDocumentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerDownloadDocument(requestParameters: ERSystemApiERControllerDownloadDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerDownloadDocument(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تصدير مستندات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerExportDocuments(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerExportDocuments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء كشف راتب
         * @param {ERSystemApiERControllerGeneratePayrollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGeneratePayroll(requestParameters: ERSystemApiERControllerGeneratePayrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGeneratePayroll(requestParameters.eRControllerGeneratePayrollRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على حساب
         * @param {ERSystemApiERControllerGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetAccount(requestParameters: ERSystemApiERControllerGetAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetAccount(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary دليل الحسابات
         * @param {ERSystemApiERControllerGetAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetAccounts(requestParameters: ERSystemApiERControllerGetAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetAccounts(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل الموظفين
         * @param {ERSystemApiERControllerGetAllEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetAllEmployees(requestParameters: ERSystemApiERControllerGetAllEmployeesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetAllEmployees(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على موظف محدد
         * @param {ERSystemApiERControllerGetEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetEmployee(requestParameters: ERSystemApiERControllerGetEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetEmployee(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل حضور موظف
         * @param {ERSystemApiERControllerGetEmployeeAttendanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetEmployeeAttendance(requestParameters: ERSystemApiERControllerGetEmployeeAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetEmployeeAttendance(requestParameters.employeeId, requestParameters.month, requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على قيود اليومية
         * @param {ERSystemApiERControllerGetJournalEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetJournalEntries(requestParameters: ERSystemApiERControllerGetJournalEntriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetJournalEntries(requestParameters.type, requestParameters.status, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ميزان المراجعة
         * @param {ERSystemApiERControllerGetTrialBalanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerGetTrialBalance(requestParameters: ERSystemApiERControllerGetTrialBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerGetTrialBalance(requestParameters.date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديد كدفع
         * @param {ERSystemApiERControllerMarkAsPaidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerMarkAsPaid(requestParameters: ERSystemApiERControllerMarkAsPaidRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerMarkAsPaid(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ترحيل قيد
         * @param {ERSystemApiERControllerPostJournalEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerPostJournalEntry(requestParameters: ERSystemApiERControllerPostJournalEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerPostJournalEntry(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفض طلب إجازة
         * @param {ERSystemApiERControllerRejectLeaveRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerRejectLeaveRequest(requestParameters: ERSystemApiERControllerRejectLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerRejectLeaveRequest(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث موظف
         * @param {ERSystemApiERControllerUpdateEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eRControllerUpdateEmployee(requestParameters: ERSystemApiERControllerUpdateEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.eRControllerUpdateEmployee(requestParameters.id, requestParameters.updateEmployeeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ERSystemApi - interface
 */
export interface ERSystemApiInterface {
    /**
     * 
     * @summary الموافقة على طلب إجازة
     * @param {ERSystemApiERControllerApproveLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerApproveLeaveRequest(requestParameters: ERSystemApiERControllerApproveLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على كشف راتب
     * @param {ERSystemApiERControllerApprovePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerApprovePayroll(requestParameters: ERSystemApiERControllerApprovePayrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل حضور
     * @param {ERSystemApiERControllerCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerCheckIn(requestParameters: ERSystemApiERControllerCheckInRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل انصراف
     * @param {ERSystemApiERControllerCheckOutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerCheckOut(requestParameters: ERSystemApiERControllerCheckOutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء حساب
     * @param {ERSystemApiERControllerCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerCreateAccount(requestParameters: ERSystemApiERControllerCreateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة موظف جديد
     * @param {ERSystemApiERControllerCreateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerCreateEmployee(requestParameters: ERSystemApiERControllerCreateEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء قيد يومية
     * @param {ERSystemApiERControllerCreateJournalEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerCreateJournalEntry(requestParameters: ERSystemApiERControllerCreateJournalEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تقديم طلب إجازة
     * @param {ERSystemApiERControllerCreateLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerCreateLeaveRequest(requestParameters: ERSystemApiERControllerCreateLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف أصل
     * @param {ERSystemApiERControllerDeleteAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDeleteAsset(requestParameters: ERSystemApiERControllerDeleteAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف مستندات متعددة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDeleteBulkDocuments(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف حساب من دليل الحسابات
     * @param {ERSystemApiERControllerDeleteChartAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDeleteChartAccount(requestParameters: ERSystemApiERControllerDeleteChartAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف مستند
     * @param {ERSystemApiERControllerDeleteDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDeleteDocument(requestParameters: ERSystemApiERControllerDeleteDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف موظف
     * @param {ERSystemApiERControllerDeleteEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDeleteEmployee(requestParameters: ERSystemApiERControllerDeleteEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف كشف راتب
     * @param {ERSystemApiERControllerDeletePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDeletePayroll(requestParameters: ERSystemApiERControllerDeletePayrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تنزيل مستند
     * @param {ERSystemApiERControllerDownloadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerDownloadDocument(requestParameters: ERSystemApiERControllerDownloadDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تصدير مستندات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerExportDocuments(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء كشف راتب
     * @param {ERSystemApiERControllerGeneratePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGeneratePayroll(requestParameters: ERSystemApiERControllerGeneratePayrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على حساب
     * @param {ERSystemApiERControllerGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetAccount(requestParameters: ERSystemApiERControllerGetAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary دليل الحسابات
     * @param {ERSystemApiERControllerGetAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetAccounts(requestParameters: ERSystemApiERControllerGetAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل الموظفين
     * @param {ERSystemApiERControllerGetAllEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetAllEmployees(requestParameters: ERSystemApiERControllerGetAllEmployeesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على موظف محدد
     * @param {ERSystemApiERControllerGetEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetEmployee(requestParameters: ERSystemApiERControllerGetEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل حضور موظف
     * @param {ERSystemApiERControllerGetEmployeeAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetEmployeeAttendance(requestParameters: ERSystemApiERControllerGetEmployeeAttendanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على قيود اليومية
     * @param {ERSystemApiERControllerGetJournalEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetJournalEntries(requestParameters: ERSystemApiERControllerGetJournalEntriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ميزان المراجعة
     * @param {ERSystemApiERControllerGetTrialBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerGetTrialBalance(requestParameters: ERSystemApiERControllerGetTrialBalanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديد كدفع
     * @param {ERSystemApiERControllerMarkAsPaidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerMarkAsPaid(requestParameters: ERSystemApiERControllerMarkAsPaidRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ترحيل قيد
     * @param {ERSystemApiERControllerPostJournalEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerPostJournalEntry(requestParameters: ERSystemApiERControllerPostJournalEntryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفض طلب إجازة
     * @param {ERSystemApiERControllerRejectLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerRejectLeaveRequest(requestParameters: ERSystemApiERControllerRejectLeaveRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث موظف
     * @param {ERSystemApiERControllerUpdateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    eRControllerUpdateEmployee(requestParameters: ERSystemApiERControllerUpdateEmployeeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for eRControllerApproveLeaveRequest operation in ERSystemApi.
 */
export interface ERSystemApiERControllerApproveLeaveRequestRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerApprovePayroll operation in ERSystemApi.
 */
export interface ERSystemApiERControllerApprovePayrollRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerCheckIn operation in ERSystemApi.
 */
export interface ERSystemApiERControllerCheckInRequest {
    readonly eRControllerCheckInRequest: ERControllerCheckInRequest
}

/**
 * Request parameters for eRControllerCheckOut operation in ERSystemApi.
 */
export interface ERSystemApiERControllerCheckOutRequest {
    readonly eRControllerCheckInRequest: ERControllerCheckInRequest
}

/**
 * Request parameters for eRControllerCreateAccount operation in ERSystemApi.
 */
export interface ERSystemApiERControllerCreateAccountRequest {
    readonly createChartAccountDto: CreateChartAccountDto
}

/**
 * Request parameters for eRControllerCreateEmployee operation in ERSystemApi.
 */
export interface ERSystemApiERControllerCreateEmployeeRequest {
    readonly createEmployeeDto: CreateEmployeeDto
}

/**
 * Request parameters for eRControllerCreateJournalEntry operation in ERSystemApi.
 */
export interface ERSystemApiERControllerCreateJournalEntryRequest {
    readonly createJournalEntryDto: CreateJournalEntryDto
}

/**
 * Request parameters for eRControllerCreateLeaveRequest operation in ERSystemApi.
 */
export interface ERSystemApiERControllerCreateLeaveRequestRequest {
    readonly createLeaveRequestDto: CreateLeaveRequestDto
}

/**
 * Request parameters for eRControllerDeleteAsset operation in ERSystemApi.
 */
export interface ERSystemApiERControllerDeleteAssetRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerDeleteChartAccount operation in ERSystemApi.
 */
export interface ERSystemApiERControllerDeleteChartAccountRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerDeleteDocument operation in ERSystemApi.
 */
export interface ERSystemApiERControllerDeleteDocumentRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerDeleteEmployee operation in ERSystemApi.
 */
export interface ERSystemApiERControllerDeleteEmployeeRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerDeletePayroll operation in ERSystemApi.
 */
export interface ERSystemApiERControllerDeletePayrollRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerDownloadDocument operation in ERSystemApi.
 */
export interface ERSystemApiERControllerDownloadDocumentRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerGeneratePayroll operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGeneratePayrollRequest {
    readonly eRControllerGeneratePayrollRequest: ERControllerGeneratePayrollRequest
}

/**
 * Request parameters for eRControllerGetAccount operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetAccountRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerGetAccounts operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetAccountsRequest {
    readonly type: string
}

/**
 * Request parameters for eRControllerGetAllEmployees operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetAllEmployeesRequest {
    readonly status: string
}

/**
 * Request parameters for eRControllerGetEmployee operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetEmployeeRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerGetEmployeeAttendance operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetEmployeeAttendanceRequest {
    readonly employeeId: string

    readonly month: number

    readonly year: number
}

/**
 * Request parameters for eRControllerGetJournalEntries operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetJournalEntriesRequest {
    readonly type: string

    readonly status: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for eRControllerGetTrialBalance operation in ERSystemApi.
 */
export interface ERSystemApiERControllerGetTrialBalanceRequest {
    readonly date: string
}

/**
 * Request parameters for eRControllerMarkAsPaid operation in ERSystemApi.
 */
export interface ERSystemApiERControllerMarkAsPaidRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerPostJournalEntry operation in ERSystemApi.
 */
export interface ERSystemApiERControllerPostJournalEntryRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerRejectLeaveRequest operation in ERSystemApi.
 */
export interface ERSystemApiERControllerRejectLeaveRequestRequest {
    readonly id: string
}

/**
 * Request parameters for eRControllerUpdateEmployee operation in ERSystemApi.
 */
export interface ERSystemApiERControllerUpdateEmployeeRequest {
    readonly id: string

    readonly updateEmployeeDto: UpdateEmployeeDto
}

/**
 * ERSystemApi - object-oriented interface
 */
export class ERSystemApi extends BaseAPI implements ERSystemApiInterface {
    /**
     * 
     * @summary الموافقة على طلب إجازة
     * @param {ERSystemApiERControllerApproveLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerApproveLeaveRequest(requestParameters: ERSystemApiERControllerApproveLeaveRequestRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerApproveLeaveRequest(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على كشف راتب
     * @param {ERSystemApiERControllerApprovePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerApprovePayroll(requestParameters: ERSystemApiERControllerApprovePayrollRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerApprovePayroll(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل حضور
     * @param {ERSystemApiERControllerCheckInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerCheckIn(requestParameters: ERSystemApiERControllerCheckInRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerCheckIn(requestParameters.eRControllerCheckInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل انصراف
     * @param {ERSystemApiERControllerCheckOutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerCheckOut(requestParameters: ERSystemApiERControllerCheckOutRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerCheckOut(requestParameters.eRControllerCheckInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء حساب
     * @param {ERSystemApiERControllerCreateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerCreateAccount(requestParameters: ERSystemApiERControllerCreateAccountRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerCreateAccount(requestParameters.createChartAccountDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة موظف جديد
     * @param {ERSystemApiERControllerCreateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerCreateEmployee(requestParameters: ERSystemApiERControllerCreateEmployeeRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerCreateEmployee(requestParameters.createEmployeeDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء قيد يومية
     * @param {ERSystemApiERControllerCreateJournalEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerCreateJournalEntry(requestParameters: ERSystemApiERControllerCreateJournalEntryRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerCreateJournalEntry(requestParameters.createJournalEntryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تقديم طلب إجازة
     * @param {ERSystemApiERControllerCreateLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerCreateLeaveRequest(requestParameters: ERSystemApiERControllerCreateLeaveRequestRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerCreateLeaveRequest(requestParameters.createLeaveRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف أصل
     * @param {ERSystemApiERControllerDeleteAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDeleteAsset(requestParameters: ERSystemApiERControllerDeleteAssetRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDeleteAsset(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف مستندات متعددة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDeleteBulkDocuments(options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDeleteBulkDocuments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف حساب من دليل الحسابات
     * @param {ERSystemApiERControllerDeleteChartAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDeleteChartAccount(requestParameters: ERSystemApiERControllerDeleteChartAccountRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDeleteChartAccount(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف مستند
     * @param {ERSystemApiERControllerDeleteDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDeleteDocument(requestParameters: ERSystemApiERControllerDeleteDocumentRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDeleteDocument(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف موظف
     * @param {ERSystemApiERControllerDeleteEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDeleteEmployee(requestParameters: ERSystemApiERControllerDeleteEmployeeRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDeleteEmployee(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف كشف راتب
     * @param {ERSystemApiERControllerDeletePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDeletePayroll(requestParameters: ERSystemApiERControllerDeletePayrollRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDeletePayroll(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تنزيل مستند
     * @param {ERSystemApiERControllerDownloadDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerDownloadDocument(requestParameters: ERSystemApiERControllerDownloadDocumentRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerDownloadDocument(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تصدير مستندات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerExportDocuments(options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerExportDocuments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء كشف راتب
     * @param {ERSystemApiERControllerGeneratePayrollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGeneratePayroll(requestParameters: ERSystemApiERControllerGeneratePayrollRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGeneratePayroll(requestParameters.eRControllerGeneratePayrollRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على حساب
     * @param {ERSystemApiERControllerGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetAccount(requestParameters: ERSystemApiERControllerGetAccountRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetAccount(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary دليل الحسابات
     * @param {ERSystemApiERControllerGetAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetAccounts(requestParameters: ERSystemApiERControllerGetAccountsRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetAccounts(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل الموظفين
     * @param {ERSystemApiERControllerGetAllEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetAllEmployees(requestParameters: ERSystemApiERControllerGetAllEmployeesRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetAllEmployees(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على موظف محدد
     * @param {ERSystemApiERControllerGetEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetEmployee(requestParameters: ERSystemApiERControllerGetEmployeeRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetEmployee(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل حضور موظف
     * @param {ERSystemApiERControllerGetEmployeeAttendanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetEmployeeAttendance(requestParameters: ERSystemApiERControllerGetEmployeeAttendanceRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetEmployeeAttendance(requestParameters.employeeId, requestParameters.month, requestParameters.year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على قيود اليومية
     * @param {ERSystemApiERControllerGetJournalEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetJournalEntries(requestParameters: ERSystemApiERControllerGetJournalEntriesRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetJournalEntries(requestParameters.type, requestParameters.status, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ميزان المراجعة
     * @param {ERSystemApiERControllerGetTrialBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerGetTrialBalance(requestParameters: ERSystemApiERControllerGetTrialBalanceRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerGetTrialBalance(requestParameters.date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديد كدفع
     * @param {ERSystemApiERControllerMarkAsPaidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerMarkAsPaid(requestParameters: ERSystemApiERControllerMarkAsPaidRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerMarkAsPaid(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ترحيل قيد
     * @param {ERSystemApiERControllerPostJournalEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerPostJournalEntry(requestParameters: ERSystemApiERControllerPostJournalEntryRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerPostJournalEntry(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفض طلب إجازة
     * @param {ERSystemApiERControllerRejectLeaveRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerRejectLeaveRequest(requestParameters: ERSystemApiERControllerRejectLeaveRequestRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerRejectLeaveRequest(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث موظف
     * @param {ERSystemApiERControllerUpdateEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public eRControllerUpdateEmployee(requestParameters: ERSystemApiERControllerUpdateEmployeeRequest, options?: RawAxiosRequestConfig) {
        return ERSystemApiFp(this.configuration).eRControllerUpdateEmployee(requestParameters.id, requestParameters.updateEmployeeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ErrandsApi - axios parameter creator
 */
export const ErrandsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إنشاء طلب مهمة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerCreateErrandOrder: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('errandsControllerCreateErrandOrder', 'body', body)
            const localVarPath = `/errands/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary السائقون المتاحون
         * @param {number} [lat] 
         * @param {number} [lng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetAvailableDrivers: async (lat?: number, lng?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errands/drivers/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (lng !== undefined) {
                localVarQueryParameter['lng'] = lng;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على مهمة محددة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetErrand: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('errandsControllerGetErrand', 'id', id)
            const localVarPath = `/errands/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary فئات المهام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetErrandCategories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/errands/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلبات المستخدم
         * @param {string} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetUserErrands: async (id: string, status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('errandsControllerGetUserErrands', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('errandsControllerGetUserErrands', 'status', status)
            const localVarPath = `/errands/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ErrandsApi - functional programming interface
 */
export const ErrandsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ErrandsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إنشاء طلب مهمة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async errandsControllerCreateErrandOrder(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.errandsControllerCreateErrandOrder(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ErrandsApi.errandsControllerCreateErrandOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary السائقون المتاحون
         * @param {number} [lat] 
         * @param {number} [lng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async errandsControllerGetAvailableDrivers(lat?: number, lng?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.errandsControllerGetAvailableDrivers(lat, lng, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ErrandsApi.errandsControllerGetAvailableDrivers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على مهمة محددة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async errandsControllerGetErrand(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.errandsControllerGetErrand(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ErrandsApi.errandsControllerGetErrand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary فئات المهام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async errandsControllerGetErrandCategories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.errandsControllerGetErrandCategories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ErrandsApi.errandsControllerGetErrandCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلبات المستخدم
         * @param {string} id 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async errandsControllerGetUserErrands(id: string, status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.errandsControllerGetUserErrands(id, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ErrandsApi.errandsControllerGetUserErrands']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ErrandsApi - factory interface
 */
export const ErrandsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ErrandsApiFp(configuration)
    return {
        /**
         * 
         * @summary إنشاء طلب مهمة
         * @param {ErrandsApiErrandsControllerCreateErrandOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerCreateErrandOrder(requestParameters: ErrandsApiErrandsControllerCreateErrandOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.errandsControllerCreateErrandOrder(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary السائقون المتاحون
         * @param {ErrandsApiErrandsControllerGetAvailableDriversRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetAvailableDrivers(requestParameters: ErrandsApiErrandsControllerGetAvailableDriversRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.errandsControllerGetAvailableDrivers(requestParameters.lat, requestParameters.lng, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على مهمة محددة
         * @param {ErrandsApiErrandsControllerGetErrandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetErrand(requestParameters: ErrandsApiErrandsControllerGetErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.errandsControllerGetErrand(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary فئات المهام
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetErrandCategories(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.errandsControllerGetErrandCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلبات المستخدم
         * @param {ErrandsApiErrandsControllerGetUserErrandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errandsControllerGetUserErrands(requestParameters: ErrandsApiErrandsControllerGetUserErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.errandsControllerGetUserErrands(requestParameters.id, requestParameters.status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ErrandsApi - interface
 */
export interface ErrandsApiInterface {
    /**
     * 
     * @summary إنشاء طلب مهمة
     * @param {ErrandsApiErrandsControllerCreateErrandOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errandsControllerCreateErrandOrder(requestParameters: ErrandsApiErrandsControllerCreateErrandOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary السائقون المتاحون
     * @param {ErrandsApiErrandsControllerGetAvailableDriversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errandsControllerGetAvailableDrivers(requestParameters?: ErrandsApiErrandsControllerGetAvailableDriversRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على مهمة محددة
     * @param {ErrandsApiErrandsControllerGetErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errandsControllerGetErrand(requestParameters: ErrandsApiErrandsControllerGetErrandRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary فئات المهام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errandsControllerGetErrandCategories(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلبات المستخدم
     * @param {ErrandsApiErrandsControllerGetUserErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    errandsControllerGetUserErrands(requestParameters: ErrandsApiErrandsControllerGetUserErrandsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for errandsControllerCreateErrandOrder operation in ErrandsApi.
 */
export interface ErrandsApiErrandsControllerCreateErrandOrderRequest {
    readonly body: object
}

/**
 * Request parameters for errandsControllerGetAvailableDrivers operation in ErrandsApi.
 */
export interface ErrandsApiErrandsControllerGetAvailableDriversRequest {
    readonly lat?: number

    readonly lng?: number
}

/**
 * Request parameters for errandsControllerGetErrand operation in ErrandsApi.
 */
export interface ErrandsApiErrandsControllerGetErrandRequest {
    readonly id: string
}

/**
 * Request parameters for errandsControllerGetUserErrands operation in ErrandsApi.
 */
export interface ErrandsApiErrandsControllerGetUserErrandsRequest {
    readonly id: string

    readonly status: string
}

/**
 * ErrandsApi - object-oriented interface
 */
export class ErrandsApi extends BaseAPI implements ErrandsApiInterface {
    /**
     * 
     * @summary إنشاء طلب مهمة
     * @param {ErrandsApiErrandsControllerCreateErrandOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public errandsControllerCreateErrandOrder(requestParameters: ErrandsApiErrandsControllerCreateErrandOrderRequest, options?: RawAxiosRequestConfig) {
        return ErrandsApiFp(this.configuration).errandsControllerCreateErrandOrder(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary السائقون المتاحون
     * @param {ErrandsApiErrandsControllerGetAvailableDriversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public errandsControllerGetAvailableDrivers(requestParameters: ErrandsApiErrandsControllerGetAvailableDriversRequest = {}, options?: RawAxiosRequestConfig) {
        return ErrandsApiFp(this.configuration).errandsControllerGetAvailableDrivers(requestParameters.lat, requestParameters.lng, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على مهمة محددة
     * @param {ErrandsApiErrandsControllerGetErrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public errandsControllerGetErrand(requestParameters: ErrandsApiErrandsControllerGetErrandRequest, options?: RawAxiosRequestConfig) {
        return ErrandsApiFp(this.configuration).errandsControllerGetErrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary فئات المهام
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public errandsControllerGetErrandCategories(options?: RawAxiosRequestConfig) {
        return ErrandsApiFp(this.configuration).errandsControllerGetErrandCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلبات المستخدم
     * @param {ErrandsApiErrandsControllerGetUserErrandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public errandsControllerGetUserErrands(requestParameters: ErrandsApiErrandsControllerGetUserErrandsRequest, options?: RawAxiosRequestConfig) {
        return ErrandsApiFp(this.configuration).errandsControllerGetUserErrands(requestParameters.id, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FinanceApi - axios parameter creator
 */
export const FinanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إضافة الإجماليات الفعلية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerAddActualTotals: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerAddActualTotals', 'id', id)
            const localVarPath = `/finance/reconciliations/{id}/actual-totals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة مشكلة للمطابقة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerAddReconciliationIssue: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerAddReconciliationIssue', 'id', id)
            const localVarPath = `/finance/reconciliations/{id}/issues`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على عمولة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerApproveCommission: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerApproveCommission', 'id', id)
            const localVarPath = `/finance/commissions/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على دفعة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerApprovePayoutBatch: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerApprovePayoutBatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('financeControllerApprovePayoutBatch', 'body', body)
            const localVarPath = `/finance/payouts/batches/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الموافقة على تسوية
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerApproveSettlement: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerApproveSettlement', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('financeControllerApproveSettlement', 'body', body)
            const localVarPath = `/finance/settlements/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء عمولة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCancelCommission: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerCancelCommission', 'id', id)
            const localVarPath = `/finance/commissions/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إكمال دفعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCompletePayoutBatch: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerCompletePayoutBatch', 'id', id)
            const localVarPath = `/finance/payouts/batches/{id}/complete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء عمولة جديدة
         * @param {CreateCommissionDto} createCommissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateCommission: async (createCommissionDto: CreateCommissionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCommissionDto' is not null or undefined
            assertParamExists('financeControllerCreateCommission', 'createCommissionDto', createCommissionDto)
            const localVarPath = `/finance/commissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء خطة عمولة
         * @param {FinanceControllerCreateCommissionPlanRequest} financeControllerCreateCommissionPlanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateCommissionPlan: async (financeControllerCreateCommissionPlanRequest: FinanceControllerCreateCommissionPlanRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeControllerCreateCommissionPlanRequest' is not null or undefined
            assertParamExists('financeControllerCreateCommissionPlan', 'financeControllerCreateCommissionPlanRequest', financeControllerCreateCommissionPlanRequest)
            const localVarPath = `/finance/commission-plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(financeControllerCreateCommissionPlanRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء كوبون
         * @param {CreateFinancialCouponDto} createFinancialCouponDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateCoupon: async (createFinancialCouponDto: CreateFinancialCouponDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFinancialCouponDto' is not null or undefined
            assertParamExists('financeControllerCreateCoupon', 'createFinancialCouponDto', createFinancialCouponDto)
            const localVarPath = `/finance/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFinancialCouponDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء دفعة من العمولات
         * @param {FinanceControllerCreatePayoutBatchRequest} financeControllerCreatePayoutBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreatePayoutBatch: async (financeControllerCreatePayoutBatchRequest: FinanceControllerCreatePayoutBatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeControllerCreatePayoutBatchRequest' is not null or undefined
            assertParamExists('financeControllerCreatePayoutBatch', 'financeControllerCreatePayoutBatchRequest', financeControllerCreatePayoutBatchRequest)
            const localVarPath = `/finance/payouts/batches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(financeControllerCreatePayoutBatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء مطابقة مالية
         * @param {FinanceControllerCreateReconciliationRequest} financeControllerCreateReconciliationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateReconciliation: async (financeControllerCreateReconciliationRequest: FinanceControllerCreateReconciliationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeControllerCreateReconciliationRequest' is not null or undefined
            assertParamExists('financeControllerCreateReconciliation', 'financeControllerCreateReconciliationRequest', financeControllerCreateReconciliationRequest)
            const localVarPath = `/finance/reconciliations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(financeControllerCreateReconciliationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء تسوية
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateSettlement: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('financeControllerCreateSettlement', 'body', body)
            const localVarPath = `/finance/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تثبيت تقرير
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerFinalizeReport: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerFinalizeReport', 'id', id)
            const localVarPath = `/finance/reports/{id}/finalize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء تقرير يومي
         * @param {FinanceControllerGenerateDailyReportRequest} financeControllerGenerateDailyReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGenerateDailyReport: async (financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'financeControllerGenerateDailyReportRequest' is not null or undefined
            assertParamExists('financeControllerGenerateDailyReport', 'financeControllerGenerateDailyReportRequest', financeControllerGenerateDailyReportRequest)
            const localVarPath = `/finance/reports/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(financeControllerGenerateDailyReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary خطط العمولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetCommissionPlans: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/finance/commission-plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل الكوبونات
         * @param {boolean} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetCoupons: async (isActive: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isActive' is not null or undefined
            assertParamExists('financeControllerGetCoupons', 'isActive', isActive)
            const localVarPath = `/finance/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على تقرير يومي
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetDailyReport: async (date: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('financeControllerGetDailyReport', 'date', date)
            const localVarPath = `/finance/reports/daily/{date}`
                .replace(`{${"date"}}`, encodeURIComponent(String(date)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على تسويات كيان
         * @param {string} entityId 
         * @param {string} entityModel 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetEntitySettlements: async (entityId: string, entityModel: string, status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityId' is not null or undefined
            assertParamExists('financeControllerGetEntitySettlements', 'entityId', entityId)
            // verify required parameter 'entityModel' is not null or undefined
            assertParamExists('financeControllerGetEntitySettlements', 'entityModel', entityModel)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('financeControllerGetEntitySettlements', 'status', status)
            const localVarPath = `/finance/settlements/entity/{entityId}`
                .replace(`{${"entityId"}}`, encodeURIComponent(String(entityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entityModel !== undefined) {
                localVarQueryParameter['entityModel'] = entityModel;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات عمولاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetMyCommissionStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/finance/commissions/stats/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على عمولاتي
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetMyCommissions: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('financeControllerGetMyCommissions', 'status', status)
            const localVarPath = `/finance/commissions/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على دفعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetPayoutBatch: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerGetPayoutBatch', 'id', id)
            const localVarPath = `/finance/payouts/batches/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على عناصر دفعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetPayoutBatchItems: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerGetPayoutBatchItems', 'id', id)
            const localVarPath = `/finance/payouts/batches/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل الدفعات
         * @param {string} status 
         * @param {number} limit 
         * @param {string} cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetPayoutBatches: async (status: string, limit: number, cursor: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('financeControllerGetPayoutBatches', 'status', status)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('financeControllerGetPayoutBatches', 'limit', limit)
            // verify required parameter 'cursor' is not null or undefined
            assertParamExists('financeControllerGetPayoutBatches', 'cursor', cursor)
            const localVarPath = `/finance/payouts/batches`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على مطابقة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetReconciliation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerGetReconciliation', 'id', id)
            const localVarPath = `/finance/reconciliations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل المطابقات
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetReconciliations: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('financeControllerGetReconciliations', 'status', status)
            const localVarPath = `/finance/reconciliations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على التقارير
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetReports: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('financeControllerGetReports', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('financeControllerGetReports', 'endDate', endDate)
            const localVarPath = `/finance/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على تسوية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetSettlement: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerGetSettlement', 'id', id)
            const localVarPath = `/finance/settlements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حل مشكلة في المطابقة
         * @param {string} id 
         * @param {string} issueIndex 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerResolveReconciliationIssue: async (id: string, issueIndex: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerResolveReconciliationIssue', 'id', id)
            // verify required parameter 'issueIndex' is not null or undefined
            assertParamExists('financeControllerResolveReconciliationIssue', 'issueIndex', issueIndex)
            const localVarPath = `/finance/reconciliations/{id}/issues/{issueIndex}/resolve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"issueIndex"}}`, encodeURIComponent(String(issueIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث خطة عمولة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerUpdateCommissionPlan: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerUpdateCommissionPlan', 'id', id)
            const localVarPath = `/finance/commission-plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث كوبون
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerUpdateCoupon: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('financeControllerUpdateCoupon', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('financeControllerUpdateCoupon', 'body', body)
            const localVarPath = `/finance/coupons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التحقق من كوبون
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerValidateCoupon: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('financeControllerValidateCoupon', 'body', body)
            const localVarPath = `/finance/coupons/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinanceApi - functional programming interface
 */
export const FinanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FinanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إضافة الإجماليات الفعلية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerAddActualTotals(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerAddActualTotals(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerAddActualTotals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة مشكلة للمطابقة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerAddReconciliationIssue(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerAddReconciliationIssue(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerAddReconciliationIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على عمولة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerApproveCommission(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerApproveCommission(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerApproveCommission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على دفعة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerApprovePayoutBatch(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerApprovePayoutBatch(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerApprovePayoutBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الموافقة على تسوية
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerApproveSettlement(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerApproveSettlement(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerApproveSettlement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء عمولة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCancelCommission(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCancelCommission(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCancelCommission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إكمال دفعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCompletePayoutBatch(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCompletePayoutBatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCompletePayoutBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء عمولة جديدة
         * @param {CreateCommissionDto} createCommissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCreateCommission(createCommissionDto: CreateCommissionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCreateCommission(createCommissionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCreateCommission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء خطة عمولة
         * @param {FinanceControllerCreateCommissionPlanRequest} financeControllerCreateCommissionPlanRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCreateCommissionPlan(financeControllerCreateCommissionPlanRequest: FinanceControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCreateCommissionPlan(financeControllerCreateCommissionPlanRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCreateCommissionPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء كوبون
         * @param {CreateFinancialCouponDto} createFinancialCouponDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCreateCoupon(createFinancialCouponDto: CreateFinancialCouponDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCreateCoupon(createFinancialCouponDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCreateCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء دفعة من العمولات
         * @param {FinanceControllerCreatePayoutBatchRequest} financeControllerCreatePayoutBatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCreatePayoutBatch(financeControllerCreatePayoutBatchRequest: FinanceControllerCreatePayoutBatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCreatePayoutBatch(financeControllerCreatePayoutBatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCreatePayoutBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء مطابقة مالية
         * @param {FinanceControllerCreateReconciliationRequest} financeControllerCreateReconciliationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCreateReconciliation(financeControllerCreateReconciliationRequest: FinanceControllerCreateReconciliationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCreateReconciliation(financeControllerCreateReconciliationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCreateReconciliation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء تسوية
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerCreateSettlement(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerCreateSettlement(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerCreateSettlement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تثبيت تقرير
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerFinalizeReport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerFinalizeReport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerFinalizeReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء تقرير يومي
         * @param {FinanceControllerGenerateDailyReportRequest} financeControllerGenerateDailyReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGenerateDailyReport(financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGenerateDailyReport(financeControllerGenerateDailyReportRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGenerateDailyReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary خطط العمولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetCommissionPlans(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetCommissionPlans(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetCommissionPlans']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل الكوبونات
         * @param {boolean} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetCoupons(isActive: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetCoupons(isActive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetCoupons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على تقرير يومي
         * @param {string} date 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetDailyReport(date: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetDailyReport(date, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetDailyReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على تسويات كيان
         * @param {string} entityId 
         * @param {string} entityModel 
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetEntitySettlements(entityId: string, entityModel: string, status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetEntitySettlements(entityId, entityModel, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetEntitySettlements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات عمولاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetMyCommissionStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetMyCommissionStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetMyCommissionStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على عمولاتي
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetMyCommissions(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetMyCommissions(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetMyCommissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على دفعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetPayoutBatch(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetPayoutBatch(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetPayoutBatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على عناصر دفعة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetPayoutBatchItems(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetPayoutBatchItems(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetPayoutBatchItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل الدفعات
         * @param {string} status 
         * @param {number} limit 
         * @param {string} cursor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetPayoutBatches(status: string, limit: number, cursor: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetPayoutBatches(status, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetPayoutBatches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على مطابقة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetReconciliation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetReconciliation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetReconciliation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل المطابقات
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetReconciliations(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetReconciliations(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetReconciliations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على التقارير
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetReports(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetReports(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetReports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على تسوية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerGetSettlement(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerGetSettlement(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerGetSettlement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حل مشكلة في المطابقة
         * @param {string} id 
         * @param {string} issueIndex 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerResolveReconciliationIssue(id: string, issueIndex: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerResolveReconciliationIssue(id, issueIndex, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerResolveReconciliationIssue']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث خطة عمولة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerUpdateCommissionPlan(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerUpdateCommissionPlan(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerUpdateCommissionPlan']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث كوبون
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerUpdateCoupon(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerUpdateCoupon(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerUpdateCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التحقق من كوبون
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financeControllerValidateCoupon(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financeControllerValidateCoupon(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinanceApi.financeControllerValidateCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FinanceApi - factory interface
 */
export const FinanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FinanceApiFp(configuration)
    return {
        /**
         * 
         * @summary إضافة الإجماليات الفعلية
         * @param {FinanceApiFinanceControllerAddActualTotalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerAddActualTotals(requestParameters: FinanceApiFinanceControllerAddActualTotalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerAddActualTotals(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة مشكلة للمطابقة
         * @param {FinanceApiFinanceControllerAddReconciliationIssueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerAddReconciliationIssue(requestParameters: FinanceApiFinanceControllerAddReconciliationIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerAddReconciliationIssue(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على عمولة
         * @param {FinanceApiFinanceControllerApproveCommissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerApproveCommission(requestParameters: FinanceApiFinanceControllerApproveCommissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerApproveCommission(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على دفعة
         * @param {FinanceApiFinanceControllerApprovePayoutBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerApprovePayoutBatch(requestParameters: FinanceApiFinanceControllerApprovePayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerApprovePayoutBatch(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الموافقة على تسوية
         * @param {FinanceApiFinanceControllerApproveSettlementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerApproveSettlement(requestParameters: FinanceApiFinanceControllerApproveSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerApproveSettlement(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء عمولة
         * @param {FinanceApiFinanceControllerCancelCommissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCancelCommission(requestParameters: FinanceApiFinanceControllerCancelCommissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCancelCommission(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إكمال دفعة
         * @param {FinanceApiFinanceControllerCompletePayoutBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCompletePayoutBatch(requestParameters: FinanceApiFinanceControllerCompletePayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCompletePayoutBatch(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء عمولة جديدة
         * @param {FinanceApiFinanceControllerCreateCommissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateCommission(requestParameters: FinanceApiFinanceControllerCreateCommissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCreateCommission(requestParameters.createCommissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء خطة عمولة
         * @param {FinanceApiFinanceControllerCreateCommissionPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateCommissionPlan(requestParameters: FinanceApiFinanceControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCreateCommissionPlan(requestParameters.financeControllerCreateCommissionPlanRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء كوبون
         * @param {FinanceApiFinanceControllerCreateCouponRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateCoupon(requestParameters: FinanceApiFinanceControllerCreateCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCreateCoupon(requestParameters.createFinancialCouponDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء دفعة من العمولات
         * @param {FinanceApiFinanceControllerCreatePayoutBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreatePayoutBatch(requestParameters: FinanceApiFinanceControllerCreatePayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCreatePayoutBatch(requestParameters.financeControllerCreatePayoutBatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء مطابقة مالية
         * @param {FinanceApiFinanceControllerCreateReconciliationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateReconciliation(requestParameters: FinanceApiFinanceControllerCreateReconciliationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCreateReconciliation(requestParameters.financeControllerCreateReconciliationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء تسوية
         * @param {FinanceApiFinanceControllerCreateSettlementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerCreateSettlement(requestParameters: FinanceApiFinanceControllerCreateSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerCreateSettlement(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تثبيت تقرير
         * @param {FinanceApiFinanceControllerFinalizeReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerFinalizeReport(requestParameters: FinanceApiFinanceControllerFinalizeReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerFinalizeReport(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء تقرير يومي
         * @param {FinanceApiFinanceControllerGenerateDailyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGenerateDailyReport(requestParameters: FinanceApiFinanceControllerGenerateDailyReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGenerateDailyReport(requestParameters.financeControllerGenerateDailyReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary خطط العمولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetCommissionPlans(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetCommissionPlans(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل الكوبونات
         * @param {FinanceApiFinanceControllerGetCouponsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetCoupons(requestParameters: FinanceApiFinanceControllerGetCouponsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetCoupons(requestParameters.isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على تقرير يومي
         * @param {FinanceApiFinanceControllerGetDailyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetDailyReport(requestParameters: FinanceApiFinanceControllerGetDailyReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetDailyReport(requestParameters.date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على تسويات كيان
         * @param {FinanceApiFinanceControllerGetEntitySettlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetEntitySettlements(requestParameters: FinanceApiFinanceControllerGetEntitySettlementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetEntitySettlements(requestParameters.entityId, requestParameters.entityModel, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات عمولاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetMyCommissionStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetMyCommissionStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على عمولاتي
         * @param {FinanceApiFinanceControllerGetMyCommissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetMyCommissions(requestParameters: FinanceApiFinanceControllerGetMyCommissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetMyCommissions(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على دفعة
         * @param {FinanceApiFinanceControllerGetPayoutBatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetPayoutBatch(requestParameters: FinanceApiFinanceControllerGetPayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetPayoutBatch(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على عناصر دفعة
         * @param {FinanceApiFinanceControllerGetPayoutBatchItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetPayoutBatchItems(requestParameters: FinanceApiFinanceControllerGetPayoutBatchItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetPayoutBatchItems(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل الدفعات
         * @param {FinanceApiFinanceControllerGetPayoutBatchesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetPayoutBatches(requestParameters: FinanceApiFinanceControllerGetPayoutBatchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetPayoutBatches(requestParameters.status, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على مطابقة
         * @param {FinanceApiFinanceControllerGetReconciliationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetReconciliation(requestParameters: FinanceApiFinanceControllerGetReconciliationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetReconciliation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل المطابقات
         * @param {FinanceApiFinanceControllerGetReconciliationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetReconciliations(requestParameters: FinanceApiFinanceControllerGetReconciliationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetReconciliations(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على التقارير
         * @param {FinanceApiFinanceControllerGetReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetReports(requestParameters: FinanceApiFinanceControllerGetReportsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetReports(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على تسوية
         * @param {FinanceApiFinanceControllerGetSettlementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerGetSettlement(requestParameters: FinanceApiFinanceControllerGetSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerGetSettlement(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حل مشكلة في المطابقة
         * @param {FinanceApiFinanceControllerResolveReconciliationIssueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerResolveReconciliationIssue(requestParameters: FinanceApiFinanceControllerResolveReconciliationIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerResolveReconciliationIssue(requestParameters.id, requestParameters.issueIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث خطة عمولة
         * @param {FinanceApiFinanceControllerUpdateCommissionPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerUpdateCommissionPlan(requestParameters: FinanceApiFinanceControllerUpdateCommissionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerUpdateCommissionPlan(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث كوبون
         * @param {FinanceApiFinanceControllerUpdateCouponRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerUpdateCoupon(requestParameters: FinanceApiFinanceControllerUpdateCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerUpdateCoupon(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التحقق من كوبون
         * @param {FinanceApiFinanceControllerValidateCouponRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financeControllerValidateCoupon(requestParameters: FinanceApiFinanceControllerValidateCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.financeControllerValidateCoupon(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FinanceApi - interface
 */
export interface FinanceApiInterface {
    /**
     * 
     * @summary إضافة الإجماليات الفعلية
     * @param {FinanceApiFinanceControllerAddActualTotalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerAddActualTotals(requestParameters: FinanceApiFinanceControllerAddActualTotalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة مشكلة للمطابقة
     * @param {FinanceApiFinanceControllerAddReconciliationIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerAddReconciliationIssue(requestParameters: FinanceApiFinanceControllerAddReconciliationIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على عمولة
     * @param {FinanceApiFinanceControllerApproveCommissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerApproveCommission(requestParameters: FinanceApiFinanceControllerApproveCommissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على دفعة
     * @param {FinanceApiFinanceControllerApprovePayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerApprovePayoutBatch(requestParameters: FinanceApiFinanceControllerApprovePayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الموافقة على تسوية
     * @param {FinanceApiFinanceControllerApproveSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerApproveSettlement(requestParameters: FinanceApiFinanceControllerApproveSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء عمولة
     * @param {FinanceApiFinanceControllerCancelCommissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCancelCommission(requestParameters: FinanceApiFinanceControllerCancelCommissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إكمال دفعة
     * @param {FinanceApiFinanceControllerCompletePayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCompletePayoutBatch(requestParameters: FinanceApiFinanceControllerCompletePayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء عمولة جديدة
     * @param {FinanceApiFinanceControllerCreateCommissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCreateCommission(requestParameters: FinanceApiFinanceControllerCreateCommissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء خطة عمولة
     * @param {FinanceApiFinanceControllerCreateCommissionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCreateCommissionPlan(requestParameters: FinanceApiFinanceControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء كوبون
     * @param {FinanceApiFinanceControllerCreateCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCreateCoupon(requestParameters: FinanceApiFinanceControllerCreateCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء دفعة من العمولات
     * @param {FinanceApiFinanceControllerCreatePayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCreatePayoutBatch(requestParameters: FinanceApiFinanceControllerCreatePayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء مطابقة مالية
     * @param {FinanceApiFinanceControllerCreateReconciliationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCreateReconciliation(requestParameters: FinanceApiFinanceControllerCreateReconciliationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء تسوية
     * @param {FinanceApiFinanceControllerCreateSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerCreateSettlement(requestParameters: FinanceApiFinanceControllerCreateSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تثبيت تقرير
     * @param {FinanceApiFinanceControllerFinalizeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerFinalizeReport(requestParameters: FinanceApiFinanceControllerFinalizeReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء تقرير يومي
     * @param {FinanceApiFinanceControllerGenerateDailyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGenerateDailyReport(requestParameters: FinanceApiFinanceControllerGenerateDailyReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary خطط العمولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetCommissionPlans(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل الكوبونات
     * @param {FinanceApiFinanceControllerGetCouponsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetCoupons(requestParameters: FinanceApiFinanceControllerGetCouponsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على تقرير يومي
     * @param {FinanceApiFinanceControllerGetDailyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetDailyReport(requestParameters: FinanceApiFinanceControllerGetDailyReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على تسويات كيان
     * @param {FinanceApiFinanceControllerGetEntitySettlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetEntitySettlements(requestParameters: FinanceApiFinanceControllerGetEntitySettlementsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات عمولاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetMyCommissionStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على عمولاتي
     * @param {FinanceApiFinanceControllerGetMyCommissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetMyCommissions(requestParameters: FinanceApiFinanceControllerGetMyCommissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على دفعة
     * @param {FinanceApiFinanceControllerGetPayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetPayoutBatch(requestParameters: FinanceApiFinanceControllerGetPayoutBatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على عناصر دفعة
     * @param {FinanceApiFinanceControllerGetPayoutBatchItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetPayoutBatchItems(requestParameters: FinanceApiFinanceControllerGetPayoutBatchItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل الدفعات
     * @param {FinanceApiFinanceControllerGetPayoutBatchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetPayoutBatches(requestParameters: FinanceApiFinanceControllerGetPayoutBatchesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على مطابقة
     * @param {FinanceApiFinanceControllerGetReconciliationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetReconciliation(requestParameters: FinanceApiFinanceControllerGetReconciliationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل المطابقات
     * @param {FinanceApiFinanceControllerGetReconciliationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetReconciliations(requestParameters: FinanceApiFinanceControllerGetReconciliationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على التقارير
     * @param {FinanceApiFinanceControllerGetReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetReports(requestParameters: FinanceApiFinanceControllerGetReportsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على تسوية
     * @param {FinanceApiFinanceControllerGetSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerGetSettlement(requestParameters: FinanceApiFinanceControllerGetSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حل مشكلة في المطابقة
     * @param {FinanceApiFinanceControllerResolveReconciliationIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerResolveReconciliationIssue(requestParameters: FinanceApiFinanceControllerResolveReconciliationIssueRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث خطة عمولة
     * @param {FinanceApiFinanceControllerUpdateCommissionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerUpdateCommissionPlan(requestParameters: FinanceApiFinanceControllerUpdateCommissionPlanRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث كوبون
     * @param {FinanceApiFinanceControllerUpdateCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerUpdateCoupon(requestParameters: FinanceApiFinanceControllerUpdateCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التحقق من كوبون
     * @param {FinanceApiFinanceControllerValidateCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financeControllerValidateCoupon(requestParameters: FinanceApiFinanceControllerValidateCouponRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for financeControllerAddActualTotals operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerAddActualTotalsRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerAddReconciliationIssue operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerAddReconciliationIssueRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerApproveCommission operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerApproveCommissionRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerApprovePayoutBatch operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerApprovePayoutBatchRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for financeControllerApproveSettlement operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerApproveSettlementRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for financeControllerCancelCommission operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCancelCommissionRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerCompletePayoutBatch operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCompletePayoutBatchRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerCreateCommission operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCreateCommissionRequest {
    readonly createCommissionDto: CreateCommissionDto
}

/**
 * Request parameters for financeControllerCreateCommissionPlan operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCreateCommissionPlanRequest {
    readonly financeControllerCreateCommissionPlanRequest: FinanceControllerCreateCommissionPlanRequest
}

/**
 * Request parameters for financeControllerCreateCoupon operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCreateCouponRequest {
    readonly createFinancialCouponDto: CreateFinancialCouponDto
}

/**
 * Request parameters for financeControllerCreatePayoutBatch operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCreatePayoutBatchRequest {
    readonly financeControllerCreatePayoutBatchRequest: FinanceControllerCreatePayoutBatchRequest
}

/**
 * Request parameters for financeControllerCreateReconciliation operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCreateReconciliationRequest {
    readonly financeControllerCreateReconciliationRequest: FinanceControllerCreateReconciliationRequest
}

/**
 * Request parameters for financeControllerCreateSettlement operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerCreateSettlementRequest {
    readonly body: object
}

/**
 * Request parameters for financeControllerFinalizeReport operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerFinalizeReportRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerGenerateDailyReport operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGenerateDailyReportRequest {
    readonly financeControllerGenerateDailyReportRequest: FinanceControllerGenerateDailyReportRequest
}

/**
 * Request parameters for financeControllerGetCoupons operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetCouponsRequest {
    readonly isActive: boolean
}

/**
 * Request parameters for financeControllerGetDailyReport operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetDailyReportRequest {
    readonly date: string
}

/**
 * Request parameters for financeControllerGetEntitySettlements operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetEntitySettlementsRequest {
    readonly entityId: string

    readonly entityModel: string

    readonly status: string
}

/**
 * Request parameters for financeControllerGetMyCommissions operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetMyCommissionsRequest {
    readonly status: string
}

/**
 * Request parameters for financeControllerGetPayoutBatch operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetPayoutBatchRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerGetPayoutBatchItems operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetPayoutBatchItemsRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerGetPayoutBatches operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetPayoutBatchesRequest {
    readonly status: string

    readonly limit: number

    readonly cursor: string
}

/**
 * Request parameters for financeControllerGetReconciliation operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetReconciliationRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerGetReconciliations operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetReconciliationsRequest {
    readonly status: string
}

/**
 * Request parameters for financeControllerGetReports operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetReportsRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for financeControllerGetSettlement operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerGetSettlementRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerResolveReconciliationIssue operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerResolveReconciliationIssueRequest {
    readonly id: string

    readonly issueIndex: string
}

/**
 * Request parameters for financeControllerUpdateCommissionPlan operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerUpdateCommissionPlanRequest {
    readonly id: string
}

/**
 * Request parameters for financeControllerUpdateCoupon operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerUpdateCouponRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for financeControllerValidateCoupon operation in FinanceApi.
 */
export interface FinanceApiFinanceControllerValidateCouponRequest {
    readonly body: object
}

/**
 * FinanceApi - object-oriented interface
 */
export class FinanceApi extends BaseAPI implements FinanceApiInterface {
    /**
     * 
     * @summary إضافة الإجماليات الفعلية
     * @param {FinanceApiFinanceControllerAddActualTotalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerAddActualTotals(requestParameters: FinanceApiFinanceControllerAddActualTotalsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerAddActualTotals(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة مشكلة للمطابقة
     * @param {FinanceApiFinanceControllerAddReconciliationIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerAddReconciliationIssue(requestParameters: FinanceApiFinanceControllerAddReconciliationIssueRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerAddReconciliationIssue(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على عمولة
     * @param {FinanceApiFinanceControllerApproveCommissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerApproveCommission(requestParameters: FinanceApiFinanceControllerApproveCommissionRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerApproveCommission(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على دفعة
     * @param {FinanceApiFinanceControllerApprovePayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerApprovePayoutBatch(requestParameters: FinanceApiFinanceControllerApprovePayoutBatchRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerApprovePayoutBatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الموافقة على تسوية
     * @param {FinanceApiFinanceControllerApproveSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerApproveSettlement(requestParameters: FinanceApiFinanceControllerApproveSettlementRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerApproveSettlement(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء عمولة
     * @param {FinanceApiFinanceControllerCancelCommissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCancelCommission(requestParameters: FinanceApiFinanceControllerCancelCommissionRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCancelCommission(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إكمال دفعة
     * @param {FinanceApiFinanceControllerCompletePayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCompletePayoutBatch(requestParameters: FinanceApiFinanceControllerCompletePayoutBatchRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCompletePayoutBatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء عمولة جديدة
     * @param {FinanceApiFinanceControllerCreateCommissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCreateCommission(requestParameters: FinanceApiFinanceControllerCreateCommissionRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCreateCommission(requestParameters.createCommissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء خطة عمولة
     * @param {FinanceApiFinanceControllerCreateCommissionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCreateCommissionPlan(requestParameters: FinanceApiFinanceControllerCreateCommissionPlanRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCreateCommissionPlan(requestParameters.financeControllerCreateCommissionPlanRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء كوبون
     * @param {FinanceApiFinanceControllerCreateCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCreateCoupon(requestParameters: FinanceApiFinanceControllerCreateCouponRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCreateCoupon(requestParameters.createFinancialCouponDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء دفعة من العمولات
     * @param {FinanceApiFinanceControllerCreatePayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCreatePayoutBatch(requestParameters: FinanceApiFinanceControllerCreatePayoutBatchRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCreatePayoutBatch(requestParameters.financeControllerCreatePayoutBatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء مطابقة مالية
     * @param {FinanceApiFinanceControllerCreateReconciliationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCreateReconciliation(requestParameters: FinanceApiFinanceControllerCreateReconciliationRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCreateReconciliation(requestParameters.financeControllerCreateReconciliationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء تسوية
     * @param {FinanceApiFinanceControllerCreateSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerCreateSettlement(requestParameters: FinanceApiFinanceControllerCreateSettlementRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerCreateSettlement(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تثبيت تقرير
     * @param {FinanceApiFinanceControllerFinalizeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerFinalizeReport(requestParameters: FinanceApiFinanceControllerFinalizeReportRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerFinalizeReport(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء تقرير يومي
     * @param {FinanceApiFinanceControllerGenerateDailyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGenerateDailyReport(requestParameters: FinanceApiFinanceControllerGenerateDailyReportRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGenerateDailyReport(requestParameters.financeControllerGenerateDailyReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary خطط العمولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetCommissionPlans(options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetCommissionPlans(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل الكوبونات
     * @param {FinanceApiFinanceControllerGetCouponsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetCoupons(requestParameters: FinanceApiFinanceControllerGetCouponsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetCoupons(requestParameters.isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على تقرير يومي
     * @param {FinanceApiFinanceControllerGetDailyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetDailyReport(requestParameters: FinanceApiFinanceControllerGetDailyReportRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetDailyReport(requestParameters.date, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على تسويات كيان
     * @param {FinanceApiFinanceControllerGetEntitySettlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetEntitySettlements(requestParameters: FinanceApiFinanceControllerGetEntitySettlementsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetEntitySettlements(requestParameters.entityId, requestParameters.entityModel, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات عمولاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetMyCommissionStats(options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetMyCommissionStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على عمولاتي
     * @param {FinanceApiFinanceControllerGetMyCommissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetMyCommissions(requestParameters: FinanceApiFinanceControllerGetMyCommissionsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetMyCommissions(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على دفعة
     * @param {FinanceApiFinanceControllerGetPayoutBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetPayoutBatch(requestParameters: FinanceApiFinanceControllerGetPayoutBatchRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetPayoutBatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على عناصر دفعة
     * @param {FinanceApiFinanceControllerGetPayoutBatchItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetPayoutBatchItems(requestParameters: FinanceApiFinanceControllerGetPayoutBatchItemsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetPayoutBatchItems(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل الدفعات
     * @param {FinanceApiFinanceControllerGetPayoutBatchesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetPayoutBatches(requestParameters: FinanceApiFinanceControllerGetPayoutBatchesRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetPayoutBatches(requestParameters.status, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على مطابقة
     * @param {FinanceApiFinanceControllerGetReconciliationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetReconciliation(requestParameters: FinanceApiFinanceControllerGetReconciliationRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetReconciliation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل المطابقات
     * @param {FinanceApiFinanceControllerGetReconciliationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetReconciliations(requestParameters: FinanceApiFinanceControllerGetReconciliationsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetReconciliations(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على التقارير
     * @param {FinanceApiFinanceControllerGetReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetReports(requestParameters: FinanceApiFinanceControllerGetReportsRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetReports(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على تسوية
     * @param {FinanceApiFinanceControllerGetSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerGetSettlement(requestParameters: FinanceApiFinanceControllerGetSettlementRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerGetSettlement(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حل مشكلة في المطابقة
     * @param {FinanceApiFinanceControllerResolveReconciliationIssueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerResolveReconciliationIssue(requestParameters: FinanceApiFinanceControllerResolveReconciliationIssueRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerResolveReconciliationIssue(requestParameters.id, requestParameters.issueIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث خطة عمولة
     * @param {FinanceApiFinanceControllerUpdateCommissionPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerUpdateCommissionPlan(requestParameters: FinanceApiFinanceControllerUpdateCommissionPlanRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerUpdateCommissionPlan(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث كوبون
     * @param {FinanceApiFinanceControllerUpdateCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerUpdateCoupon(requestParameters: FinanceApiFinanceControllerUpdateCouponRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerUpdateCoupon(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التحقق من كوبون
     * @param {FinanceApiFinanceControllerValidateCouponRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public financeControllerValidateCoupon(requestParameters: FinanceApiFinanceControllerValidateCouponRequest, options?: RawAxiosRequestConfig) {
        return FinanceApiFp(this.configuration).financeControllerValidateCoupon(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Advanced Health Check - فحص متقدم شامل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerAdvanced: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/advanced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Check - الفحص الصحي الشامل للتطبيق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detailed Health Check - فحص تفصيلي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerDetailed: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/detailed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Application Info - معلومات التطبيق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Liveness Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerLiveness: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/liveness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health Metrics - مقاييس الصحة المبسطة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Readiness Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerReadiness: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Startup Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerStartup: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health/startup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Advanced Health Check - فحص متقدم شامل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerAdvanced(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerAdvanced(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerAdvanced']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health Check - الفحص الصحي الشامل للتطبيق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Detailed Health Check - فحص تفصيلي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerDetailed(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerDetailed(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerDetailed']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Application Info - معلومات التطبيق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Liveness Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerLiveness(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerLiveness(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerLiveness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health Metrics - مقاييس الصحة المبسطة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Readiness Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerReadiness(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthControllerCheck200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerReadiness(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerReadiness']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Startup Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerStartup(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerStartup(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthControllerStartup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @summary Advanced Health Check - فحص متقدم شامل
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerAdvanced(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response> {
            return localVarFp.healthControllerAdvanced(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Check - الفحص الصحي الشامل للتطبيق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheck(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response> {
            return localVarFp.healthControllerCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detailed Health Check - فحص تفصيلي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerDetailed(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthControllerDetailed(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Application Info - معلومات التطبيق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerInfo(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthControllerInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Liveness Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerLiveness(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response> {
            return localVarFp.healthControllerLiveness(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health Metrics - مقاييس الصحة المبسطة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthControllerMetrics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Readiness Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerReadiness(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response> {
            return localVarFp.healthControllerReadiness(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Startup Probe - للـ Kubernetes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerStartup(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthControllerStartup(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - interface
 */
export interface HealthApiInterface {
    /**
     * 
     * @summary Advanced Health Check - فحص متقدم شامل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerAdvanced(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response>;

    /**
     * 
     * @summary Health Check - الفحص الصحي الشامل للتطبيق
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerCheck(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response>;

    /**
     * 
     * @summary Detailed Health Check - فحص تفصيلي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerDetailed(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Application Info - معلومات التطبيق
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerInfo(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Liveness Probe - للـ Kubernetes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerLiveness(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response>;

    /**
     * 
     * @summary Health Metrics - مقاييس الصحة المبسطة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Readiness Probe - للـ Kubernetes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerReadiness(options?: RawAxiosRequestConfig): AxiosPromise<HealthControllerCheck200Response>;

    /**
     * 
     * @summary Startup Probe - للـ Kubernetes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthControllerStartup(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * HealthApi - object-oriented interface
 */
export class HealthApi extends BaseAPI implements HealthApiInterface {
    /**
     * 
     * @summary Advanced Health Check - فحص متقدم شامل
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerAdvanced(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerAdvanced(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Check - الفحص الصحي الشامل للتطبيق
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerCheck(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detailed Health Check - فحص تفصيلي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerDetailed(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerDetailed(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Application Info - معلومات التطبيق
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerInfo(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Liveness Probe - للـ Kubernetes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerLiveness(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerLiveness(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health Metrics - مقاييس الصحة المبسطة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerMetrics(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerMetrics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Readiness Probe - للـ Kubernetes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerReadiness(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerReadiness(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Startup Probe - للـ Kubernetes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerStartup(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthControllerStartup(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LegalApi - axios parameter creator
 */
export const LegalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تفعيل سياسة خصوصية معينة (للإدارة)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerActivatePrivacyPolicy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('legalControllerActivatePrivacyPolicy', 'id', id)
            const localVarPath = `/legal/admin/privacy-policy/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفعيل شروط خدمة معينة (للإدارة)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerActivateTermsOfService: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('legalControllerActivateTermsOfService', 'id', id)
            const localVarPath = `/legal/admin/terms-of-service/{id}/activate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التحقق من موافقة المستخدم على الإصدار الحالي
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerCheckConsent: async (type: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('legalControllerCheckConsent', 'type', type)
            const localVarPath = `/legal/consent/check/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء سياسة خصوصية جديدة (للإدارة)
         * @param {CreatePrivacyPolicyDto} createPrivacyPolicyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerCreatePrivacyPolicy: async (createPrivacyPolicyDto: CreatePrivacyPolicyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPrivacyPolicyDto' is not null or undefined
            assertParamExists('legalControllerCreatePrivacyPolicy', 'createPrivacyPolicyDto', createPrivacyPolicyDto)
            const localVarPath = `/legal/admin/privacy-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPrivacyPolicyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء شروط خدمة جديدة (للإدارة)
         * @param {CreateTermsOfServiceDto} createTermsOfServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerCreateTermsOfService: async (createTermsOfServiceDto: CreateTermsOfServiceDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTermsOfServiceDto' is not null or undefined
            assertParamExists('legalControllerCreateTermsOfService', 'createTermsOfServiceDto', createTermsOfServiceDto)
            const localVarPath = `/legal/admin/terms-of-service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTermsOfServiceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على جميع سياسات الخصوصية (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetAllPrivacyPolicies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal/admin/privacy-policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على جميع شروط الخدمة (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetAllTermsOfService: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal/admin/terms-of-service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على إحصائيات الموافقات (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetConsentStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal/admin/consent/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على موافقات المستخدم الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetMyConsents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal/consent/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على سياسة الخصوصية النشطة
         * @param {LegalControllerGetPrivacyPolicyLangEnum} [lang] اللغة (ar أو en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetPrivacyPolicy: async (lang?: LegalControllerGetPrivacyPolicyLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal/privacy-policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على شروط الخدمة النشطة
         * @param {LegalControllerGetTermsOfServiceLangEnum} [lang] اللغة (ar أو en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetTermsOfService: async (lang?: LegalControllerGetTermsOfServiceLangEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/legal/terms-of-service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل موافقة المستخدم
         * @param {RecordConsentDto} recordConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerRecordConsent: async (recordConsentDto: RecordConsentDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordConsentDto' is not null or undefined
            assertParamExists('legalControllerRecordConsent', 'recordConsentDto', recordConsentDto)
            const localVarPath = `/legal/consent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recordConsentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalApi - functional programming interface
 */
export const LegalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LegalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تفعيل سياسة خصوصية معينة (للإدارة)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerActivatePrivacyPolicy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerActivatePrivacyPolicy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerActivatePrivacyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفعيل شروط خدمة معينة (للإدارة)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerActivateTermsOfService(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerActivateTermsOfService(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerActivateTermsOfService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التحقق من موافقة المستخدم على الإصدار الحالي
         * @param {string} type 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerCheckConsent(type: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerCheckConsent(type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerCheckConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء سياسة خصوصية جديدة (للإدارة)
         * @param {CreatePrivacyPolicyDto} createPrivacyPolicyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerCreatePrivacyPolicy(createPrivacyPolicyDto: CreatePrivacyPolicyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerCreatePrivacyPolicy(createPrivacyPolicyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerCreatePrivacyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء شروط خدمة جديدة (للإدارة)
         * @param {CreateTermsOfServiceDto} createTermsOfServiceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerCreateTermsOfService(createTermsOfServiceDto: CreateTermsOfServiceDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerCreateTermsOfService(createTermsOfServiceDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerCreateTermsOfService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على جميع سياسات الخصوصية (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerGetAllPrivacyPolicies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerGetAllPrivacyPolicies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerGetAllPrivacyPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على جميع شروط الخدمة (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerGetAllTermsOfService(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerGetAllTermsOfService(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerGetAllTermsOfService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على إحصائيات الموافقات (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerGetConsentStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerGetConsentStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerGetConsentStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على موافقات المستخدم الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerGetMyConsents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerGetMyConsents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerGetMyConsents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على سياسة الخصوصية النشطة
         * @param {LegalControllerGetPrivacyPolicyLangEnum} [lang] اللغة (ar أو en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerGetPrivacyPolicy(lang?: LegalControllerGetPrivacyPolicyLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerGetPrivacyPolicy(lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerGetPrivacyPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على شروط الخدمة النشطة
         * @param {LegalControllerGetTermsOfServiceLangEnum} [lang] اللغة (ar أو en)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerGetTermsOfService(lang?: LegalControllerGetTermsOfServiceLangEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerGetTermsOfService(lang, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerGetTermsOfService']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل موافقة المستخدم
         * @param {RecordConsentDto} recordConsentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async legalControllerRecordConsent(recordConsentDto: RecordConsentDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.legalControllerRecordConsent(recordConsentDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LegalApi.legalControllerRecordConsent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LegalApi - factory interface
 */
export const LegalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LegalApiFp(configuration)
    return {
        /**
         * 
         * @summary تفعيل سياسة خصوصية معينة (للإدارة)
         * @param {LegalApiLegalControllerActivatePrivacyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerActivatePrivacyPolicy(requestParameters: LegalApiLegalControllerActivatePrivacyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerActivatePrivacyPolicy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفعيل شروط خدمة معينة (للإدارة)
         * @param {LegalApiLegalControllerActivateTermsOfServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerActivateTermsOfService(requestParameters: LegalApiLegalControllerActivateTermsOfServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerActivateTermsOfService(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التحقق من موافقة المستخدم على الإصدار الحالي
         * @param {LegalApiLegalControllerCheckConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerCheckConsent(requestParameters: LegalApiLegalControllerCheckConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerCheckConsent(requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء سياسة خصوصية جديدة (للإدارة)
         * @param {LegalApiLegalControllerCreatePrivacyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerCreatePrivacyPolicy(requestParameters: LegalApiLegalControllerCreatePrivacyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerCreatePrivacyPolicy(requestParameters.createPrivacyPolicyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء شروط خدمة جديدة (للإدارة)
         * @param {LegalApiLegalControllerCreateTermsOfServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerCreateTermsOfService(requestParameters: LegalApiLegalControllerCreateTermsOfServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerCreateTermsOfService(requestParameters.createTermsOfServiceDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على جميع سياسات الخصوصية (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetAllPrivacyPolicies(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerGetAllPrivacyPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على جميع شروط الخدمة (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetAllTermsOfService(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerGetAllTermsOfService(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على إحصائيات الموافقات (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetConsentStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerGetConsentStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على موافقات المستخدم الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetMyConsents(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerGetMyConsents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على سياسة الخصوصية النشطة
         * @param {LegalApiLegalControllerGetPrivacyPolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetPrivacyPolicy(requestParameters: LegalApiLegalControllerGetPrivacyPolicyRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerGetPrivacyPolicy(requestParameters.lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على شروط الخدمة النشطة
         * @param {LegalApiLegalControllerGetTermsOfServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerGetTermsOfService(requestParameters: LegalApiLegalControllerGetTermsOfServiceRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerGetTermsOfService(requestParameters.lang, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل موافقة المستخدم
         * @param {LegalApiLegalControllerRecordConsentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalControllerRecordConsent(requestParameters: LegalApiLegalControllerRecordConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.legalControllerRecordConsent(requestParameters.recordConsentDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LegalApi - interface
 */
export interface LegalApiInterface {
    /**
     * 
     * @summary تفعيل سياسة خصوصية معينة (للإدارة)
     * @param {LegalApiLegalControllerActivatePrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerActivatePrivacyPolicy(requestParameters: LegalApiLegalControllerActivatePrivacyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفعيل شروط خدمة معينة (للإدارة)
     * @param {LegalApiLegalControllerActivateTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerActivateTermsOfService(requestParameters: LegalApiLegalControllerActivateTermsOfServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التحقق من موافقة المستخدم على الإصدار الحالي
     * @param {LegalApiLegalControllerCheckConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerCheckConsent(requestParameters: LegalApiLegalControllerCheckConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء سياسة خصوصية جديدة (للإدارة)
     * @param {LegalApiLegalControllerCreatePrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerCreatePrivacyPolicy(requestParameters: LegalApiLegalControllerCreatePrivacyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء شروط خدمة جديدة (للإدارة)
     * @param {LegalApiLegalControllerCreateTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerCreateTermsOfService(requestParameters: LegalApiLegalControllerCreateTermsOfServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على جميع سياسات الخصوصية (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerGetAllPrivacyPolicies(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على جميع شروط الخدمة (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerGetAllTermsOfService(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على إحصائيات الموافقات (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerGetConsentStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على موافقات المستخدم الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerGetMyConsents(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على سياسة الخصوصية النشطة
     * @param {LegalApiLegalControllerGetPrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerGetPrivacyPolicy(requestParameters?: LegalApiLegalControllerGetPrivacyPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على شروط الخدمة النشطة
     * @param {LegalApiLegalControllerGetTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerGetTermsOfService(requestParameters?: LegalApiLegalControllerGetTermsOfServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل موافقة المستخدم
     * @param {LegalApiLegalControllerRecordConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    legalControllerRecordConsent(requestParameters: LegalApiLegalControllerRecordConsentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for legalControllerActivatePrivacyPolicy operation in LegalApi.
 */
export interface LegalApiLegalControllerActivatePrivacyPolicyRequest {
    readonly id: string
}

/**
 * Request parameters for legalControllerActivateTermsOfService operation in LegalApi.
 */
export interface LegalApiLegalControllerActivateTermsOfServiceRequest {
    readonly id: string
}

/**
 * Request parameters for legalControllerCheckConsent operation in LegalApi.
 */
export interface LegalApiLegalControllerCheckConsentRequest {
    readonly type: string
}

/**
 * Request parameters for legalControllerCreatePrivacyPolicy operation in LegalApi.
 */
export interface LegalApiLegalControllerCreatePrivacyPolicyRequest {
    readonly createPrivacyPolicyDto: CreatePrivacyPolicyDto
}

/**
 * Request parameters for legalControllerCreateTermsOfService operation in LegalApi.
 */
export interface LegalApiLegalControllerCreateTermsOfServiceRequest {
    readonly createTermsOfServiceDto: CreateTermsOfServiceDto
}

/**
 * Request parameters for legalControllerGetPrivacyPolicy operation in LegalApi.
 */
export interface LegalApiLegalControllerGetPrivacyPolicyRequest {
    /**
     * اللغة (ar أو en)
     */
    readonly lang?: LegalControllerGetPrivacyPolicyLangEnum
}

/**
 * Request parameters for legalControllerGetTermsOfService operation in LegalApi.
 */
export interface LegalApiLegalControllerGetTermsOfServiceRequest {
    /**
     * اللغة (ar أو en)
     */
    readonly lang?: LegalControllerGetTermsOfServiceLangEnum
}

/**
 * Request parameters for legalControllerRecordConsent operation in LegalApi.
 */
export interface LegalApiLegalControllerRecordConsentRequest {
    readonly recordConsentDto: RecordConsentDto
}

/**
 * LegalApi - object-oriented interface
 */
export class LegalApi extends BaseAPI implements LegalApiInterface {
    /**
     * 
     * @summary تفعيل سياسة خصوصية معينة (للإدارة)
     * @param {LegalApiLegalControllerActivatePrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerActivatePrivacyPolicy(requestParameters: LegalApiLegalControllerActivatePrivacyPolicyRequest, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerActivatePrivacyPolicy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفعيل شروط خدمة معينة (للإدارة)
     * @param {LegalApiLegalControllerActivateTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerActivateTermsOfService(requestParameters: LegalApiLegalControllerActivateTermsOfServiceRequest, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerActivateTermsOfService(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التحقق من موافقة المستخدم على الإصدار الحالي
     * @param {LegalApiLegalControllerCheckConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerCheckConsent(requestParameters: LegalApiLegalControllerCheckConsentRequest, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerCheckConsent(requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء سياسة خصوصية جديدة (للإدارة)
     * @param {LegalApiLegalControllerCreatePrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerCreatePrivacyPolicy(requestParameters: LegalApiLegalControllerCreatePrivacyPolicyRequest, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerCreatePrivacyPolicy(requestParameters.createPrivacyPolicyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء شروط خدمة جديدة (للإدارة)
     * @param {LegalApiLegalControllerCreateTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerCreateTermsOfService(requestParameters: LegalApiLegalControllerCreateTermsOfServiceRequest, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerCreateTermsOfService(requestParameters.createTermsOfServiceDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على جميع سياسات الخصوصية (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerGetAllPrivacyPolicies(options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerGetAllPrivacyPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على جميع شروط الخدمة (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerGetAllTermsOfService(options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerGetAllTermsOfService(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على إحصائيات الموافقات (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerGetConsentStatistics(options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerGetConsentStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على موافقات المستخدم الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerGetMyConsents(options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerGetMyConsents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على سياسة الخصوصية النشطة
     * @param {LegalApiLegalControllerGetPrivacyPolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerGetPrivacyPolicy(requestParameters: LegalApiLegalControllerGetPrivacyPolicyRequest = {}, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerGetPrivacyPolicy(requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على شروط الخدمة النشطة
     * @param {LegalApiLegalControllerGetTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerGetTermsOfService(requestParameters: LegalApiLegalControllerGetTermsOfServiceRequest = {}, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerGetTermsOfService(requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل موافقة المستخدم
     * @param {LegalApiLegalControllerRecordConsentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public legalControllerRecordConsent(requestParameters: LegalApiLegalControllerRecordConsentRequest, options?: RawAxiosRequestConfig) {
        return LegalApiFp(this.configuration).legalControllerRecordConsent(requestParameters.recordConsentDto, options).then((request) => request(this.axios, this.basePath));
    }
}

export const LegalControllerGetPrivacyPolicyLangEnum = {
    Ar: 'ar',
    En: 'en'
} as const;
export type LegalControllerGetPrivacyPolicyLangEnum = typeof LegalControllerGetPrivacyPolicyLangEnum[keyof typeof LegalControllerGetPrivacyPolicyLangEnum];
export const LegalControllerGetTermsOfServiceLangEnum = {
    Ar: 'ar',
    En: 'en'
} as const;
export type LegalControllerGetTermsOfServiceLangEnum = typeof LegalControllerGetTermsOfServiceLangEnum[keyof typeof LegalControllerGetTermsOfServiceLangEnum];


/**
 * MarketerApi - axios parameter creator
 */
export const MarketerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إنشاء كود إحالة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGenerateReferralCode: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/referrals/generate-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات العمولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetCommissionStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/commissions/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أرباحي
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetEarnings: async (startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('marketerControllerGetEarnings', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('marketerControllerGetEarnings', 'endDate', endDate)
            const localVarPath = `/marketer/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفصيل الأرباح
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetEarningsBreakdown: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/earnings/breakdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملفاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetFiles: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات الشهر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMonthStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/statistics/month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary عمولاتي
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyCommissions: async (status: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('marketerControllerGetMyCommissions', 'status', status)
            const localVarPath = `/marketer/commissions/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحالاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyReferrals: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/referrals/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary متاجري
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyStores: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/stores/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تجاري
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyVendors: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/vendors/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إشعاراتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetNotifications: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary نظرة عامة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetOverview: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary العمولات المعلقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetPendingCommissions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/commissions/pending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ملفي الشخصي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات الإحالات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetReferralStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/referrals/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetStoreDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketerControllerGetStoreDetails', 'id', id)
            const localVarPath = `/marketer/stores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary أداء المتجر
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetStorePerformance: async (id: string, startDate: string, endDate: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketerControllerGetStorePerformance', 'id', id)
            // verify required parameter 'startDate' is not null or undefined
            assertParamExists('marketerControllerGetStorePerformance', 'startDate', startDate)
            // verify required parameter 'endDate' is not null or undefined
            assertParamExists('marketerControllerGetStorePerformance', 'endDate', endDate)
            const localVarPath = `/marketer/stores/{id}/performance`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات المنطقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetTerritoryStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/territory/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetTodayStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketer/statistics/today`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetVendorDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketerControllerGetVendorDetails', 'id', id)
            const localVarPath = `/marketer/vendors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديد إشعار كمقروء
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerMarkNotificationRead: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('marketerControllerMarkNotificationRead', 'id', id)
            const localVarPath = `/marketer/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث الملف الشخصي
         * @param {MarketerControllerUpdateProfileRequest} marketerControllerUpdateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerUpdateProfile: async (marketerControllerUpdateProfileRequest: MarketerControllerUpdateProfileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketerControllerUpdateProfileRequest' is not null or undefined
            assertParamExists('marketerControllerUpdateProfile', 'marketerControllerUpdateProfileRequest', marketerControllerUpdateProfileRequest)
            const localVarPath = `/marketer/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marketerControllerUpdateProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary رفع ملف
         * @param {MarketerControllerUploadFileRequest} marketerControllerUploadFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerUploadFile: async (marketerControllerUploadFileRequest: MarketerControllerUploadFileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketerControllerUploadFileRequest' is not null or undefined
            assertParamExists('marketerControllerUploadFile', 'marketerControllerUploadFileRequest', marketerControllerUploadFileRequest)
            const localVarPath = `/marketer/files/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marketerControllerUploadFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketerApi - functional programming interface
 */
export const MarketerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إنشاء كود إحالة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGenerateReferralCode(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGenerateReferralCode(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGenerateReferralCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات العمولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetCommissionStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetCommissionStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetCommissionStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أرباحي
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetEarnings(startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetEarnings(startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetEarnings']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفصيل الأرباح
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetEarningsBreakdown(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetEarningsBreakdown(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetEarningsBreakdown']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملفاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetFiles(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetFiles(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات الشهر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetMonthStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetMonthStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetMonthStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary عمولاتي
         * @param {string} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetMyCommissions(status: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetMyCommissions(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetMyCommissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحالاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetMyReferrals(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetMyReferrals(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetMyReferrals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary متاجري
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetMyStores(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetMyStores(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetMyStores']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تجاري
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetMyVendors(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetMyVendors(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetMyVendors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إشعاراتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetNotifications(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetNotifications(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary نظرة عامة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetOverview(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetOverview(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetOverview']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary العمولات المعلقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetPendingCommissions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetPendingCommissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetPendingCommissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ملفي الشخصي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات الإحالات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetReferralStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetReferralStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetReferralStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل متجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetStoreDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetStoreDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetStoreDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary أداء المتجر
         * @param {string} id 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetStorePerformance(id: string, startDate: string, endDate: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetStorePerformance(id, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetStorePerformance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات المنطقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetTerritoryStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetTerritoryStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetTerritoryStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetTodayStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetTodayStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetTodayStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerGetVendorDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerGetVendorDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerGetVendorDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديد إشعار كمقروء
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerMarkNotificationRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerMarkNotificationRead(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerMarkNotificationRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث الملف الشخصي
         * @param {MarketerControllerUpdateProfileRequest} marketerControllerUpdateProfileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerUpdateProfile(marketerControllerUpdateProfileRequest: MarketerControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerUpdateProfile(marketerControllerUpdateProfileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerUpdateProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary رفع ملف
         * @param {MarketerControllerUploadFileRequest} marketerControllerUploadFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketerControllerUploadFile(marketerControllerUploadFileRequest: MarketerControllerUploadFileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketerControllerUploadFile(marketerControllerUploadFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketerApi.marketerControllerUploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketerApi - factory interface
 */
export const MarketerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketerApiFp(configuration)
    return {
        /**
         * 
         * @summary إنشاء كود إحالة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGenerateReferralCode(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGenerateReferralCode(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات العمولات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetCommissionStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetCommissionStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أرباحي
         * @param {MarketerApiMarketerControllerGetEarningsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetEarnings(requestParameters: MarketerApiMarketerControllerGetEarningsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetEarnings(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفصيل الأرباح
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetEarningsBreakdown(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetEarningsBreakdown(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملفاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetFiles(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetFiles(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات الشهر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMonthStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetMonthStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary عمولاتي
         * @param {MarketerApiMarketerControllerGetMyCommissionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyCommissions(requestParameters: MarketerApiMarketerControllerGetMyCommissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetMyCommissions(requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحالاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyReferrals(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetMyReferrals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary متاجري
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyStores(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetMyStores(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تجاري
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetMyVendors(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetMyVendors(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إشعاراتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetNotifications(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetNotifications(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary نظرة عامة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetOverview(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetOverview(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary العمولات المعلقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetPendingCommissions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetPendingCommissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ملفي الشخصي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات الإحالات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetReferralStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetReferralStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل متجر
         * @param {MarketerApiMarketerControllerGetStoreDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetStoreDetails(requestParameters: MarketerApiMarketerControllerGetStoreDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetStoreDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary أداء المتجر
         * @param {MarketerApiMarketerControllerGetStorePerformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetStorePerformance(requestParameters: MarketerApiMarketerControllerGetStorePerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetStorePerformance(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات المنطقة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetTerritoryStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetTerritoryStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات اليوم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetTodayStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetTodayStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل تاجر
         * @param {MarketerApiMarketerControllerGetVendorDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerGetVendorDetails(requestParameters: MarketerApiMarketerControllerGetVendorDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerGetVendorDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديد إشعار كمقروء
         * @param {MarketerApiMarketerControllerMarkNotificationReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerMarkNotificationRead(requestParameters: MarketerApiMarketerControllerMarkNotificationReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerMarkNotificationRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث الملف الشخصي
         * @param {MarketerApiMarketerControllerUpdateProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerUpdateProfile(requestParameters: MarketerApiMarketerControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerUpdateProfile(requestParameters.marketerControllerUpdateProfileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary رفع ملف
         * @param {MarketerApiMarketerControllerUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketerControllerUploadFile(requestParameters: MarketerApiMarketerControllerUploadFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.marketerControllerUploadFile(requestParameters.marketerControllerUploadFileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketerApi - interface
 */
export interface MarketerApiInterface {
    /**
     * 
     * @summary إنشاء كود إحالة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGenerateReferralCode(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات العمولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetCommissionStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أرباحي
     * @param {MarketerApiMarketerControllerGetEarningsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetEarnings(requestParameters: MarketerApiMarketerControllerGetEarningsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفصيل الأرباح
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetEarningsBreakdown(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملفاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetFiles(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات الشهر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetMonthStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary عمولاتي
     * @param {MarketerApiMarketerControllerGetMyCommissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetMyCommissions(requestParameters: MarketerApiMarketerControllerGetMyCommissionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحالاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetMyReferrals(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary متاجري
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetMyStores(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تجاري
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetMyVendors(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إشعاراتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetNotifications(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary نظرة عامة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetOverview(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary العمولات المعلقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetPendingCommissions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary ملفي الشخصي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات الإحالات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetReferralStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل متجر
     * @param {MarketerApiMarketerControllerGetStoreDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetStoreDetails(requestParameters: MarketerApiMarketerControllerGetStoreDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary أداء المتجر
     * @param {MarketerApiMarketerControllerGetStorePerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetStorePerformance(requestParameters: MarketerApiMarketerControllerGetStorePerformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات المنطقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetTerritoryStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetTodayStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل تاجر
     * @param {MarketerApiMarketerControllerGetVendorDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerGetVendorDetails(requestParameters: MarketerApiMarketerControllerGetVendorDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديد إشعار كمقروء
     * @param {MarketerApiMarketerControllerMarkNotificationReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerMarkNotificationRead(requestParameters: MarketerApiMarketerControllerMarkNotificationReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث الملف الشخصي
     * @param {MarketerApiMarketerControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerUpdateProfile(requestParameters: MarketerApiMarketerControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary رفع ملف
     * @param {MarketerApiMarketerControllerUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketerControllerUploadFile(requestParameters: MarketerApiMarketerControllerUploadFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for marketerControllerGetEarnings operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerGetEarningsRequest {
    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for marketerControllerGetMyCommissions operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerGetMyCommissionsRequest {
    readonly status: string
}

/**
 * Request parameters for marketerControllerGetStoreDetails operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerGetStoreDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for marketerControllerGetStorePerformance operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerGetStorePerformanceRequest {
    readonly id: string

    readonly startDate: string

    readonly endDate: string
}

/**
 * Request parameters for marketerControllerGetVendorDetails operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerGetVendorDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for marketerControllerMarkNotificationRead operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerMarkNotificationReadRequest {
    readonly id: string
}

/**
 * Request parameters for marketerControllerUpdateProfile operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerUpdateProfileRequest {
    readonly marketerControllerUpdateProfileRequest: MarketerControllerUpdateProfileRequest
}

/**
 * Request parameters for marketerControllerUploadFile operation in MarketerApi.
 */
export interface MarketerApiMarketerControllerUploadFileRequest {
    readonly marketerControllerUploadFileRequest: MarketerControllerUploadFileRequest
}

/**
 * MarketerApi - object-oriented interface
 */
export class MarketerApi extends BaseAPI implements MarketerApiInterface {
    /**
     * 
     * @summary إنشاء كود إحالة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGenerateReferralCode(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGenerateReferralCode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات العمولات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetCommissionStatistics(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetCommissionStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أرباحي
     * @param {MarketerApiMarketerControllerGetEarningsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetEarnings(requestParameters: MarketerApiMarketerControllerGetEarningsRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetEarnings(requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفصيل الأرباح
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetEarningsBreakdown(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetEarningsBreakdown(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملفاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetFiles(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetFiles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات الشهر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetMonthStatistics(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetMonthStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary عمولاتي
     * @param {MarketerApiMarketerControllerGetMyCommissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetMyCommissions(requestParameters: MarketerApiMarketerControllerGetMyCommissionsRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetMyCommissions(requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحالاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetMyReferrals(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetMyReferrals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary متاجري
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetMyStores(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetMyStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تجاري
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetMyVendors(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetMyVendors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إشعاراتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetNotifications(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetNotifications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary نظرة عامة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetOverview(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetOverview(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary العمولات المعلقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetPendingCommissions(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetPendingCommissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ملفي الشخصي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetProfile(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات الإحالات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetReferralStatistics(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetReferralStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل متجر
     * @param {MarketerApiMarketerControllerGetStoreDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetStoreDetails(requestParameters: MarketerApiMarketerControllerGetStoreDetailsRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetStoreDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary أداء المتجر
     * @param {MarketerApiMarketerControllerGetStorePerformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetStorePerformance(requestParameters: MarketerApiMarketerControllerGetStorePerformanceRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetStorePerformance(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات المنطقة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetTerritoryStats(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetTerritoryStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات اليوم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetTodayStatistics(options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetTodayStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل تاجر
     * @param {MarketerApiMarketerControllerGetVendorDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerGetVendorDetails(requestParameters: MarketerApiMarketerControllerGetVendorDetailsRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerGetVendorDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديد إشعار كمقروء
     * @param {MarketerApiMarketerControllerMarkNotificationReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerMarkNotificationRead(requestParameters: MarketerApiMarketerControllerMarkNotificationReadRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerMarkNotificationRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث الملف الشخصي
     * @param {MarketerApiMarketerControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerUpdateProfile(requestParameters: MarketerApiMarketerControllerUpdateProfileRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerUpdateProfile(requestParameters.marketerControllerUpdateProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary رفع ملف
     * @param {MarketerApiMarketerControllerUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public marketerControllerUploadFile(requestParameters: MarketerApiMarketerControllerUploadFileRequest, options?: RawAxiosRequestConfig) {
        return MarketerApiFp(this.configuration).marketerControllerUploadFile(requestParameters.marketerControllerUploadFileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MerchantApi - axios parameter creator
 */
export const MerchantApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إنشاء خاصية منتج
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateAttribute: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerCreateAttribute', 'body', body)
            const localVarPath = `/merchants/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء فئة منتجات
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateCategory: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerCreateCategory', 'body', body)
            const localVarPath = `/merchants/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء تاجر جديد
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateMerchant: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerCreateMerchant', 'body', body)
            const localVarPath = `/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة منتج لمتجر التاجر
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateMerchantProduct: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerCreateMerchantProduct', 'body', body)
            const localVarPath = `/merchants/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة منتج للكتالوج
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateProductCatalog: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerCreateProductCatalog', 'body', body)
            const localVarPath = `/merchants/catalog/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف خاصية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteAttribute: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerDeleteAttribute', 'id', id)
            const localVarPath = `/merchants/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف فئة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteCategory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerDeleteCategory', 'id', id)
            const localVarPath = `/merchants/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteMerchant: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerDeleteMerchant', 'id', id)
            const localVarPath = `/merchants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف منتج تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteMerchantProduct: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerDeleteMerchantProduct', 'id', id)
            const localVarPath = `/merchants/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على جميع منتجات التجار
         * @param {string} merchantId 
         * @param {string} storeId 
         * @param {boolean} isAvailable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAllMerchantProducts: async (merchantId: string, storeId: string, isAvailable: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('merchantControllerGetAllMerchantProducts', 'merchantId', merchantId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('merchantControllerGetAllMerchantProducts', 'storeId', storeId)
            // verify required parameter 'isAvailable' is not null or undefined
            assertParamExists('merchantControllerGetAllMerchantProducts', 'isAvailable', isAvailable)
            const localVarPath = `/merchants/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (isAvailable !== undefined) {
                localVarQueryParameter['isAvailable'] = isAvailable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل التجار
         * @param {boolean} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAllMerchants: async (isActive: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isActive' is not null or undefined
            assertParamExists('merchantControllerGetAllMerchants', 'isActive', isActive)
            const localVarPath = `/merchants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على منتجات الكتالوج (public)
         * @param {string} usageType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAllProductCatalogs: async (usageType: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usageType' is not null or undefined
            assertParamExists('merchantControllerGetAllProductCatalogs', 'usageType', usageType)
            const localVarPath = `/merchants/catalog/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على الخصائص (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAttributes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/merchants/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على الفئات (public)
         * @param {string} parent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetCategories: async (parent: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parent' is not null or undefined
            assertParamExists('merchantControllerGetCategories', 'parent', parent)
            const localVarPath = `/merchants/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على تاجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchant: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerGetMerchant', 'id', id)
            const localVarPath = `/merchants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على منتج تاجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchantProduct: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerGetMerchantProduct', 'id', id)
            const localVarPath = `/merchants/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary منتجات التاجر (public)
         * @param {string} merchantId 
         * @param {string} storeId 
         * @param {boolean} isAvailable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchantProducts: async (merchantId: string, storeId: string, isAvailable: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            assertParamExists('merchantControllerGetMerchantProducts', 'merchantId', merchantId)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('merchantControllerGetMerchantProducts', 'storeId', storeId)
            // verify required parameter 'isAvailable' is not null or undefined
            assertParamExists('merchantControllerGetMerchantProducts', 'isAvailable', isAvailable)
            const localVarPath = `/merchants/{merchantId}/products`
                .replace(`{${"merchantId"}}`, encodeURIComponent(String(merchantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (isAvailable !== undefined) {
                localVarQueryParameter['isAvailable'] = isAvailable;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على منتج من الكتالوج (public)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetProductCatalog: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerGetProductCatalog', 'id', id)
            const localVarPath = `/merchants/catalog/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary منتجات المتجر (public)
         * @param {string} storeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetStoreProducts: async (storeId: string, sectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('merchantControllerGetStoreProducts', 'storeId', storeId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('merchantControllerGetStoreProducts', 'sectionId', sectionId)
            const localVarPath = `/merchants/stores/{storeId}/products`
                .replace(`{${"storeId"}}`, encodeURIComponent(String(storeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sectionId !== undefined) {
                localVarQueryParameter['sectionId'] = sectionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث خاصية
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateAttribute: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerUpdateAttribute', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerUpdateAttribute', 'body', body)
            const localVarPath = `/merchants/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث فئة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateCategory: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerUpdateCategory', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerUpdateCategory', 'body', body)
            const localVarPath = `/merchants/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث تاجر
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateMerchant: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerUpdateMerchant', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerUpdateMerchant', 'body', body)
            const localVarPath = `/merchants/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث منتج التاجر
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateMerchantProduct: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerUpdateMerchantProduct', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerUpdateMerchantProduct', 'body', body)
            const localVarPath = `/merchants/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث منتج في الكتالوج
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateProductCatalog: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerUpdateProductCatalog', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('merchantControllerUpdateProductCatalog', 'body', body)
            const localVarPath = `/merchants/catalog/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث مخزون منتج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateStock: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('merchantControllerUpdateStock', 'id', id)
            const localVarPath = `/merchants/products/{id}/stock`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantApi - functional programming interface
 */
export const MerchantApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إنشاء خاصية منتج
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerCreateAttribute(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerCreateAttribute(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerCreateAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء فئة منتجات
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerCreateCategory(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerCreateCategory(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerCreateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء تاجر جديد
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerCreateMerchant(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerCreateMerchant(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerCreateMerchant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة منتج لمتجر التاجر
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerCreateMerchantProduct(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerCreateMerchantProduct(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerCreateMerchantProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة منتج للكتالوج
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerCreateProductCatalog(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerCreateProductCatalog(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerCreateProductCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف خاصية
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerDeleteAttribute(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerDeleteAttribute(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerDeleteAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف فئة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerDeleteCategory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerDeleteCategory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerDeleteCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerDeleteMerchant(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerDeleteMerchant(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerDeleteMerchant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف منتج تاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerDeleteMerchantProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerDeleteMerchantProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerDeleteMerchantProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على جميع منتجات التجار
         * @param {string} merchantId 
         * @param {string} storeId 
         * @param {boolean} isAvailable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetAllMerchantProducts(merchantId: string, storeId: string, isAvailable: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetAllMerchantProducts(merchantId, storeId, isAvailable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetAllMerchantProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل التجار
         * @param {boolean} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetAllMerchants(isActive: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetAllMerchants(isActive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetAllMerchants']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على منتجات الكتالوج (public)
         * @param {string} usageType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetAllProductCatalogs(usageType: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetAllProductCatalogs(usageType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetAllProductCatalogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على الخصائص (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetAttributes(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetAttributes(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetAttributes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على الفئات (public)
         * @param {string} parent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetCategories(parent: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetCategories(parent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على تاجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetMerchant(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetMerchant(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetMerchant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على منتج تاجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetMerchantProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetMerchantProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetMerchantProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary منتجات التاجر (public)
         * @param {string} merchantId 
         * @param {string} storeId 
         * @param {boolean} isAvailable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetMerchantProducts(merchantId: string, storeId: string, isAvailable: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetMerchantProducts(merchantId, storeId, isAvailable, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetMerchantProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على منتج من الكتالوج (public)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetProductCatalog(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetProductCatalog(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetProductCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary منتجات المتجر (public)
         * @param {string} storeId 
         * @param {string} sectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerGetStoreProducts(storeId: string, sectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerGetStoreProducts(storeId, sectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerGetStoreProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث خاصية
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerUpdateAttribute(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerUpdateAttribute(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerUpdateAttribute']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث فئة
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerUpdateCategory(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerUpdateCategory(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerUpdateCategory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث تاجر
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerUpdateMerchant(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerUpdateMerchant(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerUpdateMerchant']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث منتج التاجر
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerUpdateMerchantProduct(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerUpdateMerchantProduct(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerUpdateMerchantProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث منتج في الكتالوج
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerUpdateProductCatalog(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerUpdateProductCatalog(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerUpdateProductCatalog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث مخزون منتج
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merchantControllerUpdateStock(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.merchantControllerUpdateStock(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MerchantApi.merchantControllerUpdateStock']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MerchantApi - factory interface
 */
export const MerchantApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantApiFp(configuration)
    return {
        /**
         * 
         * @summary إنشاء خاصية منتج
         * @param {MerchantApiMerchantControllerCreateAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateAttribute(requestParameters: MerchantApiMerchantControllerCreateAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerCreateAttribute(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء فئة منتجات
         * @param {MerchantApiMerchantControllerCreateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateCategory(requestParameters: MerchantApiMerchantControllerCreateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerCreateCategory(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء تاجر جديد
         * @param {MerchantApiMerchantControllerCreateMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateMerchant(requestParameters: MerchantApiMerchantControllerCreateMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerCreateMerchant(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة منتج لمتجر التاجر
         * @param {MerchantApiMerchantControllerCreateMerchantProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateMerchantProduct(requestParameters: MerchantApiMerchantControllerCreateMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerCreateMerchantProduct(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة منتج للكتالوج
         * @param {MerchantApiMerchantControllerCreateProductCatalogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerCreateProductCatalog(requestParameters: MerchantApiMerchantControllerCreateProductCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerCreateProductCatalog(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف خاصية
         * @param {MerchantApiMerchantControllerDeleteAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteAttribute(requestParameters: MerchantApiMerchantControllerDeleteAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerDeleteAttribute(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف فئة
         * @param {MerchantApiMerchantControllerDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteCategory(requestParameters: MerchantApiMerchantControllerDeleteCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerDeleteCategory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف تاجر
         * @param {MerchantApiMerchantControllerDeleteMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteMerchant(requestParameters: MerchantApiMerchantControllerDeleteMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerDeleteMerchant(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف منتج تاجر
         * @param {MerchantApiMerchantControllerDeleteMerchantProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerDeleteMerchantProduct(requestParameters: MerchantApiMerchantControllerDeleteMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerDeleteMerchantProduct(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على جميع منتجات التجار
         * @param {MerchantApiMerchantControllerGetAllMerchantProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAllMerchantProducts(requestParameters: MerchantApiMerchantControllerGetAllMerchantProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetAllMerchantProducts(requestParameters.merchantId, requestParameters.storeId, requestParameters.isAvailable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل التجار
         * @param {MerchantApiMerchantControllerGetAllMerchantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAllMerchants(requestParameters: MerchantApiMerchantControllerGetAllMerchantsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetAllMerchants(requestParameters.isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على منتجات الكتالوج (public)
         * @param {MerchantApiMerchantControllerGetAllProductCatalogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAllProductCatalogs(requestParameters: MerchantApiMerchantControllerGetAllProductCatalogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetAllProductCatalogs(requestParameters.usageType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على الخصائص (public)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetAttributes(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetAttributes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على الفئات (public)
         * @param {MerchantApiMerchantControllerGetCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetCategories(requestParameters: MerchantApiMerchantControllerGetCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetCategories(requestParameters.parent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على تاجر محدد
         * @param {MerchantApiMerchantControllerGetMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchant(requestParameters: MerchantApiMerchantControllerGetMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetMerchant(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على منتج تاجر محدد
         * @param {MerchantApiMerchantControllerGetMerchantProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchantProduct(requestParameters: MerchantApiMerchantControllerGetMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetMerchantProduct(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary منتجات التاجر (public)
         * @param {MerchantApiMerchantControllerGetMerchantProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetMerchantProducts(requestParameters: MerchantApiMerchantControllerGetMerchantProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetMerchantProducts(requestParameters.merchantId, requestParameters.storeId, requestParameters.isAvailable, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على منتج من الكتالوج (public)
         * @param {MerchantApiMerchantControllerGetProductCatalogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetProductCatalog(requestParameters: MerchantApiMerchantControllerGetProductCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetProductCatalog(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary منتجات المتجر (public)
         * @param {MerchantApiMerchantControllerGetStoreProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerGetStoreProducts(requestParameters: MerchantApiMerchantControllerGetStoreProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerGetStoreProducts(requestParameters.storeId, requestParameters.sectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث خاصية
         * @param {MerchantApiMerchantControllerUpdateAttributeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateAttribute(requestParameters: MerchantApiMerchantControllerUpdateAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerUpdateAttribute(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث فئة
         * @param {MerchantApiMerchantControllerUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateCategory(requestParameters: MerchantApiMerchantControllerUpdateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerUpdateCategory(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث تاجر
         * @param {MerchantApiMerchantControllerUpdateMerchantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateMerchant(requestParameters: MerchantApiMerchantControllerUpdateMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerUpdateMerchant(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث منتج التاجر
         * @param {MerchantApiMerchantControllerUpdateMerchantProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateMerchantProduct(requestParameters: MerchantApiMerchantControllerUpdateMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerUpdateMerchantProduct(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث منتج في الكتالوج
         * @param {MerchantApiMerchantControllerUpdateProductCatalogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateProductCatalog(requestParameters: MerchantApiMerchantControllerUpdateProductCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerUpdateProductCatalog(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث مخزون منتج
         * @param {MerchantApiMerchantControllerUpdateStockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merchantControllerUpdateStock(requestParameters: MerchantApiMerchantControllerUpdateStockRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.merchantControllerUpdateStock(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MerchantApi - interface
 */
export interface MerchantApiInterface {
    /**
     * 
     * @summary إنشاء خاصية منتج
     * @param {MerchantApiMerchantControllerCreateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerCreateAttribute(requestParameters: MerchantApiMerchantControllerCreateAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء فئة منتجات
     * @param {MerchantApiMerchantControllerCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerCreateCategory(requestParameters: MerchantApiMerchantControllerCreateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء تاجر جديد
     * @param {MerchantApiMerchantControllerCreateMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerCreateMerchant(requestParameters: MerchantApiMerchantControllerCreateMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة منتج لمتجر التاجر
     * @param {MerchantApiMerchantControllerCreateMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerCreateMerchantProduct(requestParameters: MerchantApiMerchantControllerCreateMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة منتج للكتالوج
     * @param {MerchantApiMerchantControllerCreateProductCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerCreateProductCatalog(requestParameters: MerchantApiMerchantControllerCreateProductCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف خاصية
     * @param {MerchantApiMerchantControllerDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerDeleteAttribute(requestParameters: MerchantApiMerchantControllerDeleteAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف فئة
     * @param {MerchantApiMerchantControllerDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerDeleteCategory(requestParameters: MerchantApiMerchantControllerDeleteCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف تاجر
     * @param {MerchantApiMerchantControllerDeleteMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerDeleteMerchant(requestParameters: MerchantApiMerchantControllerDeleteMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف منتج تاجر
     * @param {MerchantApiMerchantControllerDeleteMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerDeleteMerchantProduct(requestParameters: MerchantApiMerchantControllerDeleteMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على جميع منتجات التجار
     * @param {MerchantApiMerchantControllerGetAllMerchantProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetAllMerchantProducts(requestParameters: MerchantApiMerchantControllerGetAllMerchantProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل التجار
     * @param {MerchantApiMerchantControllerGetAllMerchantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetAllMerchants(requestParameters: MerchantApiMerchantControllerGetAllMerchantsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على منتجات الكتالوج (public)
     * @param {MerchantApiMerchantControllerGetAllProductCatalogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetAllProductCatalogs(requestParameters: MerchantApiMerchantControllerGetAllProductCatalogsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على الخصائص (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetAttributes(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على الفئات (public)
     * @param {MerchantApiMerchantControllerGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetCategories(requestParameters: MerchantApiMerchantControllerGetCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على تاجر محدد
     * @param {MerchantApiMerchantControllerGetMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetMerchant(requestParameters: MerchantApiMerchantControllerGetMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على منتج تاجر محدد
     * @param {MerchantApiMerchantControllerGetMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetMerchantProduct(requestParameters: MerchantApiMerchantControllerGetMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary منتجات التاجر (public)
     * @param {MerchantApiMerchantControllerGetMerchantProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetMerchantProducts(requestParameters: MerchantApiMerchantControllerGetMerchantProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على منتج من الكتالوج (public)
     * @param {MerchantApiMerchantControllerGetProductCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetProductCatalog(requestParameters: MerchantApiMerchantControllerGetProductCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary منتجات المتجر (public)
     * @param {MerchantApiMerchantControllerGetStoreProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerGetStoreProducts(requestParameters: MerchantApiMerchantControllerGetStoreProductsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث خاصية
     * @param {MerchantApiMerchantControllerUpdateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerUpdateAttribute(requestParameters: MerchantApiMerchantControllerUpdateAttributeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث فئة
     * @param {MerchantApiMerchantControllerUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerUpdateCategory(requestParameters: MerchantApiMerchantControllerUpdateCategoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث تاجر
     * @param {MerchantApiMerchantControllerUpdateMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerUpdateMerchant(requestParameters: MerchantApiMerchantControllerUpdateMerchantRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث منتج التاجر
     * @param {MerchantApiMerchantControllerUpdateMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerUpdateMerchantProduct(requestParameters: MerchantApiMerchantControllerUpdateMerchantProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث منتج في الكتالوج
     * @param {MerchantApiMerchantControllerUpdateProductCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerUpdateProductCatalog(requestParameters: MerchantApiMerchantControllerUpdateProductCatalogRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث مخزون منتج
     * @param {MerchantApiMerchantControllerUpdateStockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    merchantControllerUpdateStock(requestParameters: MerchantApiMerchantControllerUpdateStockRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for merchantControllerCreateAttribute operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerCreateAttributeRequest {
    readonly body: object
}

/**
 * Request parameters for merchantControllerCreateCategory operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerCreateCategoryRequest {
    readonly body: object
}

/**
 * Request parameters for merchantControllerCreateMerchant operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerCreateMerchantRequest {
    readonly body: object
}

/**
 * Request parameters for merchantControllerCreateMerchantProduct operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerCreateMerchantProductRequest {
    readonly body: object
}

/**
 * Request parameters for merchantControllerCreateProductCatalog operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerCreateProductCatalogRequest {
    readonly body: object
}

/**
 * Request parameters for merchantControllerDeleteAttribute operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerDeleteAttributeRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerDeleteCategory operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerDeleteCategoryRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerDeleteMerchant operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerDeleteMerchantRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerDeleteMerchantProduct operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerDeleteMerchantProductRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerGetAllMerchantProducts operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetAllMerchantProductsRequest {
    readonly merchantId: string

    readonly storeId: string

    readonly isAvailable: boolean
}

/**
 * Request parameters for merchantControllerGetAllMerchants operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetAllMerchantsRequest {
    readonly isActive: boolean
}

/**
 * Request parameters for merchantControllerGetAllProductCatalogs operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetAllProductCatalogsRequest {
    readonly usageType: string
}

/**
 * Request parameters for merchantControllerGetCategories operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetCategoriesRequest {
    readonly parent: string
}

/**
 * Request parameters for merchantControllerGetMerchant operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetMerchantRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerGetMerchantProduct operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetMerchantProductRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerGetMerchantProducts operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetMerchantProductsRequest {
    readonly merchantId: string

    readonly storeId: string

    readonly isAvailable: boolean
}

/**
 * Request parameters for merchantControllerGetProductCatalog operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetProductCatalogRequest {
    readonly id: string
}

/**
 * Request parameters for merchantControllerGetStoreProducts operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerGetStoreProductsRequest {
    readonly storeId: string

    readonly sectionId: string
}

/**
 * Request parameters for merchantControllerUpdateAttribute operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerUpdateAttributeRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for merchantControllerUpdateCategory operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerUpdateCategoryRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for merchantControllerUpdateMerchant operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerUpdateMerchantRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for merchantControllerUpdateMerchantProduct operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerUpdateMerchantProductRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for merchantControllerUpdateProductCatalog operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerUpdateProductCatalogRequest {
    readonly id: string

    readonly body: object
}

/**
 * Request parameters for merchantControllerUpdateStock operation in MerchantApi.
 */
export interface MerchantApiMerchantControllerUpdateStockRequest {
    readonly id: string
}

/**
 * MerchantApi - object-oriented interface
 */
export class MerchantApi extends BaseAPI implements MerchantApiInterface {
    /**
     * 
     * @summary إنشاء خاصية منتج
     * @param {MerchantApiMerchantControllerCreateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerCreateAttribute(requestParameters: MerchantApiMerchantControllerCreateAttributeRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerCreateAttribute(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء فئة منتجات
     * @param {MerchantApiMerchantControllerCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerCreateCategory(requestParameters: MerchantApiMerchantControllerCreateCategoryRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerCreateCategory(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء تاجر جديد
     * @param {MerchantApiMerchantControllerCreateMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerCreateMerchant(requestParameters: MerchantApiMerchantControllerCreateMerchantRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerCreateMerchant(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة منتج لمتجر التاجر
     * @param {MerchantApiMerchantControllerCreateMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerCreateMerchantProduct(requestParameters: MerchantApiMerchantControllerCreateMerchantProductRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerCreateMerchantProduct(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة منتج للكتالوج
     * @param {MerchantApiMerchantControllerCreateProductCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerCreateProductCatalog(requestParameters: MerchantApiMerchantControllerCreateProductCatalogRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerCreateProductCatalog(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف خاصية
     * @param {MerchantApiMerchantControllerDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerDeleteAttribute(requestParameters: MerchantApiMerchantControllerDeleteAttributeRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerDeleteAttribute(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف فئة
     * @param {MerchantApiMerchantControllerDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerDeleteCategory(requestParameters: MerchantApiMerchantControllerDeleteCategoryRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerDeleteCategory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف تاجر
     * @param {MerchantApiMerchantControllerDeleteMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerDeleteMerchant(requestParameters: MerchantApiMerchantControllerDeleteMerchantRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerDeleteMerchant(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف منتج تاجر
     * @param {MerchantApiMerchantControllerDeleteMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerDeleteMerchantProduct(requestParameters: MerchantApiMerchantControllerDeleteMerchantProductRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerDeleteMerchantProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على جميع منتجات التجار
     * @param {MerchantApiMerchantControllerGetAllMerchantProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetAllMerchantProducts(requestParameters: MerchantApiMerchantControllerGetAllMerchantProductsRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetAllMerchantProducts(requestParameters.merchantId, requestParameters.storeId, requestParameters.isAvailable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل التجار
     * @param {MerchantApiMerchantControllerGetAllMerchantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetAllMerchants(requestParameters: MerchantApiMerchantControllerGetAllMerchantsRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetAllMerchants(requestParameters.isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على منتجات الكتالوج (public)
     * @param {MerchantApiMerchantControllerGetAllProductCatalogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetAllProductCatalogs(requestParameters: MerchantApiMerchantControllerGetAllProductCatalogsRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetAllProductCatalogs(requestParameters.usageType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على الخصائص (public)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetAttributes(options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetAttributes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على الفئات (public)
     * @param {MerchantApiMerchantControllerGetCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetCategories(requestParameters: MerchantApiMerchantControllerGetCategoriesRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetCategories(requestParameters.parent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على تاجر محدد
     * @param {MerchantApiMerchantControllerGetMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetMerchant(requestParameters: MerchantApiMerchantControllerGetMerchantRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetMerchant(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على منتج تاجر محدد
     * @param {MerchantApiMerchantControllerGetMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetMerchantProduct(requestParameters: MerchantApiMerchantControllerGetMerchantProductRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetMerchantProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary منتجات التاجر (public)
     * @param {MerchantApiMerchantControllerGetMerchantProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetMerchantProducts(requestParameters: MerchantApiMerchantControllerGetMerchantProductsRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetMerchantProducts(requestParameters.merchantId, requestParameters.storeId, requestParameters.isAvailable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على منتج من الكتالوج (public)
     * @param {MerchantApiMerchantControllerGetProductCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetProductCatalog(requestParameters: MerchantApiMerchantControllerGetProductCatalogRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetProductCatalog(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary منتجات المتجر (public)
     * @param {MerchantApiMerchantControllerGetStoreProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerGetStoreProducts(requestParameters: MerchantApiMerchantControllerGetStoreProductsRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerGetStoreProducts(requestParameters.storeId, requestParameters.sectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث خاصية
     * @param {MerchantApiMerchantControllerUpdateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerUpdateAttribute(requestParameters: MerchantApiMerchantControllerUpdateAttributeRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerUpdateAttribute(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث فئة
     * @param {MerchantApiMerchantControllerUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerUpdateCategory(requestParameters: MerchantApiMerchantControllerUpdateCategoryRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerUpdateCategory(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث تاجر
     * @param {MerchantApiMerchantControllerUpdateMerchantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerUpdateMerchant(requestParameters: MerchantApiMerchantControllerUpdateMerchantRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerUpdateMerchant(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث منتج التاجر
     * @param {MerchantApiMerchantControllerUpdateMerchantProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerUpdateMerchantProduct(requestParameters: MerchantApiMerchantControllerUpdateMerchantProductRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerUpdateMerchantProduct(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث منتج في الكتالوج
     * @param {MerchantApiMerchantControllerUpdateProductCatalogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerUpdateProductCatalog(requestParameters: MerchantApiMerchantControllerUpdateProductCatalogRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerUpdateProductCatalog(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث مخزون منتج
     * @param {MerchantApiMerchantControllerUpdateStockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public merchantControllerUpdateStock(requestParameters: MerchantApiMerchantControllerUpdateStockRequest, options?: RawAxiosRequestConfig) {
        return MerchantApiFp(this.configuration).merchantControllerUpdateStock(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MetricsApi - axios parameter creator
 */
export const MetricsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Metrics in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsControllerGetJsonMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Prometheus Metrics Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsControllerGetPrometheusMetrics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetricsApi - functional programming interface
 */
export const MetricsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetricsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Metrics in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metricsControllerGetJsonMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metricsControllerGetJsonMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.metricsControllerGetJsonMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Prometheus Metrics Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metricsControllerGetPrometheusMetrics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metricsControllerGetPrometheusMetrics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MetricsApi.metricsControllerGetPrometheusMetrics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MetricsApi - factory interface
 */
export const MetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetricsApiFp(configuration)
    return {
        /**
         * 
         * @summary Metrics in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsControllerGetJsonMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metricsControllerGetJsonMetrics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Prometheus Metrics Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsControllerGetPrometheusMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metricsControllerGetPrometheusMetrics(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetricsApi - interface
 */
export interface MetricsApiInterface {
    /**
     * 
     * @summary Metrics in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricsControllerGetJsonMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Prometheus Metrics Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    metricsControllerGetPrometheusMetrics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * MetricsApi - object-oriented interface
 */
export class MetricsApi extends BaseAPI implements MetricsApiInterface {
    /**
     * 
     * @summary Metrics in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public metricsControllerGetJsonMetrics(options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).metricsControllerGetJsonMetrics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Prometheus Metrics Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public metricsControllerGetPrometheusMetrics(options?: RawAxiosRequestConfig) {
        return MetricsApiFp(this.configuration).metricsControllerGetPrometheusMetrics(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationApi - axios parameter creator
 */
export const NotificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إنشاء إشعار (للإدارة)
         * @param {CreateNotificationDto} createNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate: async (createNotificationDto: CreateNotificationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createNotificationDto' is not null or undefined
            assertParamExists('notificationControllerCreate', 'createNotificationDto', createNotificationDto)
            const localVarPath = `/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createNotificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حظر قنوات إشعارات محددة
         * @param {CreateSuppressionDto} createSuppressionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreateSuppression: async (createSuppressionDto: CreateSuppressionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSuppressionDto' is not null or undefined
            assertParamExists('notificationControllerCreateSuppression', 'createSuppressionDto', createSuppressionDto)
            const localVarPath = `/notifications/suppression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSuppressionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف إشعار
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationControllerDelete', 'id', id)
            const localVarPath = `/notifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب إشعارات المستخدم
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetMyNotifications: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب القنوات المحظورة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetSuppressedChannels: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/suppression/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات الحظر (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetSuppressionStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/suppression/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary عدد الإشعارات غير المقروءة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetUnreadCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/unread/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب قائمة الحظر للمستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetUserSuppressions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/suppression`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديد جميع الإشعارات كمقروءة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerMarkAllAsRead: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/read-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديد الإشعار كمقروء
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerMarkAsRead: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationControllerMarkAsRead', 'id', id)
            const localVarPath = `/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء حظر قناة محددة
         * @param {NotificationControllerRemoveChannelSuppressionChannelEnum} channel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemoveChannelSuppression: async (channel: NotificationControllerRemoveChannelSuppressionChannelEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channel' is not null or undefined
            assertParamExists('notificationControllerRemoveChannelSuppression', 'channel', channel)
            const localVarPath = `/notifications/suppression/channel/{channel}`
                .replace(`{${"channel"}}`, encodeURIComponent(String(channel)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء حظر
         * @param {string} id معرف الحظر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemoveSuppression: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationControllerRemoveSuppression', 'id', id)
            const localVarPath = `/notifications/suppression/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إرسال إشعار جماعي (Admin)
         * @param {NotificationControllerSendBulkNotificationRequest} notificationControllerSendBulkNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerSendBulkNotification: async (notificationControllerSendBulkNotificationRequest: NotificationControllerSendBulkNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationControllerSendBulkNotificationRequest' is not null or undefined
            assertParamExists('notificationControllerSendBulkNotification', 'notificationControllerSendBulkNotificationRequest', notificationControllerSendBulkNotificationRequest)
            const localVarPath = `/notifications/send-bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationControllerSendBulkNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إنشاء إشعار (للإدارة)
         * @param {CreateNotificationDto} createNotificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerCreate(createNotificationDto: CreateNotificationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerCreate(createNotificationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حظر قنوات إشعارات محددة
         * @param {CreateSuppressionDto} createSuppressionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerCreateSuppression(createSuppressionDto: CreateSuppressionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerCreateSuppression(createSuppressionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerCreateSuppression']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف إشعار
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب إشعارات المستخدم
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerGetMyNotifications(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerGetMyNotifications(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerGetMyNotifications']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب القنوات المحظورة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerGetSuppressedChannels(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerGetSuppressedChannels(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerGetSuppressedChannels']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات الحظر (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerGetSuppressionStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerGetSuppressionStats(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerGetSuppressionStats']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary عدد الإشعارات غير المقروءة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerGetUnreadCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerGetUnreadCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerGetUnreadCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب قائمة الحظر للمستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerGetUserSuppressions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerGetUserSuppressions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerGetUserSuppressions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديد جميع الإشعارات كمقروءة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerMarkAllAsRead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerMarkAllAsRead(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerMarkAllAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديد الإشعار كمقروء
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerMarkAsRead(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerMarkAsRead(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerMarkAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء حظر قناة محددة
         * @param {NotificationControllerRemoveChannelSuppressionChannelEnum} channel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerRemoveChannelSuppression(channel: NotificationControllerRemoveChannelSuppressionChannelEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerRemoveChannelSuppression(channel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerRemoveChannelSuppression']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء حظر
         * @param {string} id معرف الحظر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerRemoveSuppression(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerRemoveSuppression(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerRemoveSuppression']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إرسال إشعار جماعي (Admin)
         * @param {NotificationControllerSendBulkNotificationRequest} notificationControllerSendBulkNotificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationControllerSendBulkNotification(notificationControllerSendBulkNotificationRequest: NotificationControllerSendBulkNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationControllerSendBulkNotification(notificationControllerSendBulkNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationApi.notificationControllerSendBulkNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationApi - factory interface
 */
export const NotificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationApiFp(configuration)
    return {
        /**
         * 
         * @summary إنشاء إشعار (للإدارة)
         * @param {NotificationApiNotificationControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreate(requestParameters: NotificationApiNotificationControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerCreate(requestParameters.createNotificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حظر قنوات إشعارات محددة
         * @param {NotificationApiNotificationControllerCreateSuppressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerCreateSuppression(requestParameters: NotificationApiNotificationControllerCreateSuppressionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerCreateSuppression(requestParameters.createSuppressionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف إشعار
         * @param {NotificationApiNotificationControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerDelete(requestParameters: NotificationApiNotificationControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب إشعارات المستخدم
         * @param {NotificationApiNotificationControllerGetMyNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetMyNotifications(requestParameters: NotificationApiNotificationControllerGetMyNotificationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerGetMyNotifications(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب القنوات المحظورة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetSuppressedChannels(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerGetSuppressedChannels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات الحظر (للإدارة)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetSuppressionStats(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerGetSuppressionStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary عدد الإشعارات غير المقروءة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetUnreadCount(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerGetUnreadCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب قائمة الحظر للمستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerGetUserSuppressions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerGetUserSuppressions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديد جميع الإشعارات كمقروءة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerMarkAllAsRead(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerMarkAllAsRead(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديد الإشعار كمقروء
         * @param {NotificationApiNotificationControllerMarkAsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerMarkAsRead(requestParameters: NotificationApiNotificationControllerMarkAsReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerMarkAsRead(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء حظر قناة محددة
         * @param {NotificationApiNotificationControllerRemoveChannelSuppressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemoveChannelSuppression(requestParameters: NotificationApiNotificationControllerRemoveChannelSuppressionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerRemoveChannelSuppression(requestParameters.channel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء حظر
         * @param {NotificationApiNotificationControllerRemoveSuppressionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerRemoveSuppression(requestParameters: NotificationApiNotificationControllerRemoveSuppressionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerRemoveSuppression(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إرسال إشعار جماعي (Admin)
         * @param {NotificationApiNotificationControllerSendBulkNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationControllerSendBulkNotification(requestParameters: NotificationApiNotificationControllerSendBulkNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationControllerSendBulkNotification(requestParameters.notificationControllerSendBulkNotificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationApi - interface
 */
export interface NotificationApiInterface {
    /**
     * 
     * @summary إنشاء إشعار (للإدارة)
     * @param {NotificationApiNotificationControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerCreate(requestParameters: NotificationApiNotificationControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حظر قنوات إشعارات محددة
     * @param {NotificationApiNotificationControllerCreateSuppressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerCreateSuppression(requestParameters: NotificationApiNotificationControllerCreateSuppressionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف إشعار
     * @param {NotificationApiNotificationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerDelete(requestParameters: NotificationApiNotificationControllerDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب إشعارات المستخدم
     * @param {NotificationApiNotificationControllerGetMyNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerGetMyNotifications(requestParameters?: NotificationApiNotificationControllerGetMyNotificationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب القنوات المحظورة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerGetSuppressedChannels(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات الحظر (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerGetSuppressionStats(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary عدد الإشعارات غير المقروءة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerGetUnreadCount(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب قائمة الحظر للمستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerGetUserSuppressions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديد جميع الإشعارات كمقروءة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerMarkAllAsRead(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديد الإشعار كمقروء
     * @param {NotificationApiNotificationControllerMarkAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerMarkAsRead(requestParameters: NotificationApiNotificationControllerMarkAsReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء حظر قناة محددة
     * @param {NotificationApiNotificationControllerRemoveChannelSuppressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerRemoveChannelSuppression(requestParameters: NotificationApiNotificationControllerRemoveChannelSuppressionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء حظر
     * @param {NotificationApiNotificationControllerRemoveSuppressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerRemoveSuppression(requestParameters: NotificationApiNotificationControllerRemoveSuppressionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إرسال إشعار جماعي (Admin)
     * @param {NotificationApiNotificationControllerSendBulkNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationControllerSendBulkNotification(requestParameters: NotificationApiNotificationControllerSendBulkNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for notificationControllerCreate operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerCreateRequest {
    readonly createNotificationDto: CreateNotificationDto
}

/**
 * Request parameters for notificationControllerCreateSuppression operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerCreateSuppressionRequest {
    readonly createSuppressionDto: CreateSuppressionDto
}

/**
 * Request parameters for notificationControllerDelete operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerDeleteRequest {
    readonly id: string
}

/**
 * Request parameters for notificationControllerGetMyNotifications operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerGetMyNotificationsRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for notificationControllerMarkAsRead operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerMarkAsReadRequest {
    readonly id: string
}

/**
 * Request parameters for notificationControllerRemoveChannelSuppression operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerRemoveChannelSuppressionRequest {
    readonly channel: NotificationControllerRemoveChannelSuppressionChannelEnum
}

/**
 * Request parameters for notificationControllerRemoveSuppression operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerRemoveSuppressionRequest {
    /**
     * معرف الحظر
     */
    readonly id: string
}

/**
 * Request parameters for notificationControllerSendBulkNotification operation in NotificationApi.
 */
export interface NotificationApiNotificationControllerSendBulkNotificationRequest {
    readonly notificationControllerSendBulkNotificationRequest: NotificationControllerSendBulkNotificationRequest
}

/**
 * NotificationApi - object-oriented interface
 */
export class NotificationApi extends BaseAPI implements NotificationApiInterface {
    /**
     * 
     * @summary إنشاء إشعار (للإدارة)
     * @param {NotificationApiNotificationControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerCreate(requestParameters: NotificationApiNotificationControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerCreate(requestParameters.createNotificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حظر قنوات إشعارات محددة
     * @param {NotificationApiNotificationControllerCreateSuppressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerCreateSuppression(requestParameters: NotificationApiNotificationControllerCreateSuppressionRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerCreateSuppression(requestParameters.createSuppressionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف إشعار
     * @param {NotificationApiNotificationControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerDelete(requestParameters: NotificationApiNotificationControllerDeleteRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب إشعارات المستخدم
     * @param {NotificationApiNotificationControllerGetMyNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerGetMyNotifications(requestParameters: NotificationApiNotificationControllerGetMyNotificationsRequest = {}, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerGetMyNotifications(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب القنوات المحظورة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerGetSuppressedChannels(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerGetSuppressedChannels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات الحظر (للإدارة)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerGetSuppressionStats(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerGetSuppressionStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary عدد الإشعارات غير المقروءة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerGetUnreadCount(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerGetUnreadCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب قائمة الحظر للمستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerGetUserSuppressions(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerGetUserSuppressions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديد جميع الإشعارات كمقروءة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerMarkAllAsRead(options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerMarkAllAsRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديد الإشعار كمقروء
     * @param {NotificationApiNotificationControllerMarkAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerMarkAsRead(requestParameters: NotificationApiNotificationControllerMarkAsReadRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerMarkAsRead(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء حظر قناة محددة
     * @param {NotificationApiNotificationControllerRemoveChannelSuppressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerRemoveChannelSuppression(requestParameters: NotificationApiNotificationControllerRemoveChannelSuppressionRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerRemoveChannelSuppression(requestParameters.channel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء حظر
     * @param {NotificationApiNotificationControllerRemoveSuppressionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerRemoveSuppression(requestParameters: NotificationApiNotificationControllerRemoveSuppressionRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerRemoveSuppression(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إرسال إشعار جماعي (Admin)
     * @param {NotificationApiNotificationControllerSendBulkNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public notificationControllerSendBulkNotification(requestParameters: NotificationApiNotificationControllerSendBulkNotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationApiFp(this.configuration).notificationControllerSendBulkNotification(requestParameters.notificationControllerSendBulkNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

export const NotificationControllerRemoveChannelSuppressionChannelEnum = {
    Push: 'push',
    Email: 'email',
    Sms: 'sms'
} as const;
export type NotificationControllerRemoveChannelSuppressionChannelEnum = typeof NotificationControllerRemoveChannelSuppressionChannelEnum[keyof typeof NotificationControllerRemoveChannelSuppressionChannelEnum];


/**
 * OrderApi - axios parameter creator
 */
export const OrderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * إضافة ملاحظة عامة أو خاصة للطلب
         * @summary إضافة ملاحظة للطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerAddNoteRequest} orderControllerAddNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerAddNote: async (id: string, orderControllerAddNoteRequest: OrderControllerAddNoteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerAddNote', 'id', id)
            // verify required parameter 'orderControllerAddNoteRequest' is not null or undefined
            assertParamExists('orderControllerAddNote', 'orderControllerAddNoteRequest', orderControllerAddNoteRequest)
            const localVarPath = `/delivery/order/{id}/notes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerAddNoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تغيير حالة الطلب (admin)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerAdminChangeStatus: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerAdminChangeStatus', 'id', id)
            const localVarPath = `/delivery/order/{id}/admin-status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تعيين سائق متاح للطلب (Admin/Dispatcher)
         * @summary تعيين سائق للطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerAssignDriverRequest} orderControllerAssignDriverRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerAssignDriver: async (id: string, orderControllerAssignDriverRequest: OrderControllerAssignDriverRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerAssignDriver', 'id', id)
            // verify required parameter 'orderControllerAssignDriverRequest' is not null or undefined
            assertParamExists('orderControllerAssignDriver', 'orderControllerAssignDriverRequest', orderControllerAssignDriverRequest)
            const localVarPath = `/delivery/order/{id}/assign-driver`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerAssignDriverRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إلغاء الطلب من قبل العميل مع ذكر السبب
         * @summary إلغاء الطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerVendorCancelOrderRequest} orderControllerVendorCancelOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCancelOrder: async (id: string, orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerCancelOrder', 'id', id)
            // verify required parameter 'orderControllerVendorCancelOrderRequest' is not null or undefined
            assertParamExists('orderControllerCancelOrder', 'orderControllerVendorCancelOrderRequest', orderControllerVendorCancelOrderRequest)
            const localVarPath = `/delivery/order/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerVendorCancelOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إنشاء طلب جديد مع العناصر والعنوان
         * @summary إنشاء طلب جديد
         * @param {CreateOrderDto} createOrderDto بيانات الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreateOrder: async (createOrderDto: CreateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('orderControllerCreateOrder', 'createOrderDto', createOrderDto)
            const localVarPath = `/delivery/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تصدير قائمة الطلبات بصيغة CSV أو Excel
         * @summary تصدير الطلبات إلى Excel/CSV
         * @param {string} [startDate] تاريخ البداية (ISO format)
         * @param {string} [endDate] تاريخ النهاية (ISO format)
         * @param {string} [status] حالة الطلب للتصفية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerExportOrders: async (startDate?: string, endDate?: string, status?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/order/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary خط زمني للتوصيل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetDeliveryTimeline: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetDeliveryTimeline', 'id', id)
            const localVarPath = `/delivery/order/{id}/delivery-timeline`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الوقت المتوقع للوصول
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetDriverETA: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetDriverETA', 'id', id)
            const localVarPath = `/delivery/order/{id}/driver-eta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary التتبع المباشر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetLiveTracking: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetLiveTracking', 'id', id)
            const localVarPath = `/delivery/order/{id}/live-tracking`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * جلب جميع طلبات المستخدم الحالي مع pagination
         * @summary جلب طلبات المستخدم الحالي
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد النتائج (default: 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetMyOrders: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/order/my-orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * جلب جميع طلبات المستخدم الحالي
         * @summary جلب طلبات المستخدم الحالي
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetMyOrdersShort: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب الملاحظات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetNotes: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetNotes', 'id', id)
            const localVarPath = `/delivery/order/{id}/notes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل الطلب
         * @param {string} id معرّف الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetOrder', 'id', id)
            const localVarPath = `/delivery/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب إثبات التسليم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetProofOfDelivery: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetProofOfDelivery', 'id', id)
            const localVarPath = `/delivery/order/{id}/pod`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على حالة الطلب للمشاركة العامة
         * @summary حالة الطلب (عام بدون مصادقة)
         * @param {string} id معرّف الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetPublicOrderStatus: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetPublicOrderStatus', 'id', id)
            const localVarPath = `/delivery/order/public/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل المسار
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetRouteHistory: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerGetRouteHistory', 'id', id)
            const localVarPath = `/delivery/order/{id}/route-history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * جلب جميع طلبات مستخدم معين
         * @summary جلب طلبات مستخدم محدد
         * @param {string} userId معرّف المستخدم
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetUserOrders: async (userId: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('orderControllerGetUserOrders', 'userId', userId)
            const localVarPath = `/delivery/order/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب طلبات التاجر
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetVendorOrders: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delivery/order/vendor/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تقييم الطلب والخدمة بعد التسليم
         * @summary تقييم الطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerRateOrderRequest} orderControllerRateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerRateOrder: async (id: string, orderControllerRateOrderRequest: OrderControllerRateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerRateOrder', 'id', id)
            // verify required parameter 'orderControllerRateOrderRequest' is not null or undefined
            assertParamExists('orderControllerRateOrder', 'orderControllerRateOrderRequest', orderControllerRateOrderRequest)
            const localVarPath = `/delivery/order/{id}/rate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerRateOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إعادة نفس الطلب بنفس العناصر
         * @summary إعادة طلب سابق
         * @param {string} id معرّف الطلب السابق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerRepeatOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerRepeatOrder', 'id', id)
            const localVarPath = `/delivery/order/{id}/repeat`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إرجاع المنتج بعد التسليم مع ذكر السبب
         * @summary طلب إرجاع المنتج
         * @param {string} id معرّف الطلب
         * @param {OrderControllerReturnOrderRequest} orderControllerReturnOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerReturnOrder: async (id: string, orderControllerReturnOrderRequest: OrderControllerReturnOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerReturnOrder', 'id', id)
            // verify required parameter 'orderControllerReturnOrderRequest' is not null or undefined
            assertParamExists('orderControllerReturnOrder', 'orderControllerReturnOrderRequest', orderControllerReturnOrderRequest)
            const localVarPath = `/delivery/order/{id}/return`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerReturnOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تحديد موعد محدد لتوصيل الطلب
         * @summary جدولة طلب للتوصيل لاحقاً
         * @param {string} id معرّف الطلب
         * @param {OrderControllerScheduleOrderRequest} orderControllerScheduleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerScheduleOrder: async (id: string, orderControllerScheduleOrderRequest: OrderControllerScheduleOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerScheduleOrder', 'id', id)
            // verify required parameter 'orderControllerScheduleOrderRequest' is not null or undefined
            assertParamExists('orderControllerScheduleOrder', 'orderControllerScheduleOrderRequest', orderControllerScheduleOrderRequest)
            const localVarPath = `/delivery/order/{id}/schedule`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerScheduleOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إضافة صورة وتوقيع كإثبات على التسليم
         * @summary إضافة إثبات التسليم (POD)
         * @param {string} id معرّف الطلب
         * @param {OrderControllerSetProofOfDeliveryRequest} orderControllerSetProofOfDeliveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerSetProofOfDelivery: async (id: string, orderControllerSetProofOfDeliveryRequest: OrderControllerSetProofOfDeliveryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerSetProofOfDelivery', 'id', id)
            // verify required parameter 'orderControllerSetProofOfDeliveryRequest' is not null or undefined
            assertParamExists('orderControllerSetProofOfDelivery', 'orderControllerSetProofOfDeliveryRequest', orderControllerSetProofOfDeliveryRequest)
            const localVarPath = `/delivery/order/{id}/pod`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerSetProofOfDeliveryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تتبع الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerTrackOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerTrackOrder', 'id', id)
            const localVarPath = `/delivery/order/{id}/tracking`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تحديث موقع السائق أثناء التوصيل (GPS tracking)
         * @summary تحديث موقع السائق
         * @param {string} id معرّف الطلب
         * @param {OrderControllerUpdateDriverLocationRequest} orderControllerUpdateDriverLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerUpdateDriverLocation: async (id: string, orderControllerUpdateDriverLocationRequest: OrderControllerUpdateDriverLocationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerUpdateDriverLocation', 'id', id)
            // verify required parameter 'orderControllerUpdateDriverLocationRequest' is not null or undefined
            assertParamExists('orderControllerUpdateDriverLocation', 'orderControllerUpdateDriverLocationRequest', orderControllerUpdateDriverLocationRequest)
            const localVarPath = `/delivery/order/{id}/update-location`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerUpdateDriverLocationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * قبول الطلب والبدء في التحضير
         * @summary قبول الطلب من قبل التاجر
         * @param {string} id معرّف الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerVendorAcceptOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerVendorAcceptOrder', 'id', id)
            const localVarPath = `/delivery/order/{id}/vendor-accept`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إلغاء الطلب مع تحديد السبب
         * @summary إلغاء الطلب من قبل التاجر
         * @param {string} id معرّف الطلب
         * @param {OrderControllerVendorCancelOrderRequest} orderControllerVendorCancelOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerVendorCancelOrder: async (id: string, orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderControllerVendorCancelOrder', 'id', id)
            // verify required parameter 'orderControllerVendorCancelOrderRequest' is not null or undefined
            assertParamExists('orderControllerVendorCancelOrder', 'orderControllerVendorCancelOrderRequest', orderControllerVendorCancelOrderRequest)
            const localVarPath = `/delivery/order/{id}/vendor-cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderControllerVendorCancelOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderApi - functional programming interface
 */
export const OrderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderApiAxiosParamCreator(configuration)
    return {
        /**
         * إضافة ملاحظة عامة أو خاصة للطلب
         * @summary إضافة ملاحظة للطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerAddNoteRequest} orderControllerAddNoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerAddNote(id: string, orderControllerAddNoteRequest: OrderControllerAddNoteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerAddNote(id, orderControllerAddNoteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerAddNote']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تغيير حالة الطلب (admin)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerAdminChangeStatus(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerAdminChangeStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerAdminChangeStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تعيين سائق متاح للطلب (Admin/Dispatcher)
         * @summary تعيين سائق للطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerAssignDriverRequest} orderControllerAssignDriverRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerAssignDriver(id: string, orderControllerAssignDriverRequest: OrderControllerAssignDriverRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerAssignDriver(id, orderControllerAssignDriverRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerAssignDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إلغاء الطلب من قبل العميل مع ذكر السبب
         * @summary إلغاء الطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerVendorCancelOrderRequest} orderControllerVendorCancelOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCancelOrder(id: string, orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCancelOrder(id, orderControllerVendorCancelOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerCancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إنشاء طلب جديد مع العناصر والعنوان
         * @summary إنشاء طلب جديد
         * @param {CreateOrderDto} createOrderDto بيانات الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerCreateOrder(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerCreateOrder(createOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerCreateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تصدير قائمة الطلبات بصيغة CSV أو Excel
         * @summary تصدير الطلبات إلى Excel/CSV
         * @param {string} [startDate] تاريخ البداية (ISO format)
         * @param {string} [endDate] تاريخ النهاية (ISO format)
         * @param {string} [status] حالة الطلب للتصفية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerExportOrders(startDate?: string, endDate?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerExportOrders(startDate, endDate, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerExportOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary خط زمني للتوصيل
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetDeliveryTimeline(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetDeliveryTimeline(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetDeliveryTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الوقت المتوقع للوصول
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetDriverETA(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetDriverETA(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetDriverETA']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary التتبع المباشر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetLiveTracking(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetLiveTracking(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetLiveTracking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * جلب جميع طلبات المستخدم الحالي مع pagination
         * @summary جلب طلبات المستخدم الحالي
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد النتائج (default: 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetMyOrders(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetMyOrders(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetMyOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * جلب جميع طلبات المستخدم الحالي
         * @summary جلب طلبات المستخدم الحالي
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetMyOrdersShort(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetMyOrdersShort(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetMyOrdersShort']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب الملاحظات
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetNotes(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetNotes(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetNotes']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل الطلب
         * @param {string} id معرّف الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب إثبات التسليم
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetProofOfDelivery(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetProofOfDelivery(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetProofOfDelivery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على حالة الطلب للمشاركة العامة
         * @summary حالة الطلب (عام بدون مصادقة)
         * @param {string} id معرّف الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetPublicOrderStatus(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetPublicOrderStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetPublicOrderStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل المسار
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetRouteHistory(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetRouteHistory(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetRouteHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * جلب جميع طلبات مستخدم معين
         * @summary جلب طلبات مستخدم محدد
         * @param {string} userId معرّف المستخدم
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetUserOrders(userId: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetUserOrders(userId, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetUserOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب طلبات التاجر
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerGetVendorOrders(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerGetVendorOrders(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerGetVendorOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تقييم الطلب والخدمة بعد التسليم
         * @summary تقييم الطلب
         * @param {string} id معرّف الطلب
         * @param {OrderControllerRateOrderRequest} orderControllerRateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerRateOrder(id: string, orderControllerRateOrderRequest: OrderControllerRateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerRateOrder(id, orderControllerRateOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerRateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إعادة نفس الطلب بنفس العناصر
         * @summary إعادة طلب سابق
         * @param {string} id معرّف الطلب السابق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerRepeatOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerRepeatOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerRepeatOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إرجاع المنتج بعد التسليم مع ذكر السبب
         * @summary طلب إرجاع المنتج
         * @param {string} id معرّف الطلب
         * @param {OrderControllerReturnOrderRequest} orderControllerReturnOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerReturnOrder(id: string, orderControllerReturnOrderRequest: OrderControllerReturnOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerReturnOrder(id, orderControllerReturnOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerReturnOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تحديد موعد محدد لتوصيل الطلب
         * @summary جدولة طلب للتوصيل لاحقاً
         * @param {string} id معرّف الطلب
         * @param {OrderControllerScheduleOrderRequest} orderControllerScheduleOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerScheduleOrder(id: string, orderControllerScheduleOrderRequest: OrderControllerScheduleOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerScheduleOrder(id, orderControllerScheduleOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerScheduleOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إضافة صورة وتوقيع كإثبات على التسليم
         * @summary إضافة إثبات التسليم (POD)
         * @param {string} id معرّف الطلب
         * @param {OrderControllerSetProofOfDeliveryRequest} orderControllerSetProofOfDeliveryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerSetProofOfDelivery(id: string, orderControllerSetProofOfDeliveryRequest: OrderControllerSetProofOfDeliveryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerSetProofOfDelivery(id, orderControllerSetProofOfDeliveryRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerSetProofOfDelivery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تتبع الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerTrackOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerTrackOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerTrackOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تحديث موقع السائق أثناء التوصيل (GPS tracking)
         * @summary تحديث موقع السائق
         * @param {string} id معرّف الطلب
         * @param {OrderControllerUpdateDriverLocationRequest} orderControllerUpdateDriverLocationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerUpdateDriverLocation(id: string, orderControllerUpdateDriverLocationRequest: OrderControllerUpdateDriverLocationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerUpdateDriverLocation(id, orderControllerUpdateDriverLocationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerUpdateDriverLocation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * قبول الطلب والبدء في التحضير
         * @summary قبول الطلب من قبل التاجر
         * @param {string} id معرّف الطلب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerVendorAcceptOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerVendorAcceptOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerVendorAcceptOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إلغاء الطلب مع تحديد السبب
         * @summary إلغاء الطلب من قبل التاجر
         * @param {string} id معرّف الطلب
         * @param {OrderControllerVendorCancelOrderRequest} orderControllerVendorCancelOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderControllerVendorCancelOrder(id: string, orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderControllerVendorCancelOrder(id, orderControllerVendorCancelOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrderApi.orderControllerVendorCancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrderApi - factory interface
 */
export const OrderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderApiFp(configuration)
    return {
        /**
         * إضافة ملاحظة عامة أو خاصة للطلب
         * @summary إضافة ملاحظة للطلب
         * @param {OrderApiOrderControllerAddNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerAddNote(requestParameters: OrderApiOrderControllerAddNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerAddNote(requestParameters.id, requestParameters.orderControllerAddNoteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تغيير حالة الطلب (admin)
         * @param {OrderApiOrderControllerAdminChangeStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerAdminChangeStatus(requestParameters: OrderApiOrderControllerAdminChangeStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerAdminChangeStatus(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * تعيين سائق متاح للطلب (Admin/Dispatcher)
         * @summary تعيين سائق للطلب
         * @param {OrderApiOrderControllerAssignDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerAssignDriver(requestParameters: OrderApiOrderControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerAssignDriver(requestParameters.id, requestParameters.orderControllerAssignDriverRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * إلغاء الطلب من قبل العميل مع ذكر السبب
         * @summary إلغاء الطلب
         * @param {OrderApiOrderControllerCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCancelOrder(requestParameters: OrderApiOrderControllerCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerCancelOrder(requestParameters.id, requestParameters.orderControllerVendorCancelOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * إنشاء طلب جديد مع العناصر والعنوان
         * @summary إنشاء طلب جديد
         * @param {OrderApiOrderControllerCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerCreateOrder(requestParameters: OrderApiOrderControllerCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerCreateOrder(requestParameters.createOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * تصدير قائمة الطلبات بصيغة CSV أو Excel
         * @summary تصدير الطلبات إلى Excel/CSV
         * @param {OrderApiOrderControllerExportOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerExportOrders(requestParameters: OrderApiOrderControllerExportOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerExportOrders(requestParameters.startDate, requestParameters.endDate, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary خط زمني للتوصيل
         * @param {OrderApiOrderControllerGetDeliveryTimelineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetDeliveryTimeline(requestParameters: OrderApiOrderControllerGetDeliveryTimelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetDeliveryTimeline(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الوقت المتوقع للوصول
         * @param {OrderApiOrderControllerGetDriverETARequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetDriverETA(requestParameters: OrderApiOrderControllerGetDriverETARequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetDriverETA(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary التتبع المباشر
         * @param {OrderApiOrderControllerGetLiveTrackingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetLiveTracking(requestParameters: OrderApiOrderControllerGetLiveTrackingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetLiveTracking(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * جلب جميع طلبات المستخدم الحالي مع pagination
         * @summary جلب طلبات المستخدم الحالي
         * @param {OrderApiOrderControllerGetMyOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetMyOrders(requestParameters: OrderApiOrderControllerGetMyOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetMyOrders(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * جلب جميع طلبات المستخدم الحالي
         * @summary جلب طلبات المستخدم الحالي
         * @param {OrderApiOrderControllerGetMyOrdersShortRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetMyOrdersShort(requestParameters: OrderApiOrderControllerGetMyOrdersShortRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetMyOrdersShort(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب الملاحظات
         * @param {OrderApiOrderControllerGetNotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetNotes(requestParameters: OrderApiOrderControllerGetNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetNotes(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل الطلب
         * @param {OrderApiOrderControllerGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetOrder(requestParameters: OrderApiOrderControllerGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب إثبات التسليم
         * @param {OrderApiOrderControllerGetProofOfDeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetProofOfDelivery(requestParameters: OrderApiOrderControllerGetProofOfDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetProofOfDelivery(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على حالة الطلب للمشاركة العامة
         * @summary حالة الطلب (عام بدون مصادقة)
         * @param {OrderApiOrderControllerGetPublicOrderStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetPublicOrderStatus(requestParameters: OrderApiOrderControllerGetPublicOrderStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetPublicOrderStatus(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل المسار
         * @param {OrderApiOrderControllerGetRouteHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetRouteHistory(requestParameters: OrderApiOrderControllerGetRouteHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetRouteHistory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * جلب جميع طلبات مستخدم معين
         * @summary جلب طلبات مستخدم محدد
         * @param {OrderApiOrderControllerGetUserOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetUserOrders(requestParameters: OrderApiOrderControllerGetUserOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetUserOrders(requestParameters.userId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب طلبات التاجر
         * @param {OrderApiOrderControllerGetVendorOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerGetVendorOrders(requestParameters: OrderApiOrderControllerGetVendorOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerGetVendorOrders(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * تقييم الطلب والخدمة بعد التسليم
         * @summary تقييم الطلب
         * @param {OrderApiOrderControllerRateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerRateOrder(requestParameters: OrderApiOrderControllerRateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerRateOrder(requestParameters.id, requestParameters.orderControllerRateOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * إعادة نفس الطلب بنفس العناصر
         * @summary إعادة طلب سابق
         * @param {OrderApiOrderControllerRepeatOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerRepeatOrder(requestParameters: OrderApiOrderControllerRepeatOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerRepeatOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * إرجاع المنتج بعد التسليم مع ذكر السبب
         * @summary طلب إرجاع المنتج
         * @param {OrderApiOrderControllerReturnOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerReturnOrder(requestParameters: OrderApiOrderControllerReturnOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerReturnOrder(requestParameters.id, requestParameters.orderControllerReturnOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * تحديد موعد محدد لتوصيل الطلب
         * @summary جدولة طلب للتوصيل لاحقاً
         * @param {OrderApiOrderControllerScheduleOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerScheduleOrder(requestParameters: OrderApiOrderControllerScheduleOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerScheduleOrder(requestParameters.id, requestParameters.orderControllerScheduleOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * إضافة صورة وتوقيع كإثبات على التسليم
         * @summary إضافة إثبات التسليم (POD)
         * @param {OrderApiOrderControllerSetProofOfDeliveryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerSetProofOfDelivery(requestParameters: OrderApiOrderControllerSetProofOfDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerSetProofOfDelivery(requestParameters.id, requestParameters.orderControllerSetProofOfDeliveryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تتبع الطلب
         * @param {OrderApiOrderControllerTrackOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerTrackOrder(requestParameters: OrderApiOrderControllerTrackOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerTrackOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * تحديث موقع السائق أثناء التوصيل (GPS tracking)
         * @summary تحديث موقع السائق
         * @param {OrderApiOrderControllerUpdateDriverLocationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerUpdateDriverLocation(requestParameters: OrderApiOrderControllerUpdateDriverLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerUpdateDriverLocation(requestParameters.id, requestParameters.orderControllerUpdateDriverLocationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * قبول الطلب والبدء في التحضير
         * @summary قبول الطلب من قبل التاجر
         * @param {OrderApiOrderControllerVendorAcceptOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerVendorAcceptOrder(requestParameters: OrderApiOrderControllerVendorAcceptOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerVendorAcceptOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * إلغاء الطلب مع تحديد السبب
         * @summary إلغاء الطلب من قبل التاجر
         * @param {OrderApiOrderControllerVendorCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderControllerVendorCancelOrder(requestParameters: OrderApiOrderControllerVendorCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderControllerVendorCancelOrder(requestParameters.id, requestParameters.orderControllerVendorCancelOrderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderApi - interface
 */
export interface OrderApiInterface {
    /**
     * إضافة ملاحظة عامة أو خاصة للطلب
     * @summary إضافة ملاحظة للطلب
     * @param {OrderApiOrderControllerAddNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerAddNote(requestParameters: OrderApiOrderControllerAddNoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تغيير حالة الطلب (admin)
     * @param {OrderApiOrderControllerAdminChangeStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerAdminChangeStatus(requestParameters: OrderApiOrderControllerAdminChangeStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تعيين سائق متاح للطلب (Admin/Dispatcher)
     * @summary تعيين سائق للطلب
     * @param {OrderApiOrderControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerAssignDriver(requestParameters: OrderApiOrderControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إلغاء الطلب من قبل العميل مع ذكر السبب
     * @summary إلغاء الطلب
     * @param {OrderApiOrderControllerCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerCancelOrder(requestParameters: OrderApiOrderControllerCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إنشاء طلب جديد مع العناصر والعنوان
     * @summary إنشاء طلب جديد
     * @param {OrderApiOrderControllerCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerCreateOrder(requestParameters: OrderApiOrderControllerCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تصدير قائمة الطلبات بصيغة CSV أو Excel
     * @summary تصدير الطلبات إلى Excel/CSV
     * @param {OrderApiOrderControllerExportOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerExportOrders(requestParameters?: OrderApiOrderControllerExportOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary خط زمني للتوصيل
     * @param {OrderApiOrderControllerGetDeliveryTimelineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetDeliveryTimeline(requestParameters: OrderApiOrderControllerGetDeliveryTimelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الوقت المتوقع للوصول
     * @param {OrderApiOrderControllerGetDriverETARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetDriverETA(requestParameters: OrderApiOrderControllerGetDriverETARequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary التتبع المباشر
     * @param {OrderApiOrderControllerGetLiveTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetLiveTracking(requestParameters: OrderApiOrderControllerGetLiveTrackingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * جلب جميع طلبات المستخدم الحالي مع pagination
     * @summary جلب طلبات المستخدم الحالي
     * @param {OrderApiOrderControllerGetMyOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetMyOrders(requestParameters?: OrderApiOrderControllerGetMyOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * جلب جميع طلبات المستخدم الحالي
     * @summary جلب طلبات المستخدم الحالي
     * @param {OrderApiOrderControllerGetMyOrdersShortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetMyOrdersShort(requestParameters?: OrderApiOrderControllerGetMyOrdersShortRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب الملاحظات
     * @param {OrderApiOrderControllerGetNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetNotes(requestParameters: OrderApiOrderControllerGetNotesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل الطلب
     * @param {OrderApiOrderControllerGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetOrder(requestParameters: OrderApiOrderControllerGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب إثبات التسليم
     * @param {OrderApiOrderControllerGetProofOfDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetProofOfDelivery(requestParameters: OrderApiOrderControllerGetProofOfDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على حالة الطلب للمشاركة العامة
     * @summary حالة الطلب (عام بدون مصادقة)
     * @param {OrderApiOrderControllerGetPublicOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetPublicOrderStatus(requestParameters: OrderApiOrderControllerGetPublicOrderStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل المسار
     * @param {OrderApiOrderControllerGetRouteHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetRouteHistory(requestParameters: OrderApiOrderControllerGetRouteHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * جلب جميع طلبات مستخدم معين
     * @summary جلب طلبات مستخدم محدد
     * @param {OrderApiOrderControllerGetUserOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetUserOrders(requestParameters: OrderApiOrderControllerGetUserOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب طلبات التاجر
     * @param {OrderApiOrderControllerGetVendorOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerGetVendorOrders(requestParameters?: OrderApiOrderControllerGetVendorOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تقييم الطلب والخدمة بعد التسليم
     * @summary تقييم الطلب
     * @param {OrderApiOrderControllerRateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerRateOrder(requestParameters: OrderApiOrderControllerRateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إعادة نفس الطلب بنفس العناصر
     * @summary إعادة طلب سابق
     * @param {OrderApiOrderControllerRepeatOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerRepeatOrder(requestParameters: OrderApiOrderControllerRepeatOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إرجاع المنتج بعد التسليم مع ذكر السبب
     * @summary طلب إرجاع المنتج
     * @param {OrderApiOrderControllerReturnOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerReturnOrder(requestParameters: OrderApiOrderControllerReturnOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تحديد موعد محدد لتوصيل الطلب
     * @summary جدولة طلب للتوصيل لاحقاً
     * @param {OrderApiOrderControllerScheduleOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerScheduleOrder(requestParameters: OrderApiOrderControllerScheduleOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إضافة صورة وتوقيع كإثبات على التسليم
     * @summary إضافة إثبات التسليم (POD)
     * @param {OrderApiOrderControllerSetProofOfDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerSetProofOfDelivery(requestParameters: OrderApiOrderControllerSetProofOfDeliveryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تتبع الطلب
     * @param {OrderApiOrderControllerTrackOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerTrackOrder(requestParameters: OrderApiOrderControllerTrackOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تحديث موقع السائق أثناء التوصيل (GPS tracking)
     * @summary تحديث موقع السائق
     * @param {OrderApiOrderControllerUpdateDriverLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerUpdateDriverLocation(requestParameters: OrderApiOrderControllerUpdateDriverLocationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * قبول الطلب والبدء في التحضير
     * @summary قبول الطلب من قبل التاجر
     * @param {OrderApiOrderControllerVendorAcceptOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerVendorAcceptOrder(requestParameters: OrderApiOrderControllerVendorAcceptOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إلغاء الطلب مع تحديد السبب
     * @summary إلغاء الطلب من قبل التاجر
     * @param {OrderApiOrderControllerVendorCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderControllerVendorCancelOrder(requestParameters: OrderApiOrderControllerVendorCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for orderControllerAddNote operation in OrderApi.
 */
export interface OrderApiOrderControllerAddNoteRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerAddNoteRequest: OrderControllerAddNoteRequest
}

/**
 * Request parameters for orderControllerAdminChangeStatus operation in OrderApi.
 */
export interface OrderApiOrderControllerAdminChangeStatusRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerAssignDriver operation in OrderApi.
 */
export interface OrderApiOrderControllerAssignDriverRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerAssignDriverRequest: OrderControllerAssignDriverRequest
}

/**
 * Request parameters for orderControllerCancelOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerCancelOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest
}

/**
 * Request parameters for orderControllerCreateOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerCreateOrderRequest {
    /**
     * بيانات الطلب
     */
    readonly createOrderDto: CreateOrderDto
}

/**
 * Request parameters for orderControllerExportOrders operation in OrderApi.
 */
export interface OrderApiOrderControllerExportOrdersRequest {
    /**
     * تاريخ البداية (ISO format)
     */
    readonly startDate?: string

    /**
     * تاريخ النهاية (ISO format)
     */
    readonly endDate?: string

    /**
     * حالة الطلب للتصفية
     */
    readonly status?: string
}

/**
 * Request parameters for orderControllerGetDeliveryTimeline operation in OrderApi.
 */
export interface OrderApiOrderControllerGetDeliveryTimelineRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerGetDriverETA operation in OrderApi.
 */
export interface OrderApiOrderControllerGetDriverETARequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerGetLiveTracking operation in OrderApi.
 */
export interface OrderApiOrderControllerGetLiveTrackingRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerGetMyOrders operation in OrderApi.
 */
export interface OrderApiOrderControllerGetMyOrdersRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد النتائج (default: 20)
     */
    readonly limit?: number
}

/**
 * Request parameters for orderControllerGetMyOrdersShort operation in OrderApi.
 */
export interface OrderApiOrderControllerGetMyOrdersShortRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for orderControllerGetNotes operation in OrderApi.
 */
export interface OrderApiOrderControllerGetNotesRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerGetOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerGetOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string
}

/**
 * Request parameters for orderControllerGetProofOfDelivery operation in OrderApi.
 */
export interface OrderApiOrderControllerGetProofOfDeliveryRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerGetPublicOrderStatus operation in OrderApi.
 */
export interface OrderApiOrderControllerGetPublicOrderStatusRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string
}

/**
 * Request parameters for orderControllerGetRouteHistory operation in OrderApi.
 */
export interface OrderApiOrderControllerGetRouteHistoryRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerGetUserOrders operation in OrderApi.
 */
export interface OrderApiOrderControllerGetUserOrdersRequest {
    /**
     * معرّف المستخدم
     */
    readonly userId: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for orderControllerGetVendorOrders operation in OrderApi.
 */
export interface OrderApiOrderControllerGetVendorOrdersRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for orderControllerRateOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerRateOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerRateOrderRequest: OrderControllerRateOrderRequest
}

/**
 * Request parameters for orderControllerRepeatOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerRepeatOrderRequest {
    /**
     * معرّف الطلب السابق
     */
    readonly id: string
}

/**
 * Request parameters for orderControllerReturnOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerReturnOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerReturnOrderRequest: OrderControllerReturnOrderRequest
}

/**
 * Request parameters for orderControllerScheduleOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerScheduleOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerScheduleOrderRequest: OrderControllerScheduleOrderRequest
}

/**
 * Request parameters for orderControllerSetProofOfDelivery operation in OrderApi.
 */
export interface OrderApiOrderControllerSetProofOfDeliveryRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerSetProofOfDeliveryRequest: OrderControllerSetProofOfDeliveryRequest
}

/**
 * Request parameters for orderControllerTrackOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerTrackOrderRequest {
    readonly id: string
}

/**
 * Request parameters for orderControllerUpdateDriverLocation operation in OrderApi.
 */
export interface OrderApiOrderControllerUpdateDriverLocationRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerUpdateDriverLocationRequest: OrderControllerUpdateDriverLocationRequest
}

/**
 * Request parameters for orderControllerVendorAcceptOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerVendorAcceptOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string
}

/**
 * Request parameters for orderControllerVendorCancelOrder operation in OrderApi.
 */
export interface OrderApiOrderControllerVendorCancelOrderRequest {
    /**
     * معرّف الطلب
     */
    readonly id: string

    readonly orderControllerVendorCancelOrderRequest: OrderControllerVendorCancelOrderRequest
}

/**
 * OrderApi - object-oriented interface
 */
export class OrderApi extends BaseAPI implements OrderApiInterface {
    /**
     * إضافة ملاحظة عامة أو خاصة للطلب
     * @summary إضافة ملاحظة للطلب
     * @param {OrderApiOrderControllerAddNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerAddNote(requestParameters: OrderApiOrderControllerAddNoteRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerAddNote(requestParameters.id, requestParameters.orderControllerAddNoteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تغيير حالة الطلب (admin)
     * @param {OrderApiOrderControllerAdminChangeStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerAdminChangeStatus(requestParameters: OrderApiOrderControllerAdminChangeStatusRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerAdminChangeStatus(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تعيين سائق متاح للطلب (Admin/Dispatcher)
     * @summary تعيين سائق للطلب
     * @param {OrderApiOrderControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerAssignDriver(requestParameters: OrderApiOrderControllerAssignDriverRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerAssignDriver(requestParameters.id, requestParameters.orderControllerAssignDriverRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إلغاء الطلب من قبل العميل مع ذكر السبب
     * @summary إلغاء الطلب
     * @param {OrderApiOrderControllerCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerCancelOrder(requestParameters: OrderApiOrderControllerCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerCancelOrder(requestParameters.id, requestParameters.orderControllerVendorCancelOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إنشاء طلب جديد مع العناصر والعنوان
     * @summary إنشاء طلب جديد
     * @param {OrderApiOrderControllerCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerCreateOrder(requestParameters: OrderApiOrderControllerCreateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerCreateOrder(requestParameters.createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تصدير قائمة الطلبات بصيغة CSV أو Excel
     * @summary تصدير الطلبات إلى Excel/CSV
     * @param {OrderApiOrderControllerExportOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerExportOrders(requestParameters: OrderApiOrderControllerExportOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerExportOrders(requestParameters.startDate, requestParameters.endDate, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary خط زمني للتوصيل
     * @param {OrderApiOrderControllerGetDeliveryTimelineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetDeliveryTimeline(requestParameters: OrderApiOrderControllerGetDeliveryTimelineRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetDeliveryTimeline(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الوقت المتوقع للوصول
     * @param {OrderApiOrderControllerGetDriverETARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetDriverETA(requestParameters: OrderApiOrderControllerGetDriverETARequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetDriverETA(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary التتبع المباشر
     * @param {OrderApiOrderControllerGetLiveTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetLiveTracking(requestParameters: OrderApiOrderControllerGetLiveTrackingRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetLiveTracking(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * جلب جميع طلبات المستخدم الحالي مع pagination
     * @summary جلب طلبات المستخدم الحالي
     * @param {OrderApiOrderControllerGetMyOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetMyOrders(requestParameters: OrderApiOrderControllerGetMyOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetMyOrders(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * جلب جميع طلبات المستخدم الحالي
     * @summary جلب طلبات المستخدم الحالي
     * @param {OrderApiOrderControllerGetMyOrdersShortRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetMyOrdersShort(requestParameters: OrderApiOrderControllerGetMyOrdersShortRequest = {}, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetMyOrdersShort(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب الملاحظات
     * @param {OrderApiOrderControllerGetNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetNotes(requestParameters: OrderApiOrderControllerGetNotesRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetNotes(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل الطلب
     * @param {OrderApiOrderControllerGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetOrder(requestParameters: OrderApiOrderControllerGetOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب إثبات التسليم
     * @param {OrderApiOrderControllerGetProofOfDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetProofOfDelivery(requestParameters: OrderApiOrderControllerGetProofOfDeliveryRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetProofOfDelivery(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على حالة الطلب للمشاركة العامة
     * @summary حالة الطلب (عام بدون مصادقة)
     * @param {OrderApiOrderControllerGetPublicOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetPublicOrderStatus(requestParameters: OrderApiOrderControllerGetPublicOrderStatusRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetPublicOrderStatus(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل المسار
     * @param {OrderApiOrderControllerGetRouteHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetRouteHistory(requestParameters: OrderApiOrderControllerGetRouteHistoryRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetRouteHistory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * جلب جميع طلبات مستخدم معين
     * @summary جلب طلبات مستخدم محدد
     * @param {OrderApiOrderControllerGetUserOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetUserOrders(requestParameters: OrderApiOrderControllerGetUserOrdersRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetUserOrders(requestParameters.userId, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب طلبات التاجر
     * @param {OrderApiOrderControllerGetVendorOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerGetVendorOrders(requestParameters: OrderApiOrderControllerGetVendorOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerGetVendorOrders(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تقييم الطلب والخدمة بعد التسليم
     * @summary تقييم الطلب
     * @param {OrderApiOrderControllerRateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerRateOrder(requestParameters: OrderApiOrderControllerRateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerRateOrder(requestParameters.id, requestParameters.orderControllerRateOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إعادة نفس الطلب بنفس العناصر
     * @summary إعادة طلب سابق
     * @param {OrderApiOrderControllerRepeatOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerRepeatOrder(requestParameters: OrderApiOrderControllerRepeatOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerRepeatOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إرجاع المنتج بعد التسليم مع ذكر السبب
     * @summary طلب إرجاع المنتج
     * @param {OrderApiOrderControllerReturnOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerReturnOrder(requestParameters: OrderApiOrderControllerReturnOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerReturnOrder(requestParameters.id, requestParameters.orderControllerReturnOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تحديد موعد محدد لتوصيل الطلب
     * @summary جدولة طلب للتوصيل لاحقاً
     * @param {OrderApiOrderControllerScheduleOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerScheduleOrder(requestParameters: OrderApiOrderControllerScheduleOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerScheduleOrder(requestParameters.id, requestParameters.orderControllerScheduleOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إضافة صورة وتوقيع كإثبات على التسليم
     * @summary إضافة إثبات التسليم (POD)
     * @param {OrderApiOrderControllerSetProofOfDeliveryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerSetProofOfDelivery(requestParameters: OrderApiOrderControllerSetProofOfDeliveryRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerSetProofOfDelivery(requestParameters.id, requestParameters.orderControllerSetProofOfDeliveryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تتبع الطلب
     * @param {OrderApiOrderControllerTrackOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerTrackOrder(requestParameters: OrderApiOrderControllerTrackOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerTrackOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تحديث موقع السائق أثناء التوصيل (GPS tracking)
     * @summary تحديث موقع السائق
     * @param {OrderApiOrderControllerUpdateDriverLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerUpdateDriverLocation(requestParameters: OrderApiOrderControllerUpdateDriverLocationRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerUpdateDriverLocation(requestParameters.id, requestParameters.orderControllerUpdateDriverLocationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * قبول الطلب والبدء في التحضير
     * @summary قبول الطلب من قبل التاجر
     * @param {OrderApiOrderControllerVendorAcceptOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerVendorAcceptOrder(requestParameters: OrderApiOrderControllerVendorAcceptOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerVendorAcceptOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إلغاء الطلب مع تحديد السبب
     * @summary إلغاء الطلب من قبل التاجر
     * @param {OrderApiOrderControllerVendorCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderControllerVendorCancelOrder(requestParameters: OrderApiOrderControllerVendorCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return OrderApiFp(this.configuration).orderControllerVendorCancelOrder(requestParameters.id, requestParameters.orderControllerVendorCancelOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersCQRSApi - axios parameter creator
 */
export const OrdersCQRSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تعيين سائق للطلب (CQRS)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerAssignDriver: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderCqrsControllerAssignDriver', 'id', id)
            const localVarPath = `/orders-cqrs/{id}/assign-driver`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء طلب (CQRS)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerCancel: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderCqrsControllerCancel', 'id', id)
            const localVarPath = `/orders-cqrs/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ينشئ طلب جديد باستخدام CQRS Pattern
         * @summary إنشاء طلب جديد (CQRS)
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerCreate: async (createOrderDto: CreateOrderDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderDto' is not null or undefined
            assertParamExists('orderCqrsControllerCreate', 'createOrderDto', createOrderDto)
            const localVarPath = `/orders-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب طلب محدد (CQRS)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderCqrsControllerFindOne', 'id', id)
            const localVarPath = `/orders-cqrs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب طلبات المستخدم (CQRS)
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerFindUserOrders: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders-cqrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث حالة طلب (CQRS)
         * @param {string} id 
         * @param {UpdateOrderStatusDto} updateOrderStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerUpdateStatus: async (id: string, updateOrderStatusDto: UpdateOrderStatusDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderCqrsControllerUpdateStatus', 'id', id)
            // verify required parameter 'updateOrderStatusDto' is not null or undefined
            assertParamExists('orderCqrsControllerUpdateStatus', 'updateOrderStatusDto', updateOrderStatusDto)
            const localVarPath = `/orders-cqrs/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersCQRSApi - functional programming interface
 */
export const OrdersCQRSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersCQRSApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تعيين سائق للطلب (CQRS)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCqrsControllerAssignDriver(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCqrsControllerAssignDriver(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersCQRSApi.orderCqrsControllerAssignDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء طلب (CQRS)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCqrsControllerCancel(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCqrsControllerCancel(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersCQRSApi.orderCqrsControllerCancel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * ينشئ طلب جديد باستخدام CQRS Pattern
         * @summary إنشاء طلب جديد (CQRS)
         * @param {CreateOrderDto} createOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCqrsControllerCreate(createOrderDto: CreateOrderDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCqrsControllerCreate(createOrderDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersCQRSApi.orderCqrsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب طلب محدد (CQRS)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCqrsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCqrsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersCQRSApi.orderCqrsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب طلبات المستخدم (CQRS)
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCqrsControllerFindUserOrders(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCqrsControllerFindUserOrders(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersCQRSApi.orderCqrsControllerFindUserOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث حالة طلب (CQRS)
         * @param {string} id 
         * @param {UpdateOrderStatusDto} updateOrderStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderCqrsControllerUpdateStatus(id: string, updateOrderStatusDto: UpdateOrderStatusDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderCqrsControllerUpdateStatus(id, updateOrderStatusDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersCQRSApi.orderCqrsControllerUpdateStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersCQRSApi - factory interface
 */
export const OrdersCQRSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersCQRSApiFp(configuration)
    return {
        /**
         * 
         * @summary تعيين سائق للطلب (CQRS)
         * @param {OrdersCQRSApiOrderCqrsControllerAssignDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerAssignDriver(requestParameters: OrdersCQRSApiOrderCqrsControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderCqrsControllerAssignDriver(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء طلب (CQRS)
         * @param {OrdersCQRSApiOrderCqrsControllerCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerCancel(requestParameters: OrdersCQRSApiOrderCqrsControllerCancelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderCqrsControllerCancel(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * ينشئ طلب جديد باستخدام CQRS Pattern
         * @summary إنشاء طلب جديد (CQRS)
         * @param {OrdersCQRSApiOrderCqrsControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerCreate(requestParameters: OrdersCQRSApiOrderCqrsControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderCqrsControllerCreate(requestParameters.createOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب طلب محدد (CQRS)
         * @param {OrdersCQRSApiOrderCqrsControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerFindOne(requestParameters: OrdersCQRSApiOrderCqrsControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderCqrsControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب طلبات المستخدم (CQRS)
         * @param {OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerFindUserOrders(requestParameters: OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderCqrsControllerFindUserOrders(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث حالة طلب (CQRS)
         * @param {OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderCqrsControllerUpdateStatus(requestParameters: OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.orderCqrsControllerUpdateStatus(requestParameters.id, requestParameters.updateOrderStatusDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersCQRSApi - interface
 */
export interface OrdersCQRSApiInterface {
    /**
     * 
     * @summary تعيين سائق للطلب (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCqrsControllerAssignDriver(requestParameters: OrdersCQRSApiOrderCqrsControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء طلب (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCqrsControllerCancel(requestParameters: OrdersCQRSApiOrderCqrsControllerCancelRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * ينشئ طلب جديد باستخدام CQRS Pattern
     * @summary إنشاء طلب جديد (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCqrsControllerCreate(requestParameters: OrdersCQRSApiOrderCqrsControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب طلب محدد (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCqrsControllerFindOne(requestParameters: OrdersCQRSApiOrderCqrsControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب طلبات المستخدم (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCqrsControllerFindUserOrders(requestParameters?: OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث حالة طلب (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    orderCqrsControllerUpdateStatus(requestParameters: OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for orderCqrsControllerAssignDriver operation in OrdersCQRSApi.
 */
export interface OrdersCQRSApiOrderCqrsControllerAssignDriverRequest {
    readonly id: string
}

/**
 * Request parameters for orderCqrsControllerCancel operation in OrdersCQRSApi.
 */
export interface OrdersCQRSApiOrderCqrsControllerCancelRequest {
    readonly id: string
}

/**
 * Request parameters for orderCqrsControllerCreate operation in OrdersCQRSApi.
 */
export interface OrdersCQRSApiOrderCqrsControllerCreateRequest {
    readonly createOrderDto: CreateOrderDto
}

/**
 * Request parameters for orderCqrsControllerFindOne operation in OrdersCQRSApi.
 */
export interface OrdersCQRSApiOrderCqrsControllerFindOneRequest {
    readonly id: string
}

/**
 * Request parameters for orderCqrsControllerFindUserOrders operation in OrdersCQRSApi.
 */
export interface OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for orderCqrsControllerUpdateStatus operation in OrdersCQRSApi.
 */
export interface OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest {
    readonly id: string

    readonly updateOrderStatusDto: UpdateOrderStatusDto
}

/**
 * OrdersCQRSApi - object-oriented interface
 */
export class OrdersCQRSApi extends BaseAPI implements OrdersCQRSApiInterface {
    /**
     * 
     * @summary تعيين سائق للطلب (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderCqrsControllerAssignDriver(requestParameters: OrdersCQRSApiOrderCqrsControllerAssignDriverRequest, options?: RawAxiosRequestConfig) {
        return OrdersCQRSApiFp(this.configuration).orderCqrsControllerAssignDriver(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء طلب (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderCqrsControllerCancel(requestParameters: OrdersCQRSApiOrderCqrsControllerCancelRequest, options?: RawAxiosRequestConfig) {
        return OrdersCQRSApiFp(this.configuration).orderCqrsControllerCancel(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ينشئ طلب جديد باستخدام CQRS Pattern
     * @summary إنشاء طلب جديد (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderCqrsControllerCreate(requestParameters: OrdersCQRSApiOrderCqrsControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return OrdersCQRSApiFp(this.configuration).orderCqrsControllerCreate(requestParameters.createOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب طلب محدد (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderCqrsControllerFindOne(requestParameters: OrdersCQRSApiOrderCqrsControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return OrdersCQRSApiFp(this.configuration).orderCqrsControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب طلبات المستخدم (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderCqrsControllerFindUserOrders(requestParameters: OrdersCQRSApiOrderCqrsControllerFindUserOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return OrdersCQRSApiFp(this.configuration).orderCqrsControllerFindUserOrders(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث حالة طلب (CQRS)
     * @param {OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public orderCqrsControllerUpdateStatus(requestParameters: OrdersCQRSApiOrderCqrsControllerUpdateStatusRequest, options?: RawAxiosRequestConfig) {
        return OrdersCQRSApiFp(this.configuration).orderCqrsControllerUpdateStatus(requestParameters.id, requestParameters.updateOrderStatusDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PromotionApi - axios parameter creator
 */
export const PromotionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إنشاء عرض ترويجي
         * @param {CreatePromotionDto} createPromotionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerCreatePromotion: async (createPromotionDto: CreatePromotionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPromotionDto' is not null or undefined
            assertParamExists('promotionControllerCreatePromotion', 'createPromotionDto', createPromotionDto)
            const localVarPath = `/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPromotionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف عرض
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerDeletePromotion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promotionControllerDeletePromotion', 'id', id)
            const localVarPath = `/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل العروض
         * @param {boolean} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetAllPromotions: async (isActive: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'isActive' is not null or undefined
            assertParamExists('promotionControllerGetAllPromotions', 'isActive', isActive)
            const localVarPath = `/promotions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على عرض محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetPromotion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promotionControllerGetPromotion', 'id', id)
            const localVarPath = `/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على عروض حسب الموضع (public)
         * @param {PromotionControllerGetPromotionsByPlacementPlacementEnum} placement 
         * @param {PromotionControllerGetPromotionsByPlacementChannelEnum} [channel] 
         * @param {string} [city] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetPromotionsByPlacement: async (placement: PromotionControllerGetPromotionsByPlacementPlacementEnum, channel?: PromotionControllerGetPromotionsByPlacementChannelEnum, city?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placement' is not null or undefined
            assertParamExists('promotionControllerGetPromotionsByPlacement', 'placement', placement)
            const localVarPath = `/promotions/by-placement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (channel !== undefined) {
                localVarQueryParameter['channel'] = channel;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (placement !== undefined) {
                localVarQueryParameter['placement'] = placement;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إحصائيات العروض
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetStatistics: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/promotions/stats/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل نقرة على عرض
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerRecordClick: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promotionControllerRecordClick', 'id', id)
            const localVarPath = `/promotions/{id}/click`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تسجيل تحويل (طلب من العرض)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerRecordConversion: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promotionControllerRecordConversion', 'id', id)
            const localVarPath = `/promotions/{id}/conversion`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث عرض
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerUpdatePromotion: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('promotionControllerUpdatePromotion', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('promotionControllerUpdatePromotion', 'body', body)
            const localVarPath = `/promotions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromotionApi - functional programming interface
 */
export const PromotionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromotionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إنشاء عرض ترويجي
         * @param {CreatePromotionDto} createPromotionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerCreatePromotion(createPromotionDto: CreatePromotionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerCreatePromotion(createPromotionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerCreatePromotion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف عرض
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerDeletePromotion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerDeletePromotion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerDeletePromotion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل العروض
         * @param {boolean} isActive 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerGetAllPromotions(isActive: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerGetAllPromotions(isActive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerGetAllPromotions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على عرض محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerGetPromotion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerGetPromotion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerGetPromotion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على عروض حسب الموضع (public)
         * @param {PromotionControllerGetPromotionsByPlacementPlacementEnum} placement 
         * @param {PromotionControllerGetPromotionsByPlacementChannelEnum} [channel] 
         * @param {string} [city] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerGetPromotionsByPlacement(placement: PromotionControllerGetPromotionsByPlacementPlacementEnum, channel?: PromotionControllerGetPromotionsByPlacementChannelEnum, city?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerGetPromotionsByPlacement(placement, channel, city, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerGetPromotionsByPlacement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إحصائيات العروض
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerGetStatistics(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerGetStatistics(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerGetStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل نقرة على عرض
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerRecordClick(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerRecordClick(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerRecordClick']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تسجيل تحويل (طلب من العرض)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerRecordConversion(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerRecordConversion(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerRecordConversion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث عرض
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async promotionControllerUpdatePromotion(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.promotionControllerUpdatePromotion(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromotionApi.promotionControllerUpdatePromotion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromotionApi - factory interface
 */
export const PromotionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromotionApiFp(configuration)
    return {
        /**
         * 
         * @summary إنشاء عرض ترويجي
         * @param {PromotionApiPromotionControllerCreatePromotionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerCreatePromotion(requestParameters: PromotionApiPromotionControllerCreatePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerCreatePromotion(requestParameters.createPromotionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف عرض
         * @param {PromotionApiPromotionControllerDeletePromotionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerDeletePromotion(requestParameters: PromotionApiPromotionControllerDeletePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerDeletePromotion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل العروض
         * @param {PromotionApiPromotionControllerGetAllPromotionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetAllPromotions(requestParameters: PromotionApiPromotionControllerGetAllPromotionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerGetAllPromotions(requestParameters.isActive, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على عرض محدد
         * @param {PromotionApiPromotionControllerGetPromotionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetPromotion(requestParameters: PromotionApiPromotionControllerGetPromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerGetPromotion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على عروض حسب الموضع (public)
         * @param {PromotionApiPromotionControllerGetPromotionsByPlacementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetPromotionsByPlacement(requestParameters: PromotionApiPromotionControllerGetPromotionsByPlacementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerGetPromotionsByPlacement(requestParameters.placement, requestParameters.channel, requestParameters.city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إحصائيات العروض
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerGetStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerGetStatistics(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل نقرة على عرض
         * @param {PromotionApiPromotionControllerRecordClickRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerRecordClick(requestParameters: PromotionApiPromotionControllerRecordClickRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerRecordClick(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تسجيل تحويل (طلب من العرض)
         * @param {PromotionApiPromotionControllerRecordConversionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerRecordConversion(requestParameters: PromotionApiPromotionControllerRecordConversionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerRecordConversion(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث عرض
         * @param {PromotionApiPromotionControllerUpdatePromotionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        promotionControllerUpdatePromotion(requestParameters: PromotionApiPromotionControllerUpdatePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.promotionControllerUpdatePromotion(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromotionApi - interface
 */
export interface PromotionApiInterface {
    /**
     * 
     * @summary إنشاء عرض ترويجي
     * @param {PromotionApiPromotionControllerCreatePromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerCreatePromotion(requestParameters: PromotionApiPromotionControllerCreatePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف عرض
     * @param {PromotionApiPromotionControllerDeletePromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerDeletePromotion(requestParameters: PromotionApiPromotionControllerDeletePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل العروض
     * @param {PromotionApiPromotionControllerGetAllPromotionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerGetAllPromotions(requestParameters: PromotionApiPromotionControllerGetAllPromotionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على عرض محدد
     * @param {PromotionApiPromotionControllerGetPromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerGetPromotion(requestParameters: PromotionApiPromotionControllerGetPromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على عروض حسب الموضع (public)
     * @param {PromotionApiPromotionControllerGetPromotionsByPlacementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerGetPromotionsByPlacement(requestParameters: PromotionApiPromotionControllerGetPromotionsByPlacementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إحصائيات العروض
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerGetStatistics(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل نقرة على عرض
     * @param {PromotionApiPromotionControllerRecordClickRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerRecordClick(requestParameters: PromotionApiPromotionControllerRecordClickRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تسجيل تحويل (طلب من العرض)
     * @param {PromotionApiPromotionControllerRecordConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerRecordConversion(requestParameters: PromotionApiPromotionControllerRecordConversionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث عرض
     * @param {PromotionApiPromotionControllerUpdatePromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promotionControllerUpdatePromotion(requestParameters: PromotionApiPromotionControllerUpdatePromotionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for promotionControllerCreatePromotion operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerCreatePromotionRequest {
    readonly createPromotionDto: CreatePromotionDto
}

/**
 * Request parameters for promotionControllerDeletePromotion operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerDeletePromotionRequest {
    readonly id: string
}

/**
 * Request parameters for promotionControllerGetAllPromotions operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerGetAllPromotionsRequest {
    readonly isActive: boolean
}

/**
 * Request parameters for promotionControllerGetPromotion operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerGetPromotionRequest {
    readonly id: string
}

/**
 * Request parameters for promotionControllerGetPromotionsByPlacement operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerGetPromotionsByPlacementRequest {
    readonly placement: PromotionControllerGetPromotionsByPlacementPlacementEnum

    readonly channel?: PromotionControllerGetPromotionsByPlacementChannelEnum

    readonly city?: string
}

/**
 * Request parameters for promotionControllerRecordClick operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerRecordClickRequest {
    readonly id: string
}

/**
 * Request parameters for promotionControllerRecordConversion operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerRecordConversionRequest {
    readonly id: string
}

/**
 * Request parameters for promotionControllerUpdatePromotion operation in PromotionApi.
 */
export interface PromotionApiPromotionControllerUpdatePromotionRequest {
    readonly id: string

    readonly body: object
}

/**
 * PromotionApi - object-oriented interface
 */
export class PromotionApi extends BaseAPI implements PromotionApiInterface {
    /**
     * 
     * @summary إنشاء عرض ترويجي
     * @param {PromotionApiPromotionControllerCreatePromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerCreatePromotion(requestParameters: PromotionApiPromotionControllerCreatePromotionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerCreatePromotion(requestParameters.createPromotionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف عرض
     * @param {PromotionApiPromotionControllerDeletePromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerDeletePromotion(requestParameters: PromotionApiPromotionControllerDeletePromotionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerDeletePromotion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل العروض
     * @param {PromotionApiPromotionControllerGetAllPromotionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerGetAllPromotions(requestParameters: PromotionApiPromotionControllerGetAllPromotionsRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerGetAllPromotions(requestParameters.isActive, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على عرض محدد
     * @param {PromotionApiPromotionControllerGetPromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerGetPromotion(requestParameters: PromotionApiPromotionControllerGetPromotionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerGetPromotion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على عروض حسب الموضع (public)
     * @param {PromotionApiPromotionControllerGetPromotionsByPlacementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerGetPromotionsByPlacement(requestParameters: PromotionApiPromotionControllerGetPromotionsByPlacementRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerGetPromotionsByPlacement(requestParameters.placement, requestParameters.channel, requestParameters.city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إحصائيات العروض
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerGetStatistics(options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerGetStatistics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل نقرة على عرض
     * @param {PromotionApiPromotionControllerRecordClickRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerRecordClick(requestParameters: PromotionApiPromotionControllerRecordClickRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerRecordClick(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تسجيل تحويل (طلب من العرض)
     * @param {PromotionApiPromotionControllerRecordConversionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerRecordConversion(requestParameters: PromotionApiPromotionControllerRecordConversionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerRecordConversion(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث عرض
     * @param {PromotionApiPromotionControllerUpdatePromotionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public promotionControllerUpdatePromotion(requestParameters: PromotionApiPromotionControllerUpdatePromotionRequest, options?: RawAxiosRequestConfig) {
        return PromotionApiFp(this.configuration).promotionControllerUpdatePromotion(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

export const PromotionControllerGetPromotionsByPlacementPlacementEnum = {
    HomeHero: 'home_hero',
    HomeStrip: 'home_strip',
    CategoryHeader: 'category_header',
    CategoryFeed: 'category_feed',
    StoreHeader: 'store_header',
    SearchBanner: 'search_banner',
    Cart: 'cart',
    Checkout: 'checkout'
} as const;
export type PromotionControllerGetPromotionsByPlacementPlacementEnum = typeof PromotionControllerGetPromotionsByPlacementPlacementEnum[keyof typeof PromotionControllerGetPromotionsByPlacementPlacementEnum];
export const PromotionControllerGetPromotionsByPlacementChannelEnum = {
    App: 'app',
    Web: 'web'
} as const;
export type PromotionControllerGetPromotionsByPlacementChannelEnum = typeof PromotionControllerGetPromotionsByPlacementChannelEnum[keyof typeof PromotionControllerGetPromotionsByPlacementChannelEnum];


/**
 * UserApi - axios parameter creator
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
         * @summary إضافة عنوان توصيل جديد
         * @param {AddAddressDto} addAddressDto بيانات العنوان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAddAddress: async (addAddressDto: AddAddressDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addAddressDto' is not null or undefined
            assertParamExists('userControllerAddAddress', 'addAddressDto', addAddressDto)
            const localVarPath = `/users/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAddressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تغيير PIN الحالي (يتطلب PIN القديم)
         * @summary تغيير رمز PIN
         * @param {UserControllerChangePinRequest} userControllerChangePinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerChangePin: async (userControllerChangePinRequest: UserControllerChangePinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userControllerChangePinRequest' is not null or undefined
            assertParamExists('userControllerChangePin', 'userControllerChangePinRequest', userControllerChangePinRequest)
            const localVarPath = `/users/pin/change`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userControllerChangePinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تعطيل حساب المستخدم بشكل مؤقت أو دائم
         * @summary إلغاء تفعيل الحساب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeactivateAccount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/deactivate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * حذف عنوان توصيل من القائمة
         * @summary حذف عنوان
         * @param {string} addressId معرّف العنوان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteAddress: async (addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('userControllerDeleteAddress', 'addressId', addressId)
            const localVarPath = `/users/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف عنوان (alias)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteAddressAlias: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerDeleteAddressAlias', 'id', id)
            const localVarPath = `/users/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف حساب المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على قائمة عناوين التوصيل المحفوظة
         * @summary جلب جميع عناوين المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAddresses: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على جميع بيانات المستخدم الحالي
         * @summary جلب بيانات المستخدم الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * التحقق من وجود PIN وحالة القفل
         * @summary حالة رمز PIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetPinStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/pin/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إعادة تعيين PIN لمستخدم معين (admin only)
         * @summary إعادة تعيين PIN (للمسؤولين)
         * @param {string} userId معرّف المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerResetPin: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userControllerResetPin', 'userId', userId)
            const localVarPath = `/users/pin/reset/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * البحث في قاعدة بيانات المستخدمين (admin only)
         * @summary البحث عن مستخدمين
         * @param {string} q نص البحث (اسم، رقم، email)
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد النتائج
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSearchUsers: async (q: string, cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('userControllerSearchUsers', 'q', q)
            const localVarPath = `/users/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * جعل عنوان معين هو العنوان الافتراضي للتوصيل
         * @summary تعيين العنوان الافتراضي
         * @param {string} addressId معرّف العنوان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSetDefaultAddress: async (addressId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('userControllerSetDefaultAddress', 'addressId', addressId)
            const localVarPath = `/users/addresses/{addressId}/set-default`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تعيين العنوان الافتراضي (alias)
         * @param {UserControllerSetDefaultAddressAliasRequest} userControllerSetDefaultAddressAliasRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSetDefaultAddressAlias: async (userControllerSetDefaultAddressAliasRequest: UserControllerSetDefaultAddressAliasRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userControllerSetDefaultAddressAliasRequest' is not null or undefined
            assertParamExists('userControllerSetDefaultAddressAlias', 'userControllerSetDefaultAddressAliasRequest', userControllerSetDefaultAddressAliasRequest)
            const localVarPath = `/users/default-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userControllerSetDefaultAddressAliasRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
         * @summary تعيين رمز PIN مشفر
         * @param {SetPinDto} setPinDto بيانات PIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSetPin: async (setPinDto: SetPinDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setPinDto' is not null or undefined
            assertParamExists('userControllerSetPin', 'setPinDto', setPinDto)
            const localVarPath = `/users/pin/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setPinDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تعديل بيانات عنوان توصيل محفوظ
         * @summary تحديث عنوان موجود
         * @param {string} addressId معرّف العنوان
         * @param {AddAddressDto} addAddressDto البيانات المراد تحديثها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAddress: async (addressId: string, addAddressDto: AddAddressDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('userControllerUpdateAddress', 'addressId', addressId)
            // verify required parameter 'addAddressDto' is not null or undefined
            assertParamExists('userControllerUpdateAddress', 'addAddressDto', addAddressDto)
            const localVarPath = `/users/addresses/{addressId}`
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAddressDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث عنوان موجود (alias)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAddressAlias: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerUpdateAddressAlias', 'id', id)
            const localVarPath = `/users/address/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * تحديث بيانات المستخدم الحالي
         * @summary تحديث الملف الشخصي
         * @param {UpdateUserDto} updateUserDto البيانات المراد تحديثها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateProfile: async (updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdateProfile', 'updateUserDto', updateUserDto)
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * التحقق من صحة رمز PIN مع حماية من Brute Force
         * @summary التحقق من رمز PIN
         * @param {VerifyPinDto} verifyPinDto رمز PIN للتحقق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerVerifyPin: async (verifyPinDto: VerifyPinDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyPinDto' is not null or undefined
            assertParamExists('userControllerVerifyPin', 'verifyPinDto', verifyPinDto)
            const localVarPath = `/users/pin/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyPinDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
         * @summary إضافة عنوان توصيل جديد
         * @param {AddAddressDto} addAddressDto بيانات العنوان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerAddAddress(addAddressDto: AddAddressDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerAddAddress(addAddressDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerAddAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تغيير PIN الحالي (يتطلب PIN القديم)
         * @summary تغيير رمز PIN
         * @param {UserControllerChangePinRequest} userControllerChangePinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerChangePin(userControllerChangePinRequest: UserControllerChangePinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerChangePin(userControllerChangePinRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerChangePin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تعطيل حساب المستخدم بشكل مؤقت أو دائم
         * @summary إلغاء تفعيل الحساب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeactivateAccount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeactivateAccount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerDeactivateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * حذف عنوان توصيل من القائمة
         * @summary حذف عنوان
         * @param {string} addressId معرّف العنوان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteAddress(addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteAddress(addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerDeleteAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف عنوان (alias)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteAddressAlias(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteAddressAlias(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerDeleteAddressAlias']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف حساب المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerDeleteCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerDeleteCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerDeleteCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على قائمة عناوين التوصيل المحفوظة
         * @summary جلب جميع عناوين المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetAddresses(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetAddresses(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetAddresses']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على جميع بيانات المستخدم الحالي
         * @summary جلب بيانات المستخدم الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * التحقق من وجود PIN وحالة القفل
         * @summary حالة رمز PIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetPinStatus(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetPinStatus(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerGetPinStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إعادة تعيين PIN لمستخدم معين (admin only)
         * @summary إعادة تعيين PIN (للمسؤولين)
         * @param {string} userId معرّف المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerResetPin(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerResetPin(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerResetPin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * البحث في قاعدة بيانات المستخدمين (admin only)
         * @summary البحث عن مستخدمين
         * @param {string} q نص البحث (اسم، رقم، email)
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد النتائج
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerSearchUsers(q: string, cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerSearchUsers(q, cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerSearchUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * جعل عنوان معين هو العنوان الافتراضي للتوصيل
         * @summary تعيين العنوان الافتراضي
         * @param {string} addressId معرّف العنوان
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerSetDefaultAddress(addressId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerSetDefaultAddress(addressId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerSetDefaultAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تعيين العنوان الافتراضي (alias)
         * @param {UserControllerSetDefaultAddressAliasRequest} userControllerSetDefaultAddressAliasRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerSetDefaultAddressAlias(userControllerSetDefaultAddressAliasRequest: UserControllerSetDefaultAddressAliasRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerSetDefaultAddressAlias(userControllerSetDefaultAddressAliasRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerSetDefaultAddressAlias']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
         * @summary تعيين رمز PIN مشفر
         * @param {SetPinDto} setPinDto بيانات PIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerSetPin(setPinDto: SetPinDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerSetPin(setPinDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerSetPin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تعديل بيانات عنوان توصيل محفوظ
         * @summary تحديث عنوان موجود
         * @param {string} addressId معرّف العنوان
         * @param {AddAddressDto} addAddressDto البيانات المراد تحديثها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateAddress(addressId: string, addAddressDto: AddAddressDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateAddress(addressId, addAddressDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdateAddress']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث عنوان موجود (alias)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateAddressAlias(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateAddressAlias(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdateAddressAlias']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * تحديث بيانات المستخدم الحالي
         * @summary تحديث الملف الشخصي
         * @param {UpdateUserDto} updateUserDto البيانات المراد تحديثها
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateProfile(updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateProfile(updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerUpdateProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * التحقق من صحة رمز PIN مع حماية من Brute Force
         * @summary التحقق من رمز PIN
         * @param {VerifyPinDto} verifyPinDto رمز PIN للتحقق
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerVerifyPin(verifyPinDto: VerifyPinDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerVerifyPin(verifyPinDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userControllerVerifyPin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
         * @summary إضافة عنوان توصيل جديد
         * @param {UserApiUserControllerAddAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerAddAddress(requestParameters: UserApiUserControllerAddAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerAddAddress(requestParameters.addAddressDto, options).then((request) => request(axios, basePath));
        },
        /**
         * تغيير PIN الحالي (يتطلب PIN القديم)
         * @summary تغيير رمز PIN
         * @param {UserApiUserControllerChangePinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerChangePin(requestParameters: UserApiUserControllerChangePinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerChangePin(requestParameters.userControllerChangePinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * تعطيل حساب المستخدم بشكل مؤقت أو دائم
         * @summary إلغاء تفعيل الحساب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeactivateAccount(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDeactivateAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * حذف عنوان توصيل من القائمة
         * @summary حذف عنوان
         * @param {UserApiUserControllerDeleteAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteAddress(requestParameters: UserApiUserControllerDeleteAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDeleteAddress(requestParameters.addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف عنوان (alias)
         * @param {UserApiUserControllerDeleteAddressAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteAddressAlias(requestParameters: UserApiUserControllerDeleteAddressAliasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerDeleteAddressAlias(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف حساب المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerDeleteCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<DeleteUserResponse> {
            return localVarFp.userControllerDeleteCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على قائمة عناوين التوصيل المحفوظة
         * @summary جلب جميع عناوين المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetAddresses(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerGetAddresses(options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على جميع بيانات المستخدم الحالي
         * @summary جلب بيانات المستخدم الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerGetCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * التحقق من وجود PIN وحالة القفل
         * @summary حالة رمز PIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetPinStatus(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerGetPinStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * إعادة تعيين PIN لمستخدم معين (admin only)
         * @summary إعادة تعيين PIN (للمسؤولين)
         * @param {UserApiUserControllerResetPinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerResetPin(requestParameters: UserApiUserControllerResetPinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerResetPin(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * البحث في قاعدة بيانات المستخدمين (admin only)
         * @summary البحث عن مستخدمين
         * @param {UserApiUserControllerSearchUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSearchUsers(requestParameters: UserApiUserControllerSearchUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerSearchUsers(requestParameters.q, requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * جعل عنوان معين هو العنوان الافتراضي للتوصيل
         * @summary تعيين العنوان الافتراضي
         * @param {UserApiUserControllerSetDefaultAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSetDefaultAddress(requestParameters: UserApiUserControllerSetDefaultAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerSetDefaultAddress(requestParameters.addressId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تعيين العنوان الافتراضي (alias)
         * @param {UserApiUserControllerSetDefaultAddressAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSetDefaultAddressAlias(requestParameters: UserApiUserControllerSetDefaultAddressAliasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerSetDefaultAddressAlias(requestParameters.userControllerSetDefaultAddressAliasRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
         * @summary تعيين رمز PIN مشفر
         * @param {UserApiUserControllerSetPinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerSetPin(requestParameters: UserApiUserControllerSetPinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerSetPin(requestParameters.setPinDto, options).then((request) => request(axios, basePath));
        },
        /**
         * تعديل بيانات عنوان توصيل محفوظ
         * @summary تحديث عنوان موجود
         * @param {UserApiUserControllerUpdateAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAddress(requestParameters: UserApiUserControllerUpdateAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerUpdateAddress(requestParameters.addressId, requestParameters.addAddressDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث عنوان موجود (alias)
         * @param {UserApiUserControllerUpdateAddressAliasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateAddressAlias(requestParameters: UserApiUserControllerUpdateAddressAliasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerUpdateAddressAlias(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * تحديث بيانات المستخدم الحالي
         * @summary تحديث الملف الشخصي
         * @param {UserApiUserControllerUpdateProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateProfile(requestParameters: UserApiUserControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerUpdateProfile(requestParameters.updateUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * التحقق من صحة رمز PIN مع حماية من Brute Force
         * @summary التحقق من رمز PIN
         * @param {UserApiUserControllerVerifyPinRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerVerifyPin(requestParameters: UserApiUserControllerVerifyPinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userControllerVerifyPin(requestParameters.verifyPinDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 */
export interface UserApiInterface {
    /**
     * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
     * @summary إضافة عنوان توصيل جديد
     * @param {UserApiUserControllerAddAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerAddAddress(requestParameters: UserApiUserControllerAddAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تغيير PIN الحالي (يتطلب PIN القديم)
     * @summary تغيير رمز PIN
     * @param {UserApiUserControllerChangePinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerChangePin(requestParameters: UserApiUserControllerChangePinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تعطيل حساب المستخدم بشكل مؤقت أو دائم
     * @summary إلغاء تفعيل الحساب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerDeactivateAccount(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * حذف عنوان توصيل من القائمة
     * @summary حذف عنوان
     * @param {UserApiUserControllerDeleteAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerDeleteAddress(requestParameters: UserApiUserControllerDeleteAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف عنوان (alias)
     * @param {UserApiUserControllerDeleteAddressAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerDeleteAddressAlias(requestParameters: UserApiUserControllerDeleteAddressAliasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف حساب المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerDeleteCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<DeleteUserResponse>;

    /**
     * الحصول على قائمة عناوين التوصيل المحفوظة
     * @summary جلب جميع عناوين المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetAddresses(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على جميع بيانات المستخدم الحالي
     * @summary جلب بيانات المستخدم الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * التحقق من وجود PIN وحالة القفل
     * @summary حالة رمز PIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerGetPinStatus(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إعادة تعيين PIN لمستخدم معين (admin only)
     * @summary إعادة تعيين PIN (للمسؤولين)
     * @param {UserApiUserControllerResetPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerResetPin(requestParameters: UserApiUserControllerResetPinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * البحث في قاعدة بيانات المستخدمين (admin only)
     * @summary البحث عن مستخدمين
     * @param {UserApiUserControllerSearchUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSearchUsers(requestParameters: UserApiUserControllerSearchUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * جعل عنوان معين هو العنوان الافتراضي للتوصيل
     * @summary تعيين العنوان الافتراضي
     * @param {UserApiUserControllerSetDefaultAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSetDefaultAddress(requestParameters: UserApiUserControllerSetDefaultAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تعيين العنوان الافتراضي (alias)
     * @param {UserApiUserControllerSetDefaultAddressAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSetDefaultAddressAlias(requestParameters: UserApiUserControllerSetDefaultAddressAliasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
     * @summary تعيين رمز PIN مشفر
     * @param {UserApiUserControllerSetPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerSetPin(requestParameters: UserApiUserControllerSetPinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تعديل بيانات عنوان توصيل محفوظ
     * @summary تحديث عنوان موجود
     * @param {UserApiUserControllerUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdateAddress(requestParameters: UserApiUserControllerUpdateAddressRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث عنوان موجود (alias)
     * @param {UserApiUserControllerUpdateAddressAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdateAddressAlias(requestParameters: UserApiUserControllerUpdateAddressAliasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * تحديث بيانات المستخدم الحالي
     * @summary تحديث الملف الشخصي
     * @param {UserApiUserControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerUpdateProfile(requestParameters: UserApiUserControllerUpdateProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * التحقق من صحة رمز PIN مع حماية من Brute Force
     * @summary التحقق من رمز PIN
     * @param {UserApiUserControllerVerifyPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    userControllerVerifyPin(requestParameters: UserApiUserControllerVerifyPinRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for userControllerAddAddress operation in UserApi.
 */
export interface UserApiUserControllerAddAddressRequest {
    /**
     * بيانات العنوان
     */
    readonly addAddressDto: AddAddressDto
}

/**
 * Request parameters for userControllerChangePin operation in UserApi.
 */
export interface UserApiUserControllerChangePinRequest {
    readonly userControllerChangePinRequest: UserControllerChangePinRequest
}

/**
 * Request parameters for userControllerDeleteAddress operation in UserApi.
 */
export interface UserApiUserControllerDeleteAddressRequest {
    /**
     * معرّف العنوان
     */
    readonly addressId: string
}

/**
 * Request parameters for userControllerDeleteAddressAlias operation in UserApi.
 */
export interface UserApiUserControllerDeleteAddressAliasRequest {
    readonly id: string
}

/**
 * Request parameters for userControllerResetPin operation in UserApi.
 */
export interface UserApiUserControllerResetPinRequest {
    /**
     * معرّف المستخدم
     */
    readonly userId: string
}

/**
 * Request parameters for userControllerSearchUsers operation in UserApi.
 */
export interface UserApiUserControllerSearchUsersRequest {
    /**
     * نص البحث (اسم، رقم، email)
     */
    readonly q: string

    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد النتائج
     */
    readonly limit?: number
}

/**
 * Request parameters for userControllerSetDefaultAddress operation in UserApi.
 */
export interface UserApiUserControllerSetDefaultAddressRequest {
    /**
     * معرّف العنوان
     */
    readonly addressId: string
}

/**
 * Request parameters for userControllerSetDefaultAddressAlias operation in UserApi.
 */
export interface UserApiUserControllerSetDefaultAddressAliasRequest {
    readonly userControllerSetDefaultAddressAliasRequest: UserControllerSetDefaultAddressAliasRequest
}

/**
 * Request parameters for userControllerSetPin operation in UserApi.
 */
export interface UserApiUserControllerSetPinRequest {
    /**
     * بيانات PIN
     */
    readonly setPinDto: SetPinDto
}

/**
 * Request parameters for userControllerUpdateAddress operation in UserApi.
 */
export interface UserApiUserControllerUpdateAddressRequest {
    /**
     * معرّف العنوان
     */
    readonly addressId: string

    /**
     * البيانات المراد تحديثها
     */
    readonly addAddressDto: AddAddressDto
}

/**
 * Request parameters for userControllerUpdateAddressAlias operation in UserApi.
 */
export interface UserApiUserControllerUpdateAddressAliasRequest {
    readonly id: string
}

/**
 * Request parameters for userControllerUpdateProfile operation in UserApi.
 */
export interface UserApiUserControllerUpdateProfileRequest {
    /**
     * البيانات المراد تحديثها
     */
    readonly updateUserDto: UpdateUserDto
}

/**
 * Request parameters for userControllerVerifyPin operation in UserApi.
 */
export interface UserApiUserControllerVerifyPinRequest {
    /**
     * رمز PIN للتحقق
     */
    readonly verifyPinDto: VerifyPinDto
}

/**
 * UserApi - object-oriented interface
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * إضافة عنوان توصيل مع الإحداثيات والتفاصيل
     * @summary إضافة عنوان توصيل جديد
     * @param {UserApiUserControllerAddAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerAddAddress(requestParameters: UserApiUserControllerAddAddressRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerAddAddress(requestParameters.addAddressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تغيير PIN الحالي (يتطلب PIN القديم)
     * @summary تغيير رمز PIN
     * @param {UserApiUserControllerChangePinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerChangePin(requestParameters: UserApiUserControllerChangePinRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerChangePin(requestParameters.userControllerChangePinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تعطيل حساب المستخدم بشكل مؤقت أو دائم
     * @summary إلغاء تفعيل الحساب
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerDeactivateAccount(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerDeactivateAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * حذف عنوان توصيل من القائمة
     * @summary حذف عنوان
     * @param {UserApiUserControllerDeleteAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerDeleteAddress(requestParameters: UserApiUserControllerDeleteAddressRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerDeleteAddress(requestParameters.addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف عنوان (alias)
     * @param {UserApiUserControllerDeleteAddressAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerDeleteAddressAlias(requestParameters: UserApiUserControllerDeleteAddressAliasRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerDeleteAddressAlias(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف حساب المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerDeleteCurrentUser(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerDeleteCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على قائمة عناوين التوصيل المحفوظة
     * @summary جلب جميع عناوين المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerGetAddresses(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetAddresses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على جميع بيانات المستخدم الحالي
     * @summary جلب بيانات المستخدم الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerGetCurrentUser(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * التحقق من وجود PIN وحالة القفل
     * @summary حالة رمز PIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerGetPinStatus(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetPinStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إعادة تعيين PIN لمستخدم معين (admin only)
     * @summary إعادة تعيين PIN (للمسؤولين)
     * @param {UserApiUserControllerResetPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerResetPin(requestParameters: UserApiUserControllerResetPinRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerResetPin(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * البحث في قاعدة بيانات المستخدمين (admin only)
     * @summary البحث عن مستخدمين
     * @param {UserApiUserControllerSearchUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerSearchUsers(requestParameters: UserApiUserControllerSearchUsersRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerSearchUsers(requestParameters.q, requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * جعل عنوان معين هو العنوان الافتراضي للتوصيل
     * @summary تعيين العنوان الافتراضي
     * @param {UserApiUserControllerSetDefaultAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerSetDefaultAddress(requestParameters: UserApiUserControllerSetDefaultAddressRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerSetDefaultAddress(requestParameters.addressId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تعيين العنوان الافتراضي (alias)
     * @param {UserApiUserControllerSetDefaultAddressAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerSetDefaultAddressAlias(requestParameters: UserApiUserControllerSetDefaultAddressAliasRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerSetDefaultAddressAlias(requestParameters.userControllerSetDefaultAddressAliasRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تعيين رمز PIN من 4-6 أرقام مع تشفير bcrypt
     * @summary تعيين رمز PIN مشفر
     * @param {UserApiUserControllerSetPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerSetPin(requestParameters: UserApiUserControllerSetPinRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerSetPin(requestParameters.setPinDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تعديل بيانات عنوان توصيل محفوظ
     * @summary تحديث عنوان موجود
     * @param {UserApiUserControllerUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerUpdateAddress(requestParameters: UserApiUserControllerUpdateAddressRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdateAddress(requestParameters.addressId, requestParameters.addAddressDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث عنوان موجود (alias)
     * @param {UserApiUserControllerUpdateAddressAliasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerUpdateAddressAlias(requestParameters: UserApiUserControllerUpdateAddressAliasRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdateAddressAlias(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * تحديث بيانات المستخدم الحالي
     * @summary تحديث الملف الشخصي
     * @param {UserApiUserControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerUpdateProfile(requestParameters: UserApiUserControllerUpdateProfileRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdateProfile(requestParameters.updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * التحقق من صحة رمز PIN مع حماية من Brute Force
     * @summary التحقق من رمز PIN
     * @param {UserApiUserControllerVerifyPinRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public userControllerVerifyPin(requestParameters: UserApiUserControllerVerifyPinRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerVerifyPin(requestParameters.verifyPinDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UtilityApi - axios parameter creator
 */
export const UtilityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تعيين سائق للطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerAssignDriver: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('utilityControllerAssignDriver', 'id', id)
            const localVarPath = `/utility/order/{id}/assign-driver`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حساب سعر خدمة الغاز أو الماء
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCalculatePrice: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('utilityControllerCalculatePrice', 'body', body)
            const localVarPath = `/utility/calculate-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إلغاء الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCancelOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('utilityControllerCancelOrder', 'id', id)
            const localVarPath = `/utility/order/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء طلب غاز أو ماء
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCreateOrder: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('utilityControllerCreateOrder', 'body', body)
            const localVarPath = `/utility/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إنشاء تسعير لمدينة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCreatePricing: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('utilityControllerCreatePricing', 'body', body)
            const localVarPath = `/utility/pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف سعر يومي حسب ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerDeleteDaily: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('utilityControllerDeleteDaily', 'id', id)
            const localVarPath = `/utility/daily/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف سعر يومي حسب المفتاح المركب
         * @param {string} kind 
         * @param {string} city 
         * @param {string} date 
         * @param {string} variant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerDeleteDailyByKey: async (kind: string, city: string, date: string, variant: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kind' is not null or undefined
            assertParamExists('utilityControllerDeleteDailyByKey', 'kind', kind)
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilityControllerDeleteDailyByKey', 'city', city)
            // verify required parameter 'date' is not null or undefined
            assertParamExists('utilityControllerDeleteDailyByKey', 'date', date)
            // verify required parameter 'variant' is not null or undefined
            assertParamExists('utilityControllerDeleteDailyByKey', 'variant', variant)
            const localVarPath = `/utility/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (kind !== undefined) {
                localVarQueryParameter['kind'] = kind;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (variant !== undefined) {
                localVarQueryParameter['variant'] = variant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary حذف تسعير مدينة
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerDeletePricing: async (city: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilityControllerDeletePricing', 'city', city)
            const localVarPath = `/utility/pricing/{city}`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب جميع الطلبات (admin)
         * @param {number} [limit] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetAllOrders: async (limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/utility/admin/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على كل التسعيرات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetAllPricing: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/utility/pricing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب تفاصيل طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('utilityControllerGetOrder', 'id', id)
            const localVarPath = `/utility/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على تسعير مدينة
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetPricingByCity: async (city: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilityControllerGetPricingByCity', 'city', city)
            const localVarPath = `/utility/pricing/{city}`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب طلبات المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetUserOrders: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/utility/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على خيارات الغاز والماء (public)
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetUtilityOptions: async (city: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilityControllerGetUtilityOptions', 'city', city)
            const localVarPath = `/utility/options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary الحصول على قائمة الأسعار اليومية
         * @param {string} kind 
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerListDaily: async (kind: string, city: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kind' is not null or undefined
            assertParamExists('utilityControllerListDaily', 'kind', kind)
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilityControllerListDaily', 'city', city)
            const localVarPath = `/utility/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (kind !== undefined) {
                localVarQueryParameter['kind'] = kind;
            }

            if (city !== undefined) {
                localVarQueryParameter['city'] = city;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تقييم الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerRateOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('utilityControllerRateOrder', 'id', id)
            const localVarPath = `/utility/order/{id}/rate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث حالة الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpdateOrderStatus: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('utilityControllerUpdateOrderStatus', 'id', id)
            const localVarPath = `/utility/order/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث تسعير مدينة
         * @param {string} city 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpdatePricing: async (city: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'city' is not null or undefined
            assertParamExists('utilityControllerUpdatePricing', 'city', city)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('utilityControllerUpdatePricing', 'body', body)
            const localVarPath = `/utility/pricing/{city}`
                .replace(`{${"city"}}`, encodeURIComponent(String(city)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إضافة/تحديث سعر يومي
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpsertDaily: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('utilityControllerUpsertDaily', 'body', body)
            const localVarPath = `/utility/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث/إنشاء إعدادات الغاز
         * @param {UtilityControllerUpsertGasRequest} utilityControllerUpsertGasRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpsertGas: async (utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'utilityControllerUpsertGasRequest' is not null or undefined
            assertParamExists('utilityControllerUpsertGas', 'utilityControllerUpsertGasRequest', utilityControllerUpsertGasRequest)
            const localVarPath = `/utility/options/gas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(utilityControllerUpsertGasRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث/إنشاء إعدادات الماء
         * @param {UtilityControllerUpsertGasRequest} utilityControllerUpsertGasRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpsertWater: async (utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'utilityControllerUpsertGasRequest' is not null or undefined
            assertParamExists('utilityControllerUpsertWater', 'utilityControllerUpsertGasRequest', utilityControllerUpsertGasRequest)
            const localVarPath = `/utility/options/water`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(utilityControllerUpsertGasRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilityApi - functional programming interface
 */
export const UtilityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تعيين سائق للطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerAssignDriver(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerAssignDriver(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerAssignDriver']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حساب سعر خدمة الغاز أو الماء
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerCalculatePrice(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerCalculatePrice(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerCalculatePrice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إلغاء الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerCancelOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerCancelOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerCancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء طلب غاز أو ماء
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerCreateOrder(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerCreateOrder(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerCreateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إنشاء تسعير لمدينة
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerCreatePricing(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerCreatePricing(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerCreatePricing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف سعر يومي حسب ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerDeleteDaily(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerDeleteDaily(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerDeleteDaily']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف سعر يومي حسب المفتاح المركب
         * @param {string} kind 
         * @param {string} city 
         * @param {string} date 
         * @param {string} variant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerDeleteDailyByKey(kind: string, city: string, date: string, variant: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerDeleteDailyByKey(kind, city, date, variant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerDeleteDailyByKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary حذف تسعير مدينة
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerDeletePricing(city: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerDeletePricing(city, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerDeletePricing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب جميع الطلبات (admin)
         * @param {number} [limit] 
         * @param {string} [cursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerGetAllOrders(limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerGetAllOrders(limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerGetAllOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على كل التسعيرات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerGetAllPricing(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerGetAllPricing(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerGetAllPricing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب تفاصيل طلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerGetOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerGetOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerGetOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على تسعير مدينة
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerGetPricingByCity(city: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerGetPricingByCity(city, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerGetPricingByCity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب طلبات المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerGetUserOrders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerGetUserOrders(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerGetUserOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على خيارات الغاز والماء (public)
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerGetUtilityOptions(city: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerGetUtilityOptions(city, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerGetUtilityOptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary الحصول على قائمة الأسعار اليومية
         * @param {string} kind 
         * @param {string} city 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerListDaily(kind: string, city: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerListDaily(kind, city, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerListDaily']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تقييم الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerRateOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerRateOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerRateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث حالة الطلب
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerUpdateOrderStatus(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerUpdateOrderStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerUpdateOrderStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث تسعير مدينة
         * @param {string} city 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerUpdatePricing(city: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerUpdatePricing(city, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerUpdatePricing']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إضافة/تحديث سعر يومي
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerUpsertDaily(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerUpsertDaily(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerUpsertDaily']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث/إنشاء إعدادات الغاز
         * @param {UtilityControllerUpsertGasRequest} utilityControllerUpsertGasRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerUpsertGas(utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerUpsertGas(utilityControllerUpsertGasRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerUpsertGas']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث/إنشاء إعدادات الماء
         * @param {UtilityControllerUpsertGasRequest} utilityControllerUpsertGasRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilityControllerUpsertWater(utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilityControllerUpsertWater(utilityControllerUpsertGasRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UtilityApi.utilityControllerUpsertWater']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UtilityApi - factory interface
 */
export const UtilityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilityApiFp(configuration)
    return {
        /**
         * 
         * @summary تعيين سائق للطلب
         * @param {UtilityApiUtilityControllerAssignDriverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerAssignDriver(requestParameters: UtilityApiUtilityControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerAssignDriver(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حساب سعر خدمة الغاز أو الماء
         * @param {UtilityApiUtilityControllerCalculatePriceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCalculatePrice(requestParameters: UtilityApiUtilityControllerCalculatePriceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerCalculatePrice(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إلغاء الطلب
         * @param {UtilityApiUtilityControllerCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCancelOrder(requestParameters: UtilityApiUtilityControllerCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerCancelOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء طلب غاز أو ماء
         * @param {UtilityApiUtilityControllerCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCreateOrder(requestParameters: UtilityApiUtilityControllerCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerCreateOrder(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إنشاء تسعير لمدينة
         * @param {UtilityApiUtilityControllerCreatePricingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerCreatePricing(requestParameters: UtilityApiUtilityControllerCreatePricingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerCreatePricing(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف سعر يومي حسب ID
         * @param {UtilityApiUtilityControllerDeleteDailyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerDeleteDaily(requestParameters: UtilityApiUtilityControllerDeleteDailyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerDeleteDaily(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف سعر يومي حسب المفتاح المركب
         * @param {UtilityApiUtilityControllerDeleteDailyByKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerDeleteDailyByKey(requestParameters: UtilityApiUtilityControllerDeleteDailyByKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerDeleteDailyByKey(requestParameters.kind, requestParameters.city, requestParameters.date, requestParameters.variant, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary حذف تسعير مدينة
         * @param {UtilityApiUtilityControllerDeletePricingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerDeletePricing(requestParameters: UtilityApiUtilityControllerDeletePricingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerDeletePricing(requestParameters.city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب جميع الطلبات (admin)
         * @param {UtilityApiUtilityControllerGetAllOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetAllOrders(requestParameters: UtilityApiUtilityControllerGetAllOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerGetAllOrders(requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على كل التسعيرات
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetAllPricing(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerGetAllPricing(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب تفاصيل طلب
         * @param {UtilityApiUtilityControllerGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetOrder(requestParameters: UtilityApiUtilityControllerGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerGetOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على تسعير مدينة
         * @param {UtilityApiUtilityControllerGetPricingByCityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetPricingByCity(requestParameters: UtilityApiUtilityControllerGetPricingByCityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerGetPricingByCity(requestParameters.city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب طلبات المستخدم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetUserOrders(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerGetUserOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على خيارات الغاز والماء (public)
         * @param {UtilityApiUtilityControllerGetUtilityOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerGetUtilityOptions(requestParameters: UtilityApiUtilityControllerGetUtilityOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerGetUtilityOptions(requestParameters.city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary الحصول على قائمة الأسعار اليومية
         * @param {UtilityApiUtilityControllerListDailyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerListDaily(requestParameters: UtilityApiUtilityControllerListDailyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerListDaily(requestParameters.kind, requestParameters.city, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تقييم الطلب
         * @param {UtilityApiUtilityControllerRateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerRateOrder(requestParameters: UtilityApiUtilityControllerRateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerRateOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث حالة الطلب
         * @param {UtilityApiUtilityControllerUpdateOrderStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpdateOrderStatus(requestParameters: UtilityApiUtilityControllerUpdateOrderStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerUpdateOrderStatus(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث تسعير مدينة
         * @param {UtilityApiUtilityControllerUpdatePricingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpdatePricing(requestParameters: UtilityApiUtilityControllerUpdatePricingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerUpdatePricing(requestParameters.city, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إضافة/تحديث سعر يومي
         * @param {UtilityApiUtilityControllerUpsertDailyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpsertDaily(requestParameters: UtilityApiUtilityControllerUpsertDailyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerUpsertDaily(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث/إنشاء إعدادات الغاز
         * @param {UtilityApiUtilityControllerUpsertGasRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpsertGas(requestParameters: UtilityApiUtilityControllerUpsertGasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerUpsertGas(requestParameters.utilityControllerUpsertGasRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث/إنشاء إعدادات الماء
         * @param {UtilityApiUtilityControllerUpsertWaterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilityControllerUpsertWater(requestParameters: UtilityApiUtilityControllerUpsertWaterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.utilityControllerUpsertWater(requestParameters.utilityControllerUpsertGasRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilityApi - interface
 */
export interface UtilityApiInterface {
    /**
     * 
     * @summary تعيين سائق للطلب
     * @param {UtilityApiUtilityControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerAssignDriver(requestParameters: UtilityApiUtilityControllerAssignDriverRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حساب سعر خدمة الغاز أو الماء
     * @param {UtilityApiUtilityControllerCalculatePriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerCalculatePrice(requestParameters: UtilityApiUtilityControllerCalculatePriceRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إلغاء الطلب
     * @param {UtilityApiUtilityControllerCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerCancelOrder(requestParameters: UtilityApiUtilityControllerCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء طلب غاز أو ماء
     * @param {UtilityApiUtilityControllerCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerCreateOrder(requestParameters: UtilityApiUtilityControllerCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إنشاء تسعير لمدينة
     * @param {UtilityApiUtilityControllerCreatePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerCreatePricing(requestParameters: UtilityApiUtilityControllerCreatePricingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف سعر يومي حسب ID
     * @param {UtilityApiUtilityControllerDeleteDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerDeleteDaily(requestParameters: UtilityApiUtilityControllerDeleteDailyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف سعر يومي حسب المفتاح المركب
     * @param {UtilityApiUtilityControllerDeleteDailyByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerDeleteDailyByKey(requestParameters: UtilityApiUtilityControllerDeleteDailyByKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary حذف تسعير مدينة
     * @param {UtilityApiUtilityControllerDeletePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerDeletePricing(requestParameters: UtilityApiUtilityControllerDeletePricingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب جميع الطلبات (admin)
     * @param {UtilityApiUtilityControllerGetAllOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerGetAllOrders(requestParameters?: UtilityApiUtilityControllerGetAllOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على كل التسعيرات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerGetAllPricing(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب تفاصيل طلب
     * @param {UtilityApiUtilityControllerGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerGetOrder(requestParameters: UtilityApiUtilityControllerGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على تسعير مدينة
     * @param {UtilityApiUtilityControllerGetPricingByCityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerGetPricingByCity(requestParameters: UtilityApiUtilityControllerGetPricingByCityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب طلبات المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerGetUserOrders(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على خيارات الغاز والماء (public)
     * @param {UtilityApiUtilityControllerGetUtilityOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerGetUtilityOptions(requestParameters: UtilityApiUtilityControllerGetUtilityOptionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary الحصول على قائمة الأسعار اليومية
     * @param {UtilityApiUtilityControllerListDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerListDaily(requestParameters: UtilityApiUtilityControllerListDailyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تقييم الطلب
     * @param {UtilityApiUtilityControllerRateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerRateOrder(requestParameters: UtilityApiUtilityControllerRateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث حالة الطلب
     * @param {UtilityApiUtilityControllerUpdateOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerUpdateOrderStatus(requestParameters: UtilityApiUtilityControllerUpdateOrderStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث تسعير مدينة
     * @param {UtilityApiUtilityControllerUpdatePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerUpdatePricing(requestParameters: UtilityApiUtilityControllerUpdatePricingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إضافة/تحديث سعر يومي
     * @param {UtilityApiUtilityControllerUpsertDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerUpsertDaily(requestParameters: UtilityApiUtilityControllerUpsertDailyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث/إنشاء إعدادات الغاز
     * @param {UtilityApiUtilityControllerUpsertGasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerUpsertGas(requestParameters: UtilityApiUtilityControllerUpsertGasRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث/إنشاء إعدادات الماء
     * @param {UtilityApiUtilityControllerUpsertWaterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    utilityControllerUpsertWater(requestParameters: UtilityApiUtilityControllerUpsertWaterRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for utilityControllerAssignDriver operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerAssignDriverRequest {
    readonly id: string
}

/**
 * Request parameters for utilityControllerCalculatePrice operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerCalculatePriceRequest {
    readonly body: object
}

/**
 * Request parameters for utilityControllerCancelOrder operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerCancelOrderRequest {
    readonly id: string
}

/**
 * Request parameters for utilityControllerCreateOrder operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerCreateOrderRequest {
    readonly body: object
}

/**
 * Request parameters for utilityControllerCreatePricing operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerCreatePricingRequest {
    readonly body: object
}

/**
 * Request parameters for utilityControllerDeleteDaily operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerDeleteDailyRequest {
    readonly id: string
}

/**
 * Request parameters for utilityControllerDeleteDailyByKey operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerDeleteDailyByKeyRequest {
    readonly kind: string

    readonly city: string

    readonly date: string

    readonly variant: string
}

/**
 * Request parameters for utilityControllerDeletePricing operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerDeletePricingRequest {
    readonly city: string
}

/**
 * Request parameters for utilityControllerGetAllOrders operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerGetAllOrdersRequest {
    readonly limit?: number

    readonly cursor?: string
}

/**
 * Request parameters for utilityControllerGetOrder operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerGetOrderRequest {
    readonly id: string
}

/**
 * Request parameters for utilityControllerGetPricingByCity operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerGetPricingByCityRequest {
    readonly city: string
}

/**
 * Request parameters for utilityControllerGetUtilityOptions operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerGetUtilityOptionsRequest {
    readonly city: string
}

/**
 * Request parameters for utilityControllerListDaily operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerListDailyRequest {
    readonly kind: string

    readonly city: string
}

/**
 * Request parameters for utilityControllerRateOrder operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerRateOrderRequest {
    readonly id: string
}

/**
 * Request parameters for utilityControllerUpdateOrderStatus operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerUpdateOrderStatusRequest {
    readonly id: string
}

/**
 * Request parameters for utilityControllerUpdatePricing operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerUpdatePricingRequest {
    readonly city: string

    readonly body: object
}

/**
 * Request parameters for utilityControllerUpsertDaily operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerUpsertDailyRequest {
    readonly body: object
}

/**
 * Request parameters for utilityControllerUpsertGas operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerUpsertGasRequest {
    readonly utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest
}

/**
 * Request parameters for utilityControllerUpsertWater operation in UtilityApi.
 */
export interface UtilityApiUtilityControllerUpsertWaterRequest {
    readonly utilityControllerUpsertGasRequest: UtilityControllerUpsertGasRequest
}

/**
 * UtilityApi - object-oriented interface
 */
export class UtilityApi extends BaseAPI implements UtilityApiInterface {
    /**
     * 
     * @summary تعيين سائق للطلب
     * @param {UtilityApiUtilityControllerAssignDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerAssignDriver(requestParameters: UtilityApiUtilityControllerAssignDriverRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerAssignDriver(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حساب سعر خدمة الغاز أو الماء
     * @param {UtilityApiUtilityControllerCalculatePriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerCalculatePrice(requestParameters: UtilityApiUtilityControllerCalculatePriceRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerCalculatePrice(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إلغاء الطلب
     * @param {UtilityApiUtilityControllerCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerCancelOrder(requestParameters: UtilityApiUtilityControllerCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerCancelOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء طلب غاز أو ماء
     * @param {UtilityApiUtilityControllerCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerCreateOrder(requestParameters: UtilityApiUtilityControllerCreateOrderRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerCreateOrder(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إنشاء تسعير لمدينة
     * @param {UtilityApiUtilityControllerCreatePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerCreatePricing(requestParameters: UtilityApiUtilityControllerCreatePricingRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerCreatePricing(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف سعر يومي حسب ID
     * @param {UtilityApiUtilityControllerDeleteDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerDeleteDaily(requestParameters: UtilityApiUtilityControllerDeleteDailyRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerDeleteDaily(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف سعر يومي حسب المفتاح المركب
     * @param {UtilityApiUtilityControllerDeleteDailyByKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerDeleteDailyByKey(requestParameters: UtilityApiUtilityControllerDeleteDailyByKeyRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerDeleteDailyByKey(requestParameters.kind, requestParameters.city, requestParameters.date, requestParameters.variant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary حذف تسعير مدينة
     * @param {UtilityApiUtilityControllerDeletePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerDeletePricing(requestParameters: UtilityApiUtilityControllerDeletePricingRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerDeletePricing(requestParameters.city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب جميع الطلبات (admin)
     * @param {UtilityApiUtilityControllerGetAllOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerGetAllOrders(requestParameters: UtilityApiUtilityControllerGetAllOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerGetAllOrders(requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على كل التسعيرات
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerGetAllPricing(options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerGetAllPricing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب تفاصيل طلب
     * @param {UtilityApiUtilityControllerGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerGetOrder(requestParameters: UtilityApiUtilityControllerGetOrderRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerGetOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على تسعير مدينة
     * @param {UtilityApiUtilityControllerGetPricingByCityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerGetPricingByCity(requestParameters: UtilityApiUtilityControllerGetPricingByCityRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerGetPricingByCity(requestParameters.city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب طلبات المستخدم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerGetUserOrders(options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerGetUserOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على خيارات الغاز والماء (public)
     * @param {UtilityApiUtilityControllerGetUtilityOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerGetUtilityOptions(requestParameters: UtilityApiUtilityControllerGetUtilityOptionsRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerGetUtilityOptions(requestParameters.city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary الحصول على قائمة الأسعار اليومية
     * @param {UtilityApiUtilityControllerListDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerListDaily(requestParameters: UtilityApiUtilityControllerListDailyRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerListDaily(requestParameters.kind, requestParameters.city, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تقييم الطلب
     * @param {UtilityApiUtilityControllerRateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerRateOrder(requestParameters: UtilityApiUtilityControllerRateOrderRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerRateOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث حالة الطلب
     * @param {UtilityApiUtilityControllerUpdateOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerUpdateOrderStatus(requestParameters: UtilityApiUtilityControllerUpdateOrderStatusRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerUpdateOrderStatus(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث تسعير مدينة
     * @param {UtilityApiUtilityControllerUpdatePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerUpdatePricing(requestParameters: UtilityApiUtilityControllerUpdatePricingRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerUpdatePricing(requestParameters.city, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إضافة/تحديث سعر يومي
     * @param {UtilityApiUtilityControllerUpsertDailyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerUpsertDaily(requestParameters: UtilityApiUtilityControllerUpsertDailyRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerUpsertDaily(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث/إنشاء إعدادات الغاز
     * @param {UtilityApiUtilityControllerUpsertGasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerUpsertGas(requestParameters: UtilityApiUtilityControllerUpsertGasRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerUpsertGas(requestParameters.utilityControllerUpsertGasRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث/إنشاء إعدادات الماء
     * @param {UtilityApiUtilityControllerUpsertWaterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public utilityControllerUpsertWater(requestParameters: UtilityApiUtilityControllerUpsertWaterRequest, options?: RawAxiosRequestConfig) {
        return UtilityApiFp(this.configuration).utilityControllerUpsertWater(requestParameters.utilityControllerUpsertGasRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VendorApi - axios parameter creator
 */
export const VendorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary إنشاء تاجر جديد
         * @param {CreateVendorDto} createVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerCreate: async (createVendorDto: CreateVendorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createVendorDto' is not null or undefined
            assertParamExists('vendorControllerCreate', 'createVendorDto', createVendorDto)
            const localVarPath = `/vendors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVendorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلب تسوية مالية
         * @param {VendorControllerCreateSettlementRequest} vendorControllerCreateSettlementRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerCreateSettlement: async (vendorControllerCreateSettlementRequest: VendorControllerCreateSettlementRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorControllerCreateSettlementRequest' is not null or undefined
            assertParamExists('vendorControllerCreateSettlement', 'vendorControllerCreateSettlementRequest', vendorControllerCreateSettlementRequest)
            const localVarPath = `/vendors/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendorControllerCreateSettlementRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب كل التجار
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerFindAll: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب تاجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorControllerFindOne', 'id', id)
            const localVarPath = `/vendors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary كشف حساب التاجر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetAccountStatement: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendors/account/statement`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary لوحة معلومات التاجر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetDashboard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendors/dashboard/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary جلب بيانات التاجر الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendors/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل المبيعات
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetSales: async (limit: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('vendorControllerGetSales', 'limit', limit)
            const localVarPath = `/vendors/sales`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلبات التسوية المالية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetSettlements: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendors/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلب حذف الحساب
         * @param {VendorControllerRequestAccountDeletionRequest} vendorControllerRequestAccountDeletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerRequestAccountDeletion: async (vendorControllerRequestAccountDeletionRequest: VendorControllerRequestAccountDeletionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorControllerRequestAccountDeletionRequest' is not null or undefined
            assertParamExists('vendorControllerRequestAccountDeletion', 'vendorControllerRequestAccountDeletionRequest', vendorControllerRequestAccountDeletionRequest)
            const localVarPath = `/vendors/account/delete-request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendorControllerRequestAccountDeletionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary إعادة تعيين كلمة مرور التاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerResetPassword: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorControllerResetPassword', 'id', id)
            const localVarPath = `/vendors/{id}/reset-password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث بيانات التاجر
         * @param {UpdateVendorDto} updateVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerUpdate: async (updateVendorDto: UpdateVendorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateVendorDto' is not null or undefined
            assertParamExists('vendorControllerUpdate', 'updateVendorDto', updateVendorDto)
            const localVarPath = `/vendors/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVendorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث حالة التاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerUpdateStatus: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorControllerUpdateStatus', 'id', id)
            const localVarPath = `/vendors/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحديث تاجر (للإدارة)
         * @param {string} id 
         * @param {UpdateVendorDto} updateVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerUpdateVendor: async (id: string, updateVendorDto: UpdateVendorDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vendorControllerUpdateVendor', 'id', id)
            // verify required parameter 'updateVendorDto' is not null or undefined
            assertParamExists('vendorControllerUpdateVendor', 'updateVendorDto', updateVendorDto)
            const localVarPath = `/vendors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateVendorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorApi - functional programming interface
 */
export const VendorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary إنشاء تاجر جديد
         * @param {CreateVendorDto} createVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerCreate(createVendorDto: CreateVendorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerCreate(createVendorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلب تسوية مالية
         * @param {VendorControllerCreateSettlementRequest} vendorControllerCreateSettlementRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerCreateSettlement(vendorControllerCreateSettlementRequest: VendorControllerCreateSettlementRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerCreateSettlement(vendorControllerCreateSettlementRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerCreateSettlement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب كل التجار
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerFindAll(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerFindAll(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب تاجر محدد
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary كشف حساب التاجر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerGetAccountStatement(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerGetAccountStatement(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerGetAccountStatement']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary لوحة معلومات التاجر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerGetDashboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerGetDashboard(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerGetDashboard']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary جلب بيانات التاجر الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل المبيعات
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerGetSales(limit: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerGetSales(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerGetSales']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلبات التسوية المالية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerGetSettlements(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerGetSettlements(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerGetSettlements']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلب حذف الحساب
         * @param {VendorControllerRequestAccountDeletionRequest} vendorControllerRequestAccountDeletionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerRequestAccountDeletion(vendorControllerRequestAccountDeletionRequest: VendorControllerRequestAccountDeletionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerRequestAccountDeletion(vendorControllerRequestAccountDeletionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerRequestAccountDeletion']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary إعادة تعيين كلمة مرور التاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerResetPassword(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerResetPassword(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerResetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث بيانات التاجر
         * @param {UpdateVendorDto} updateVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerUpdate(updateVendorDto: UpdateVendorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerUpdate(updateVendorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث حالة التاجر
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerUpdateStatus(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerUpdateStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerUpdateStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحديث تاجر (للإدارة)
         * @param {string} id 
         * @param {UpdateVendorDto} updateVendorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vendorControllerUpdateVendor(id: string, updateVendorDto: UpdateVendorDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vendorControllerUpdateVendor(id, updateVendorDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VendorApi.vendorControllerUpdateVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VendorApi - factory interface
 */
export const VendorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorApiFp(configuration)
    return {
        /**
         * 
         * @summary إنشاء تاجر جديد
         * @param {VendorApiVendorControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerCreate(requestParameters: VendorApiVendorControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerCreate(requestParameters.createVendorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلب تسوية مالية
         * @param {VendorApiVendorControllerCreateSettlementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerCreateSettlement(requestParameters: VendorApiVendorControllerCreateSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerCreateSettlement(requestParameters.vendorControllerCreateSettlementRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب كل التجار
         * @param {VendorApiVendorControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerFindAll(requestParameters: VendorApiVendorControllerFindAllRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerFindAll(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب تاجر محدد
         * @param {VendorApiVendorControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerFindOne(requestParameters: VendorApiVendorControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerFindOne(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary كشف حساب التاجر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetAccountStatement(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerGetAccountStatement(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary لوحة معلومات التاجر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetDashboard(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerGetDashboard(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary جلب بيانات التاجر الحالي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل المبيعات
         * @param {VendorApiVendorControllerGetSalesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetSales(requestParameters: VendorApiVendorControllerGetSalesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerGetSales(requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلبات التسوية المالية
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerGetSettlements(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerGetSettlements(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلب حذف الحساب
         * @param {VendorApiVendorControllerRequestAccountDeletionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerRequestAccountDeletion(requestParameters: VendorApiVendorControllerRequestAccountDeletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerRequestAccountDeletion(requestParameters.vendorControllerRequestAccountDeletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary إعادة تعيين كلمة مرور التاجر
         * @param {VendorApiVendorControllerResetPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerResetPassword(requestParameters: VendorApiVendorControllerResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerResetPassword(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث بيانات التاجر
         * @param {VendorApiVendorControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerUpdate(requestParameters: VendorApiVendorControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerUpdate(requestParameters.updateVendorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث حالة التاجر
         * @param {VendorApiVendorControllerUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerUpdateStatus(requestParameters: VendorApiVendorControllerUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerUpdateStatus(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحديث تاجر (للإدارة)
         * @param {VendorApiVendorControllerUpdateVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vendorControllerUpdateVendor(requestParameters: VendorApiVendorControllerUpdateVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vendorControllerUpdateVendor(requestParameters.id, requestParameters.updateVendorDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VendorApi - interface
 */
export interface VendorApiInterface {
    /**
     * 
     * @summary إنشاء تاجر جديد
     * @param {VendorApiVendorControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerCreate(requestParameters: VendorApiVendorControllerCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلب تسوية مالية
     * @param {VendorApiVendorControllerCreateSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerCreateSettlement(requestParameters: VendorApiVendorControllerCreateSettlementRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب كل التجار
     * @param {VendorApiVendorControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerFindAll(requestParameters?: VendorApiVendorControllerFindAllRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب تاجر محدد
     * @param {VendorApiVendorControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerFindOne(requestParameters: VendorApiVendorControllerFindOneRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary كشف حساب التاجر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerGetAccountStatement(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary لوحة معلومات التاجر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerGetDashboard(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary جلب بيانات التاجر الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل المبيعات
     * @param {VendorApiVendorControllerGetSalesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerGetSales(requestParameters: VendorApiVendorControllerGetSalesRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلبات التسوية المالية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerGetSettlements(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلب حذف الحساب
     * @param {VendorApiVendorControllerRequestAccountDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerRequestAccountDeletion(requestParameters: VendorApiVendorControllerRequestAccountDeletionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary إعادة تعيين كلمة مرور التاجر
     * @param {VendorApiVendorControllerResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerResetPassword(requestParameters: VendorApiVendorControllerResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث بيانات التاجر
     * @param {VendorApiVendorControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerUpdate(requestParameters: VendorApiVendorControllerUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث حالة التاجر
     * @param {VendorApiVendorControllerUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerUpdateStatus(requestParameters: VendorApiVendorControllerUpdateStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحديث تاجر (للإدارة)
     * @param {VendorApiVendorControllerUpdateVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    vendorControllerUpdateVendor(requestParameters: VendorApiVendorControllerUpdateVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for vendorControllerCreate operation in VendorApi.
 */
export interface VendorApiVendorControllerCreateRequest {
    readonly createVendorDto: CreateVendorDto
}

/**
 * Request parameters for vendorControllerCreateSettlement operation in VendorApi.
 */
export interface VendorApiVendorControllerCreateSettlementRequest {
    readonly vendorControllerCreateSettlementRequest: VendorControllerCreateSettlementRequest
}

/**
 * Request parameters for vendorControllerFindAll operation in VendorApi.
 */
export interface VendorApiVendorControllerFindAllRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for vendorControllerFindOne operation in VendorApi.
 */
export interface VendorApiVendorControllerFindOneRequest {
    readonly id: string
}

/**
 * Request parameters for vendorControllerGetSales operation in VendorApi.
 */
export interface VendorApiVendorControllerGetSalesRequest {
    readonly limit: number
}

/**
 * Request parameters for vendorControllerRequestAccountDeletion operation in VendorApi.
 */
export interface VendorApiVendorControllerRequestAccountDeletionRequest {
    readonly vendorControllerRequestAccountDeletionRequest: VendorControllerRequestAccountDeletionRequest
}

/**
 * Request parameters for vendorControllerResetPassword operation in VendorApi.
 */
export interface VendorApiVendorControllerResetPasswordRequest {
    readonly id: string
}

/**
 * Request parameters for vendorControllerUpdate operation in VendorApi.
 */
export interface VendorApiVendorControllerUpdateRequest {
    readonly updateVendorDto: UpdateVendorDto
}

/**
 * Request parameters for vendorControllerUpdateStatus operation in VendorApi.
 */
export interface VendorApiVendorControllerUpdateStatusRequest {
    readonly id: string
}

/**
 * Request parameters for vendorControllerUpdateVendor operation in VendorApi.
 */
export interface VendorApiVendorControllerUpdateVendorRequest {
    readonly id: string

    readonly updateVendorDto: UpdateVendorDto
}

/**
 * VendorApi - object-oriented interface
 */
export class VendorApi extends BaseAPI implements VendorApiInterface {
    /**
     * 
     * @summary إنشاء تاجر جديد
     * @param {VendorApiVendorControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerCreate(requestParameters: VendorApiVendorControllerCreateRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerCreate(requestParameters.createVendorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلب تسوية مالية
     * @param {VendorApiVendorControllerCreateSettlementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerCreateSettlement(requestParameters: VendorApiVendorControllerCreateSettlementRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerCreateSettlement(requestParameters.vendorControllerCreateSettlementRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب كل التجار
     * @param {VendorApiVendorControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerFindAll(requestParameters: VendorApiVendorControllerFindAllRequest = {}, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerFindAll(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب تاجر محدد
     * @param {VendorApiVendorControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerFindOne(requestParameters: VendorApiVendorControllerFindOneRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerFindOne(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary كشف حساب التاجر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerGetAccountStatement(options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerGetAccountStatement(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary لوحة معلومات التاجر
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerGetDashboard(options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerGetDashboard(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary جلب بيانات التاجر الحالي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerGetProfile(options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل المبيعات
     * @param {VendorApiVendorControllerGetSalesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerGetSales(requestParameters: VendorApiVendorControllerGetSalesRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerGetSales(requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلبات التسوية المالية
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerGetSettlements(options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerGetSettlements(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلب حذف الحساب
     * @param {VendorApiVendorControllerRequestAccountDeletionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerRequestAccountDeletion(requestParameters: VendorApiVendorControllerRequestAccountDeletionRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerRequestAccountDeletion(requestParameters.vendorControllerRequestAccountDeletionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary إعادة تعيين كلمة مرور التاجر
     * @param {VendorApiVendorControllerResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerResetPassword(requestParameters: VendorApiVendorControllerResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerResetPassword(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث بيانات التاجر
     * @param {VendorApiVendorControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerUpdate(requestParameters: VendorApiVendorControllerUpdateRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerUpdate(requestParameters.updateVendorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث حالة التاجر
     * @param {VendorApiVendorControllerUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerUpdateStatus(requestParameters: VendorApiVendorControllerUpdateStatusRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerUpdateStatus(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحديث تاجر (للإدارة)
     * @param {VendorApiVendorControllerUpdateVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public vendorControllerUpdateVendor(requestParameters: VendorApiVendorControllerUpdateVendorRequest, options?: RawAxiosRequestConfig) {
        return VendorApiFp(this.configuration).vendorControllerUpdateVendor(requestParameters.id, requestParameters.updateVendorDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WalletApi - axios parameter creator
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * إلغاء طلب سحب قيد المعالجة
         * @summary إلغاء طلب سحب
         * @param {string} id معرّف طلب السحب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerCancelWithdrawal: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('walletControllerCancelWithdrawal', 'id', id)
            const localVarPath = `/wallet/withdraw/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إنشاء معاملة credit/debit يدوياً (admin only)
         * @summary إنشاء معاملة جديدة (للإدارة)
         * @param {CreateTransactionDto} createTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerCreateTransaction: async (createTransactionDto: CreateTransactionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTransactionDto' is not null or undefined
            assertParamExists('walletControllerCreateTransaction', 'createTransactionDto', createTransactionDto)
            const localVarPath = `/wallet/transaction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على الرصيد الحالي والرصيد المحجوز
         * @summary جلب رصيد المحفظة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetBalance: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على سجل جميع الفواتير المدفوعة
         * @summary سجل الفواتير المدفوعة
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetBills: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على قائمة طلبات السحب مع حالاتها
         * @summary طلبات السحب الخاصة بي
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetMyWithdrawals: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/withdraw/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على سجل جميع عمليات الشحن السابقة
         * @summary سجل عمليات الشحن
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTopupHistory: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/topup/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
         * @summary طرق الشحن المتاحة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTopupMethods: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/topup/methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تفاصيل معاملة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTransactionDetails: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('walletControllerGetTransactionDetails', 'id', id)
            const localVarPath = `/wallet/transaction/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على جميع معاملات المحفظة مع pagination
         * @summary جلب سجل المعاملات
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTransactions: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل التحويلات
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTransfers: async (cursor?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * الحصول على قائمة طرق السحب المدعومة
         * @summary طرق السحب المتاحة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetWithdrawMethods: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/withdraw/methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * حجز مبلغ من المحفظة لضمان الدفع
         * @summary حجز مبلغ (Escrow)
         * @param {WalletControllerHoldFundsRequest} walletControllerHoldFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerHoldFunds: async (walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerHoldFundsRequest' is not null or undefined
            assertParamExists('walletControllerHoldFunds', 'walletControllerHoldFundsRequest', walletControllerHoldFundsRequest)
            const localVarPath = `/wallet/hold`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerHoldFundsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * دفع الفواتير من المحفظة
         * @summary دفع فاتورة (كهرباء، ماء، إنترنت)
         * @param {WalletControllerPayBillRequest} walletControllerPayBillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerPayBill: async (walletControllerPayBillRequest: WalletControllerPayBillRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerPayBillRequest' is not null or undefined
            assertParamExists('walletControllerPayBill', 'walletControllerPayBillRequest', walletControllerPayBillRequest)
            const localVarPath = `/wallet/pay-bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerPayBillRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
         * @summary إرجاع المبلغ المحجوز
         * @param {WalletControllerRefundFundsRequest} walletControllerRefundFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerRefundFunds: async (walletControllerRefundFundsRequest: WalletControllerRefundFundsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerRefundFundsRequest' is not null or undefined
            assertParamExists('walletControllerRefundFunds', 'walletControllerRefundFundsRequest', walletControllerRefundFundsRequest)
            const localVarPath = `/wallet/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerRefundFundsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إطلاق المبلغ المحجوز بعد تأكيد الطلب
         * @summary إطلاق المبلغ المحجوز
         * @param {WalletControllerHoldFundsRequest} walletControllerHoldFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerReleaseFunds: async (walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerHoldFundsRequest' is not null or undefined
            assertParamExists('walletControllerReleaseFunds', 'walletControllerHoldFundsRequest', walletControllerHoldFundsRequest)
            const localVarPath = `/wallet/release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerHoldFundsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary طلب استرجاع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerRequestRefund: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/refund/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * إنشاء طلب سحب مبلغ إلى الحساب البنكي
         * @summary طلب سحب من المحفظة
         * @param {WalletControllerRequestWithdrawalRequest} walletControllerRequestWithdrawalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerRequestWithdrawal: async (walletControllerRequestWithdrawalRequest: WalletControllerRequestWithdrawalRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerRequestWithdrawalRequest' is not null or undefined
            assertParamExists('walletControllerRequestWithdrawal', 'walletControllerRequestWithdrawalRequest', walletControllerRequestWithdrawalRequest)
            const localVarPath = `/wallet/withdraw/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerRequestWithdrawalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * شحن المحفظة باستخدام بطاقة كريمي
         * @summary شحن المحفظة عبر كريمي
         * @param {WalletControllerTopupViaKuraimiRequest} walletControllerTopupViaKuraimiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerTopupViaKuraimi: async (walletControllerTopupViaKuraimiRequest: WalletControllerTopupViaKuraimiRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerTopupViaKuraimiRequest' is not null or undefined
            assertParamExists('walletControllerTopupViaKuraimi', 'walletControllerTopupViaKuraimiRequest', walletControllerTopupViaKuraimiRequest)
            const localVarPath = `/wallet/topup/kuraimi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerTopupViaKuraimiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary تحويل رصيد
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerTransferFunds: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/wallet/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
         * @summary التحقق من عملية الشحن
         * @param {WalletControllerVerifyTopupRequest} walletControllerVerifyTopupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerVerifyTopup: async (walletControllerVerifyTopupRequest: WalletControllerVerifyTopupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletControllerVerifyTopupRequest' is not null or undefined
            assertParamExists('walletControllerVerifyTopup', 'walletControllerVerifyTopupRequest', walletControllerVerifyTopupRequest)
            const localVarPath = `/wallet/topup/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(walletControllerVerifyTopupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * إلغاء طلب سحب قيد المعالجة
         * @summary إلغاء طلب سحب
         * @param {string} id معرّف طلب السحب
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerCancelWithdrawal(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerCancelWithdrawal(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerCancelWithdrawal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إنشاء معاملة credit/debit يدوياً (admin only)
         * @summary إنشاء معاملة جديدة (للإدارة)
         * @param {CreateTransactionDto} createTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerCreateTransaction(createTransactionDto: CreateTransactionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerCreateTransaction(createTransactionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerCreateTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على الرصيد الحالي والرصيد المحجوز
         * @summary جلب رصيد المحفظة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetBalance(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetBalance(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetBalance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على سجل جميع الفواتير المدفوعة
         * @summary سجل الفواتير المدفوعة
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetBills(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetBills(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetBills']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على قائمة طلبات السحب مع حالاتها
         * @summary طلبات السحب الخاصة بي
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetMyWithdrawals(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetMyWithdrawals(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetMyWithdrawals']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على سجل جميع عمليات الشحن السابقة
         * @summary سجل عمليات الشحن
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetTopupHistory(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetTopupHistory(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetTopupHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
         * @summary طرق الشحن المتاحة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetTopupMethods(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetTopupMethods(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetTopupMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تفاصيل معاملة
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetTransactionDetails(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetTransactionDetails(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetTransactionDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على جميع معاملات المحفظة مع pagination
         * @summary جلب سجل المعاملات
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetTransactions(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetTransactions(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل التحويلات
         * @param {string} [cursor] Cursor للصفحة التالية
         * @param {number} [limit] عدد العناصر
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetTransfers(cursor?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetTransfers(cursor, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetTransfers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * الحصول على قائمة طرق السحب المدعومة
         * @summary طرق السحب المتاحة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerGetWithdrawMethods(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerGetWithdrawMethods(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerGetWithdrawMethods']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * حجز مبلغ من المحفظة لضمان الدفع
         * @summary حجز مبلغ (Escrow)
         * @param {WalletControllerHoldFundsRequest} walletControllerHoldFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerHoldFunds(walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerHoldFunds(walletControllerHoldFundsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerHoldFunds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * دفع الفواتير من المحفظة
         * @summary دفع فاتورة (كهرباء، ماء، إنترنت)
         * @param {WalletControllerPayBillRequest} walletControllerPayBillRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerPayBill(walletControllerPayBillRequest: WalletControllerPayBillRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerPayBill(walletControllerPayBillRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerPayBill']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
         * @summary إرجاع المبلغ المحجوز
         * @param {WalletControllerRefundFundsRequest} walletControllerRefundFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerRefundFunds(walletControllerRefundFundsRequest: WalletControllerRefundFundsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerRefundFunds(walletControllerRefundFundsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerRefundFunds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إطلاق المبلغ المحجوز بعد تأكيد الطلب
         * @summary إطلاق المبلغ المحجوز
         * @param {WalletControllerHoldFundsRequest} walletControllerHoldFundsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerReleaseFunds(walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerReleaseFunds(walletControllerHoldFundsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerReleaseFunds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary طلب استرجاع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerRequestRefund(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerRequestRefund(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerRequestRefund']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * إنشاء طلب سحب مبلغ إلى الحساب البنكي
         * @summary طلب سحب من المحفظة
         * @param {WalletControllerRequestWithdrawalRequest} walletControllerRequestWithdrawalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerRequestWithdrawal(walletControllerRequestWithdrawalRequest: WalletControllerRequestWithdrawalRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerRequestWithdrawal(walletControllerRequestWithdrawalRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerRequestWithdrawal']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * شحن المحفظة باستخدام بطاقة كريمي
         * @summary شحن المحفظة عبر كريمي
         * @param {WalletControllerTopupViaKuraimiRequest} walletControllerTopupViaKuraimiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerTopupViaKuraimi(walletControllerTopupViaKuraimiRequest: WalletControllerTopupViaKuraimiRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerTopupViaKuraimi(walletControllerTopupViaKuraimiRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerTopupViaKuraimi']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary تحويل رصيد
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerTransferFunds(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerTransferFunds(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerTransferFunds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
         * @summary التحقق من عملية الشحن
         * @param {WalletControllerVerifyTopupRequest} walletControllerVerifyTopupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async walletControllerVerifyTopup(walletControllerVerifyTopupRequest: WalletControllerVerifyTopupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.walletControllerVerifyTopup(walletControllerVerifyTopupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletApi.walletControllerVerifyTopup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletApi - factory interface
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * إلغاء طلب سحب قيد المعالجة
         * @summary إلغاء طلب سحب
         * @param {WalletApiWalletControllerCancelWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerCancelWithdrawal(requestParameters: WalletApiWalletControllerCancelWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerCancelWithdrawal(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * إنشاء معاملة credit/debit يدوياً (admin only)
         * @summary إنشاء معاملة جديدة (للإدارة)
         * @param {WalletApiWalletControllerCreateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerCreateTransaction(requestParameters: WalletApiWalletControllerCreateTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerCreateTransaction(requestParameters.createTransactionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على الرصيد الحالي والرصيد المحجوز
         * @summary جلب رصيد المحفظة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetBalance(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetBalance(options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على سجل جميع الفواتير المدفوعة
         * @summary سجل الفواتير المدفوعة
         * @param {WalletApiWalletControllerGetBillsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetBills(requestParameters: WalletApiWalletControllerGetBillsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetBills(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على قائمة طلبات السحب مع حالاتها
         * @summary طلبات السحب الخاصة بي
         * @param {WalletApiWalletControllerGetMyWithdrawalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetMyWithdrawals(requestParameters: WalletApiWalletControllerGetMyWithdrawalsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetMyWithdrawals(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على سجل جميع عمليات الشحن السابقة
         * @summary سجل عمليات الشحن
         * @param {WalletApiWalletControllerGetTopupHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTopupHistory(requestParameters: WalletApiWalletControllerGetTopupHistoryRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetTopupHistory(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
         * @summary طرق الشحن المتاحة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTopupMethods(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetTopupMethods(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تفاصيل معاملة
         * @param {WalletApiWalletControllerGetTransactionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTransactionDetails(requestParameters: WalletApiWalletControllerGetTransactionDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetTransactionDetails(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على جميع معاملات المحفظة مع pagination
         * @summary جلب سجل المعاملات
         * @param {WalletApiWalletControllerGetTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTransactions(requestParameters: WalletApiWalletControllerGetTransactionsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetTransactions(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل التحويلات
         * @param {WalletApiWalletControllerGetTransfersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetTransfers(requestParameters: WalletApiWalletControllerGetTransfersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetTransfers(requestParameters.cursor, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * الحصول على قائمة طرق السحب المدعومة
         * @summary طرق السحب المتاحة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerGetWithdrawMethods(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerGetWithdrawMethods(options).then((request) => request(axios, basePath));
        },
        /**
         * حجز مبلغ من المحفظة لضمان الدفع
         * @summary حجز مبلغ (Escrow)
         * @param {WalletApiWalletControllerHoldFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerHoldFunds(requestParameters: WalletApiWalletControllerHoldFundsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerHoldFunds(requestParameters.walletControllerHoldFundsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * دفع الفواتير من المحفظة
         * @summary دفع فاتورة (كهرباء، ماء، إنترنت)
         * @param {WalletApiWalletControllerPayBillRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerPayBill(requestParameters: WalletApiWalletControllerPayBillRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerPayBill(requestParameters.walletControllerPayBillRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
         * @summary إرجاع المبلغ المحجوز
         * @param {WalletApiWalletControllerRefundFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerRefundFunds(requestParameters: WalletApiWalletControllerRefundFundsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerRefundFunds(requestParameters.walletControllerRefundFundsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * إطلاق المبلغ المحجوز بعد تأكيد الطلب
         * @summary إطلاق المبلغ المحجوز
         * @param {WalletApiWalletControllerReleaseFundsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerReleaseFunds(requestParameters: WalletApiWalletControllerReleaseFundsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerReleaseFunds(requestParameters.walletControllerHoldFundsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary طلب استرجاع
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerRequestRefund(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerRequestRefund(options).then((request) => request(axios, basePath));
        },
        /**
         * إنشاء طلب سحب مبلغ إلى الحساب البنكي
         * @summary طلب سحب من المحفظة
         * @param {WalletApiWalletControllerRequestWithdrawalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerRequestWithdrawal(requestParameters: WalletApiWalletControllerRequestWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerRequestWithdrawal(requestParameters.walletControllerRequestWithdrawalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * شحن المحفظة باستخدام بطاقة كريمي
         * @summary شحن المحفظة عبر كريمي
         * @param {WalletApiWalletControllerTopupViaKuraimiRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerTopupViaKuraimi(requestParameters: WalletApiWalletControllerTopupViaKuraimiRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerTopupViaKuraimi(requestParameters.walletControllerTopupViaKuraimiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary تحويل رصيد
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerTransferFunds(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerTransferFunds(options).then((request) => request(axios, basePath));
        },
        /**
         * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
         * @summary التحقق من عملية الشحن
         * @param {WalletApiWalletControllerVerifyTopupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        walletControllerVerifyTopup(requestParameters: WalletApiWalletControllerVerifyTopupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.walletControllerVerifyTopup(requestParameters.walletControllerVerifyTopupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletApi - interface
 */
export interface WalletApiInterface {
    /**
     * إلغاء طلب سحب قيد المعالجة
     * @summary إلغاء طلب سحب
     * @param {WalletApiWalletControllerCancelWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerCancelWithdrawal(requestParameters: WalletApiWalletControllerCancelWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إنشاء معاملة credit/debit يدوياً (admin only)
     * @summary إنشاء معاملة جديدة (للإدارة)
     * @param {WalletApiWalletControllerCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerCreateTransaction(requestParameters: WalletApiWalletControllerCreateTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على الرصيد الحالي والرصيد المحجوز
     * @summary جلب رصيد المحفظة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetBalance(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على سجل جميع الفواتير المدفوعة
     * @summary سجل الفواتير المدفوعة
     * @param {WalletApiWalletControllerGetBillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetBills(requestParameters?: WalletApiWalletControllerGetBillsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على قائمة طلبات السحب مع حالاتها
     * @summary طلبات السحب الخاصة بي
     * @param {WalletApiWalletControllerGetMyWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetMyWithdrawals(requestParameters?: WalletApiWalletControllerGetMyWithdrawalsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على سجل جميع عمليات الشحن السابقة
     * @summary سجل عمليات الشحن
     * @param {WalletApiWalletControllerGetTopupHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetTopupHistory(requestParameters?: WalletApiWalletControllerGetTopupHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
     * @summary طرق الشحن المتاحة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetTopupMethods(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تفاصيل معاملة
     * @param {WalletApiWalletControllerGetTransactionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetTransactionDetails(requestParameters: WalletApiWalletControllerGetTransactionDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على جميع معاملات المحفظة مع pagination
     * @summary جلب سجل المعاملات
     * @param {WalletApiWalletControllerGetTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetTransactions(requestParameters?: WalletApiWalletControllerGetTransactionsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل التحويلات
     * @param {WalletApiWalletControllerGetTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetTransfers(requestParameters?: WalletApiWalletControllerGetTransfersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * الحصول على قائمة طرق السحب المدعومة
     * @summary طرق السحب المتاحة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerGetWithdrawMethods(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * حجز مبلغ من المحفظة لضمان الدفع
     * @summary حجز مبلغ (Escrow)
     * @param {WalletApiWalletControllerHoldFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerHoldFunds(requestParameters: WalletApiWalletControllerHoldFundsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * دفع الفواتير من المحفظة
     * @summary دفع فاتورة (كهرباء، ماء، إنترنت)
     * @param {WalletApiWalletControllerPayBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerPayBill(requestParameters: WalletApiWalletControllerPayBillRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
     * @summary إرجاع المبلغ المحجوز
     * @param {WalletApiWalletControllerRefundFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerRefundFunds(requestParameters: WalletApiWalletControllerRefundFundsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إطلاق المبلغ المحجوز بعد تأكيد الطلب
     * @summary إطلاق المبلغ المحجوز
     * @param {WalletApiWalletControllerReleaseFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerReleaseFunds(requestParameters: WalletApiWalletControllerReleaseFundsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary طلب استرجاع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerRequestRefund(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * إنشاء طلب سحب مبلغ إلى الحساب البنكي
     * @summary طلب سحب من المحفظة
     * @param {WalletApiWalletControllerRequestWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerRequestWithdrawal(requestParameters: WalletApiWalletControllerRequestWithdrawalRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * شحن المحفظة باستخدام بطاقة كريمي
     * @summary شحن المحفظة عبر كريمي
     * @param {WalletApiWalletControllerTopupViaKuraimiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerTopupViaKuraimi(requestParameters: WalletApiWalletControllerTopupViaKuraimiRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary تحويل رصيد
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerTransferFunds(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
     * @summary التحقق من عملية الشحن
     * @param {WalletApiWalletControllerVerifyTopupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    walletControllerVerifyTopup(requestParameters: WalletApiWalletControllerVerifyTopupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for walletControllerCancelWithdrawal operation in WalletApi.
 */
export interface WalletApiWalletControllerCancelWithdrawalRequest {
    /**
     * معرّف طلب السحب
     */
    readonly id: string
}

/**
 * Request parameters for walletControllerCreateTransaction operation in WalletApi.
 */
export interface WalletApiWalletControllerCreateTransactionRequest {
    readonly createTransactionDto: CreateTransactionDto
}

/**
 * Request parameters for walletControllerGetBills operation in WalletApi.
 */
export interface WalletApiWalletControllerGetBillsRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for walletControllerGetMyWithdrawals operation in WalletApi.
 */
export interface WalletApiWalletControllerGetMyWithdrawalsRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for walletControllerGetTopupHistory operation in WalletApi.
 */
export interface WalletApiWalletControllerGetTopupHistoryRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for walletControllerGetTransactionDetails operation in WalletApi.
 */
export interface WalletApiWalletControllerGetTransactionDetailsRequest {
    readonly id: string
}

/**
 * Request parameters for walletControllerGetTransactions operation in WalletApi.
 */
export interface WalletApiWalletControllerGetTransactionsRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for walletControllerGetTransfers operation in WalletApi.
 */
export interface WalletApiWalletControllerGetTransfersRequest {
    /**
     * Cursor للصفحة التالية
     */
    readonly cursor?: string

    /**
     * عدد العناصر
     */
    readonly limit?: number
}

/**
 * Request parameters for walletControllerHoldFunds operation in WalletApi.
 */
export interface WalletApiWalletControllerHoldFundsRequest {
    readonly walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest
}

/**
 * Request parameters for walletControllerPayBill operation in WalletApi.
 */
export interface WalletApiWalletControllerPayBillRequest {
    readonly walletControllerPayBillRequest: WalletControllerPayBillRequest
}

/**
 * Request parameters for walletControllerRefundFunds operation in WalletApi.
 */
export interface WalletApiWalletControllerRefundFundsRequest {
    readonly walletControllerRefundFundsRequest: WalletControllerRefundFundsRequest
}

/**
 * Request parameters for walletControllerReleaseFunds operation in WalletApi.
 */
export interface WalletApiWalletControllerReleaseFundsRequest {
    readonly walletControllerHoldFundsRequest: WalletControllerHoldFundsRequest
}

/**
 * Request parameters for walletControllerRequestWithdrawal operation in WalletApi.
 */
export interface WalletApiWalletControllerRequestWithdrawalRequest {
    readonly walletControllerRequestWithdrawalRequest: WalletControllerRequestWithdrawalRequest
}

/**
 * Request parameters for walletControllerTopupViaKuraimi operation in WalletApi.
 */
export interface WalletApiWalletControllerTopupViaKuraimiRequest {
    readonly walletControllerTopupViaKuraimiRequest: WalletControllerTopupViaKuraimiRequest
}

/**
 * Request parameters for walletControllerVerifyTopup operation in WalletApi.
 */
export interface WalletApiWalletControllerVerifyTopupRequest {
    readonly walletControllerVerifyTopupRequest: WalletControllerVerifyTopupRequest
}

/**
 * WalletApi - object-oriented interface
 */
export class WalletApi extends BaseAPI implements WalletApiInterface {
    /**
     * إلغاء طلب سحب قيد المعالجة
     * @summary إلغاء طلب سحب
     * @param {WalletApiWalletControllerCancelWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerCancelWithdrawal(requestParameters: WalletApiWalletControllerCancelWithdrawalRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerCancelWithdrawal(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إنشاء معاملة credit/debit يدوياً (admin only)
     * @summary إنشاء معاملة جديدة (للإدارة)
     * @param {WalletApiWalletControllerCreateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerCreateTransaction(requestParameters: WalletApiWalletControllerCreateTransactionRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerCreateTransaction(requestParameters.createTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على الرصيد الحالي والرصيد المحجوز
     * @summary جلب رصيد المحفظة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetBalance(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetBalance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على سجل جميع الفواتير المدفوعة
     * @summary سجل الفواتير المدفوعة
     * @param {WalletApiWalletControllerGetBillsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetBills(requestParameters: WalletApiWalletControllerGetBillsRequest = {}, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetBills(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على قائمة طلبات السحب مع حالاتها
     * @summary طلبات السحب الخاصة بي
     * @param {WalletApiWalletControllerGetMyWithdrawalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetMyWithdrawals(requestParameters: WalletApiWalletControllerGetMyWithdrawalsRequest = {}, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetMyWithdrawals(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على سجل جميع عمليات الشحن السابقة
     * @summary سجل عمليات الشحن
     * @param {WalletApiWalletControllerGetTopupHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetTopupHistory(requestParameters: WalletApiWalletControllerGetTopupHistoryRequest = {}, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetTopupHistory(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على قائمة طرق الشحن المدعومة (كريمي، بطاقة، وكيل)
     * @summary طرق الشحن المتاحة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetTopupMethods(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetTopupMethods(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تفاصيل معاملة
     * @param {WalletApiWalletControllerGetTransactionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetTransactionDetails(requestParameters: WalletApiWalletControllerGetTransactionDetailsRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetTransactionDetails(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على جميع معاملات المحفظة مع pagination
     * @summary جلب سجل المعاملات
     * @param {WalletApiWalletControllerGetTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetTransactions(requestParameters: WalletApiWalletControllerGetTransactionsRequest = {}, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetTransactions(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل التحويلات
     * @param {WalletApiWalletControllerGetTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetTransfers(requestParameters: WalletApiWalletControllerGetTransfersRequest = {}, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetTransfers(requestParameters.cursor, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * الحصول على قائمة طرق السحب المدعومة
     * @summary طرق السحب المتاحة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerGetWithdrawMethods(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerGetWithdrawMethods(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * حجز مبلغ من المحفظة لضمان الدفع
     * @summary حجز مبلغ (Escrow)
     * @param {WalletApiWalletControllerHoldFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerHoldFunds(requestParameters: WalletApiWalletControllerHoldFundsRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerHoldFunds(requestParameters.walletControllerHoldFundsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * دفع الفواتير من المحفظة
     * @summary دفع فاتورة (كهرباء، ماء، إنترنت)
     * @param {WalletApiWalletControllerPayBillRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerPayBill(requestParameters: WalletApiWalletControllerPayBillRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerPayBill(requestParameters.walletControllerPayBillRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إرجاع المبلغ إلى المحفظة عند إلغاء الطلب
     * @summary إرجاع المبلغ المحجوز
     * @param {WalletApiWalletControllerRefundFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerRefundFunds(requestParameters: WalletApiWalletControllerRefundFundsRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerRefundFunds(requestParameters.walletControllerRefundFundsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إطلاق المبلغ المحجوز بعد تأكيد الطلب
     * @summary إطلاق المبلغ المحجوز
     * @param {WalletApiWalletControllerReleaseFundsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerReleaseFunds(requestParameters: WalletApiWalletControllerReleaseFundsRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerReleaseFunds(requestParameters.walletControllerHoldFundsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary طلب استرجاع
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerRequestRefund(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerRequestRefund(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * إنشاء طلب سحب مبلغ إلى الحساب البنكي
     * @summary طلب سحب من المحفظة
     * @param {WalletApiWalletControllerRequestWithdrawalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerRequestWithdrawal(requestParameters: WalletApiWalletControllerRequestWithdrawalRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerRequestWithdrawal(requestParameters.walletControllerRequestWithdrawalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * شحن المحفظة باستخدام بطاقة كريمي
     * @summary شحن المحفظة عبر كريمي
     * @param {WalletApiWalletControllerTopupViaKuraimiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerTopupViaKuraimi(requestParameters: WalletApiWalletControllerTopupViaKuraimiRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerTopupViaKuraimi(requestParameters.walletControllerTopupViaKuraimiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary تحويل رصيد
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerTransferFunds(options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerTransferFunds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * التحقق من نجاح عملية الشحن عبر معرّف المعاملة
     * @summary التحقق من عملية الشحن
     * @param {WalletApiWalletControllerVerifyTopupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public walletControllerVerifyTopup(requestParameters: WalletApiWalletControllerVerifyTopupRequest, options?: RawAxiosRequestConfig) {
        return WalletApiFp(this.configuration).walletControllerVerifyTopup(requestParameters.walletControllerVerifyTopupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WalletV2Api - axios parameter creator
 */
export const WalletV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary تطبيق قسيمة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerApplyCoupon: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/wallet/coupons/apply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary سجل القسائم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerGetCouponsHistory: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/wallet/coupons/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary قسائمي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerGetMyCoupons: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/wallet/coupons/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary اشتراكاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerGetMySubscriptions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2/wallet/subscriptions/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletV2Api - functional programming interface
 */
export const WalletV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary تطبيق قسيمة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2WalletControllerApplyCoupon(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2WalletControllerApplyCoupon(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletV2Api.v2WalletControllerApplyCoupon']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary سجل القسائم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2WalletControllerGetCouponsHistory(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2WalletControllerGetCouponsHistory(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletV2Api.v2WalletControllerGetCouponsHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary قسائمي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2WalletControllerGetMyCoupons(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2WalletControllerGetMyCoupons(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletV2Api.v2WalletControllerGetMyCoupons']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary اشتراكاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2WalletControllerGetMySubscriptions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2WalletControllerGetMySubscriptions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WalletV2Api.v2WalletControllerGetMySubscriptions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WalletV2Api - factory interface
 */
export const WalletV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletV2ApiFp(configuration)
    return {
        /**
         * 
         * @summary تطبيق قسيمة
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerApplyCoupon(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v2WalletControllerApplyCoupon(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary سجل القسائم
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerGetCouponsHistory(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v2WalletControllerGetCouponsHistory(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary قسائمي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerGetMyCoupons(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v2WalletControllerGetMyCoupons(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary اشتراكاتي
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2WalletControllerGetMySubscriptions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v2WalletControllerGetMySubscriptions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WalletV2Api - interface
 */
export interface WalletV2ApiInterface {
    /**
     * 
     * @summary تطبيق قسيمة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WalletControllerApplyCoupon(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary سجل القسائم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WalletControllerGetCouponsHistory(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary قسائمي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WalletControllerGetMyCoupons(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary اشتراكاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2WalletControllerGetMySubscriptions(options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * WalletV2Api - object-oriented interface
 */
export class WalletV2Api extends BaseAPI implements WalletV2ApiInterface {
    /**
     * 
     * @summary تطبيق قسيمة
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public v2WalletControllerApplyCoupon(options?: RawAxiosRequestConfig) {
        return WalletV2ApiFp(this.configuration).v2WalletControllerApplyCoupon(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary سجل القسائم
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public v2WalletControllerGetCouponsHistory(options?: RawAxiosRequestConfig) {
        return WalletV2ApiFp(this.configuration).v2WalletControllerGetCouponsHistory(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary قسائمي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public v2WalletControllerGetMyCoupons(options?: RawAxiosRequestConfig) {
        return WalletV2ApiFp(this.configuration).v2WalletControllerGetMyCoupons(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary اشتراكاتي
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public v2WalletControllerGetMySubscriptions(options?: RawAxiosRequestConfig) {
        return WalletV2ApiFp(this.configuration).v2WalletControllerGetMySubscriptions(options).then((request) => request(this.axios, this.basePath));
    }
}



