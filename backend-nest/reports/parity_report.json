{
  "generated_at": "2025-10-18T15:00:21.966Z",
  "summary": {
    "total_reviewed": 506,
    "matched": 239,
    "undocumented": 60,
    "mismatch": 149,
    "missing_fields": 58,
    "wrong_status": 0,
    "parity_gap_percentage": 52.77,
    "parity_score_percentage": 47.23
  },
  "details": [
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/dashboard",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ users: { total: number; active: number; }; orders: { total: number; pending: number; }; drivers: { total: number; available: number; }; vendors: { total: number; }; stores: { active: number; }; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 29
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/dashboard"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/stats/today",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ newUsers: number; newOrders: number; deliveredOrders: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 35
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stats/today"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/stats/financial",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/admin/admin.service\").FinancialStats",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 41
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stats/financial"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/dashboard/orders-by-status",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 47
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/dashboard/orders-by-status"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/dashboard/revenue",
        "auth_guard": "",
        "dto_in": "@Query: 'daily' | 'weekly' | 'monthly', @Query: string, @Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 56
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/dashboard/revenue"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/dashboard/live-metrics",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ activeOrders: number; activeDrivers: number; recentOrders: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 66
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/dashboard/live-metrics"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: boolean, @Query: number, @Query: number",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; page: number; limit: number; totalPages: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 74
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ driver: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver & Required<{ _id: unknown; }> & { __v: number; }; stats: { totalOrders: number; completedOrders: number; cancelledOrders: number; }; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 85
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/performance",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 91
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/performance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/financials",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ wallet: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 101
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/financials"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:id/ban",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 107
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/ban"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:id/unban",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 117
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/unban"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/drivers/:id/adjust-balance",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { amount: number; reason: string; type: 'credit' | 'debit' }",
        "dto_out": "{ success: boolean; newBalance: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 126
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/adjust-balance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/withdrawals",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; totalPages: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 144
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/withdrawals"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/withdrawals/pending",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 155
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/withdrawals/pending"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/withdrawals/:id/approve",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { transactionRef?: string; notes?: string }",
        "dto_out": "{ success: boolean; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 161
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/withdrawals/{id}/approve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/withdrawals/:id/reject",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 176
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/withdrawals/{id}/reject"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/stores/pending",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 192
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stores/pending"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/stores/:id/approve",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 198
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stores/{id}/approve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/stores/:id/reject",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 207
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stores/{id}/reject"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/stores/:id/suspend",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 217
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stores/{id}/suspend"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/vendors/pending",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/vendor/entities/vendor.entity\").Vendor, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/vendor/entities/vendor.entity\").Vendor & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 229
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/vendors/pending"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/vendors/:id/approve",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 235
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/vendors/{id}/approve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/vendors/:id/reject",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 244
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/vendors/{id}/reject"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/vendors/:id/suspend",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 254
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/vendors/{id}/suspend"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/users",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: boolean, @Query: number, @Query: number",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; page: number; limit: number; totalPages: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 266
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/users/:id",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ user: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User & Required<{ _id: unknown; }> & { __v: number; }; orderStats: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 277
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/users/:id/ban",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 283
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users/{id}/ban"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/users/:id/unban",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 293
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users/{id}/unban"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/daily",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ date: Date; orders: number; revenue: any; newUsers: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 304
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/daily"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/weekly",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 310
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/weekly"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/monthly",
        "auth_guard": "",
        "dto_in": "@Query: number, @Query: number",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 319
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/monthly"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/export",
        "auth_guard": "",
        "dto_in": "@Query: 'orders' | 'revenue' | 'drivers' | 'stores', @Query: string, @Query: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 328
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/export"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/notifications/send-bulk",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      title: string;\r\n      body: string;\r\n      userType?: 'all' | 'drivers' | 'vendors' | 'customers';\r\n      userIds?: string[];\r\n    }",
        "dto_out": "{ success: boolean; message: string; recipients: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 340
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/notifications/send-bulk"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/assets",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 363
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/assets"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/assets",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      type: string;\r\n      name: string;\r\n      serialNumber?: string;\r\n      value: number;\r\n    }",
        "dto_out": "{ success: boolean; message: string; asset: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 369
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/assets"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:driverId/assets/:assetId/assign",
        "auth_guard": "",
        "dto_in": "@Param: string, @Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 384
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{driverId}/assets/{assetId}/assign"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:driverId/assets/:assetId/return",
        "auth_guard": "",
        "dto_in": "@Param: string, @Param: string, @Body: { condition?: string; notes?: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 394
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{driverId}/assets/{assetId}/return"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/documents",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ documents: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 413
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/documents"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:id/documents/:docId/verify",
        "auth_guard": "",
        "dto_in": "@Param: string, @Param: string, @Body: { verified: boolean; notes?: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 419
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/documents/{docId}/verify"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/drivers/:id/documents/:docId",
        "auth_guard": "",
        "dto_in": "@Param: string, @Param: string, @Body: { status: string; expiryDate?: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 436
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/documents/{docId}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/attendance",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; summary: { present: number; absent: number; late: number; }; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 449
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/attendance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/attendance/summary",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 459
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/attendance/summary"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:id/attendance/adjust",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: {\r\n      date: string;\r\n      checkIn?: string;\r\n      checkOut?: string;\r\n      reason: string;\r\n    }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 467
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/attendance/adjust"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/shifts",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 485
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/shifts"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/shifts",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      name: string;\r\n      startTime: string;\r\n      endTime: string;\r\n      days: number[];\r\n    }",
        "dto_out": "{ success: boolean; message: string; shift: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 491
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/shifts"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/shifts/:id",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 506
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/shifts/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/shifts/:shiftId/assign/:driverId",
        "auth_guard": "",
        "dto_in": "@Param: string, @Param: string, @Body: { startDate: string; endDate?: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 516
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/shifts/{shiftId}/assign/{driverId}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/shifts",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 533
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/shifts"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/leave-requests",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 541
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/leave-requests"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/drivers/leave-requests/:id/approve",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 551
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/leave-requests/{id}/approve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/drivers/leave-requests/:id/reject",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 560
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/leave-requests/{id}/reject"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/:id/leave-balance",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ annual: number; sick: number; emergency: number; used: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 570
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/leave-balance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/drivers/:id/leave-balance/adjust",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { days: number; reason: string; type: 'add' | 'deduct' }",
        "dto_out": "{ success: boolean; message: string; newBalance: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 576
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/leave-balance/adjust"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/quality/reviews",
        "auth_guard": "",
        "dto_in": "@Query: 'driver' | 'store' | 'order', @Query: number",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 594
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/quality/reviews"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/quality/reviews",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      type: 'driver' | 'store' | 'order';\r\n      entityId: string;\r\n      rating: number;\r\n      comments: string;\r\n    }",
        "dto_out": "{ success: boolean; message: string; review: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 603
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/quality/reviews"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/quality/metrics",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ orderRating: any; driverRating: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 618
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/quality/metrics"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/support/tickets",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 629
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/support/tickets"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/support/tickets/:id/assign",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { assigneeId: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 640
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/support/tickets/{id}/assign"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/support/tickets/:id/resolve",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { resolution: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 650
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/support/tickets/{id}/resolve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/support/sla-metrics",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ averageResponseTime: number; averageResolutionTime: number; breachedSLA: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 660
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/support/sla-metrics"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/settings",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ general: {}; payment: {}; delivery: {}; commission: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 668
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/settings"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/settings",
        "auth_guard": "",
        "dto_in": "@Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 674
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/settings"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/settings/feature-flags",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ flags: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 683
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/settings/feature-flags"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/settings/feature-flags/:flag",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { enabled: boolean }",
        "dto_out": "{ success: boolean; flag: string; enabled: boolean; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 689
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/settings/feature-flags/{flag}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/backup/create",
        "auth_guard": "",
        "dto_in": "@Body: { collections?: string[]; description?: string }",
        "dto_out": "{ success: boolean; message: string; backupId: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 701
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/backup/create"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/backup/list",
        "auth_guard": "",
        "dto_in": "@Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 710
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/backup/list"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/backup/:id/restore",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 719
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/backup/{id}/restore"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/backup/:id/download",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ url: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 728
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/backup/{id}/download"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/data-deletion/requests",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 736
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/data-deletion/requests"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/data-deletion/:id/approve",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 744
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/data-deletion/{id}/approve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/data-deletion/:id/reject",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 753
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/data-deletion/{id}/reject"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/security/password-attempts",
        "auth_guard": "",
        "dto_in": "@Query: number",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 765
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/security/password-attempts"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/security/reset-password/:userId",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { tempPassword?: string }",
        "dto_out": "{ success: boolean; message: string; tempPassword: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 773
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/security/reset-password/{userId}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/security/unlock-account/:userId",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 783
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/security/unlock-account/{userId}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/activation/generate",
        "auth_guard": "",
        "dto_in": "@Body: { count: number; expiryDays?: number; userType?: string }",
        "dto_out": "{ success: boolean; codes: string[]; count: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 794
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/activation/generate"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/activation/codes",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 808
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/activation/codes"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 818
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers/:id",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ marketer: {}; stats: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 828
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/marketers",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      fullName: string;\r\n      phone: string;\r\n      email?: string;\r\n      territory?: string;\r\n    }",
        "dto_out": "{ success: boolean; message: string; marketer: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 834
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/marketers/:id",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 849
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers/:id/performance",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "{ storesOnboarded: number; totalCommission: number; activeStores: number; periodRevenue: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 859
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}/performance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers/:id/stores",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 873
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}/stores"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers/:id/commissions",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string",
        "dto_out": "{ data: never[]; total: number; totalAmount: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 879
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}/commissions"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/marketers/:id/activate",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 888
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}/activate"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/marketers/:id/deactivate",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 897
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}/deactivate"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/marketers/:id/adjust-commission",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { rate: number; reason: string }",
        "dto_out": "{ success: boolean; message: string; newRate: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 911
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/{id}/adjust-commission"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers/statistics",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ totalMarketers: number; activeMarketers: number; totalStoresOnboarded: number; totalCommissionsPaid: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 926
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/statistics"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/marketers/export",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 935
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/marketers/export"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/onboarding/applications",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 943
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/onboarding/applications"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/onboarding/:id/details",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ application: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 959
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/onboarding/{id}/details"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/onboarding/:id/approve",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 965
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/onboarding/{id}/approve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/onboarding/:id/reject",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 974
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/onboarding/{id}/reject"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/onboarding/statistics",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ pending: number; approved: number; rejected: number; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 988
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/onboarding/statistics"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/commission-plans",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 996
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/commission-plans"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/commission-plans",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      name: string;\r\n      type: string;\r\n      rate: number;\r\n      minOrders?: number;\r\n      maxOrders?: number;\r\n    }",
        "dto_out": "{ success: boolean; message: string; plan: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1002
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/commission-plans"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/commission-plans/:id",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1018
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/commission-plans/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/admin-users",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1030
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/admin-users"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/admin-users",
        "auth_guard": "",
        "dto_in": "@Body: { fullName: string; email: string; role: string; password: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1036
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/admin-users"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/admin-users/:id",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1045
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/admin-users/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/admin-users/:id/reset-password",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; tempPassword: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1051
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/admin-users/{id}/reset-password"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/audit-logs",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string, @Query: string, @Query: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1059
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/audit-logs"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/audit-logs/:id",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ log: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1070
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/audit-logs/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/system/health",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ status: string; database: string; redis: string; uptime: number; memory: NodeJS.MemoryUsage; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1078
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/system/health"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/system/metrics",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ cpu: number; memory: NodeJS.MemoryUsage; uptime: number; activeConnections: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1084
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/system/metrics"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/system/errors",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1090
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/system/errors"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/database/stats",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ users: number; orders: number; drivers: number; stores: number; vendors: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1098
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/database/stats"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/database/cleanup",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1104
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/database/cleanup"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/payments",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string, @Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1112
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/payments"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/payments/:id",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ payment: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1123
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/payments/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/payments/:id/refund",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { reason: string; amount?: number }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1129
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/payments/{id}/refund"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/promotions/active",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1141
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/promotions/active"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/promotions/:id/pause",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1147
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/promotions/{id}/pause"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/promotions/:id/resume",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1153
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/promotions/{id}/resume"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/coupons/usage",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ totalUsage: number; uniqueUsers: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1161
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/coupons/usage"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/coupons/:code/deactivate",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1167
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/coupons/{code}/deactivate"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/notifications/history",
        "auth_guard": "",
        "dto_in": "@Query: number, @Query: number",
        "dto_out": "{ data: never[]; total: number; page: number; limit: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1175
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/notifications/history"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/notifications/stats",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ sent: number; delivered: number; failed: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1184
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/notifications/stats"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/orders/stats/by-city",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ data: any[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1192
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/orders/stats/by-city"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/orders/stats/by-payment-method",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: any[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1201
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/orders/stats/by-payment-method"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/orders/disputed",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1207
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/orders/disputed"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/orders/:id/dispute/resolve",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { resolution: string; refundAmount?: number }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1213
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/orders/{id}/dispute/resolve"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/stats/top-performers",
        "auth_guard": "",
        "dto_in": "@Query: number",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1225
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/stats/top-performers"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/drivers/stats/by-status",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: any[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1231
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/stats/by-status"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/drivers/:id/payout/calculate",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "{ totalEarnings: number; orders: number; payoutAmount: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1237
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/drivers/{id}/payout/calculate"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/stores/stats/top-performers",
        "auth_guard": "",
        "dto_in": "@Query: number",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1249
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stores/stats/top-performers"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/stores/:id/orders-history",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1255
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/stores/{id}/orders-history"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/vendors/:id/settlements-history",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1267
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/vendors/{id}/settlements-history"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/vendors/:id/financials",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ totalRevenue: number; pendingSettlements: number; paidSettlements: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1273
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/vendors/{id}/financials"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/users/:id/wallet-history",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: never[]; balance: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1281
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users/{id}/wallet-history"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/users/:id/orders-history",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1287
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users/{id}/orders-history"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/users/:id/wallet/adjust",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: { amount: number; type: 'credit' | 'debit'; reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1293
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/users/{id}/wallet/adjust"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/drivers/performance",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1305
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/drivers/performance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/stores/performance",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1314
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/stores/performance"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/financial/detailed",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ revenue: number; costs: number; profit: number; breakdown: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1323
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/financial/detailed"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/reports/users/activity",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ activeUsers: number; newUsers: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1332
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/reports/users/activity"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/analytics/overview",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ orders: {}; revenue: {}; users: {}; drivers: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1340
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/analytics/overview"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/analytics/trends",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: number",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1349
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/analytics/trends"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/analytics/comparisons",
        "auth_guard": "",
        "dto_in": "@Query: string, @Query: string, @Query: string, @Query: string",
        "dto_out": "{ period1: {}; period2: {}; difference: {}; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1355
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/analytics/comparisons"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/cms/pages",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1368
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/cms/pages"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/cms/pages",
        "auth_guard": "",
        "dto_in": "@Body: any",
        "dto_out": "{ success: boolean; page: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1374
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/cms/pages"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/cms/pages/:id",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1380
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/cms/pages/{id}"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/emergency/pause-system",
        "auth_guard": "@Roles('superadmin')",
        "dto_in": "@Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; reason: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1388
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/admin/emergency/pause-system"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/emergency/resume-system",
        "auth_guard": "@Roles('superadmin')",
        "dto_in": "",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1398
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/admin/emergency/resume-system"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/export/all-data",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ success: boolean; url: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1407
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/export/all-data"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/import/data",
        "auth_guard": "",
        "dto_in": "@Body: { data: any; type: string }",
        "dto_out": "{ success: boolean; imported: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1413
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/import/data"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/cache/clear",
        "auth_guard": "",
        "dto_in": "@Body: { key?: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1421
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/cache/clear"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/cache/stats",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ keys: number; size: number; hitRate: number; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1427
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/cache/stats"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "GET",
        "path": "/admin/roles",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ data: { id: string; name: string; permissions: never[]; }[]; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1435
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/roles"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "POST",
        "path": "/admin/roles",
        "auth_guard": "",
        "dto_in": "@Body: { name: string; permissions: string[] }",
        "dto_out": "{ success: boolean; role: any; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1441
      },
      "status": "mismatch",
      "issues": [
        "Missing request body/parameters in OpenAPI",
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/roles"
    },
    {
      "route": {
        "module": "admin",
        "controller": "AdminController",
        "method": "PATCH",
        "path": "/admin/roles/:id",
        "auth_guard": "",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\admin\\admin.controller.ts",
        "line": 1447
      },
      "status": "mismatch",
      "issues": [
        "OpenAPI has security but inventory shows no auth guard"
      ],
      "openapi_path": "/admin/roles/{id}"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "POST",
        "path": "/akhdimni/errands",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: CreateErrandDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/entities/errand-order.entity\").ErrandOrder",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 35
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/errands"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "GET",
        "path": "/akhdimni/my-errands",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 45
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/my-errands"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "GET",
        "path": "/akhdimni/errands/:id",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/entities/errand-order.entity\").ErrandOrder",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 55
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/errands/{id}"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "PATCH",
        "path": "/akhdimni/errands/:id/cancel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/entities/errand-order.entity\").ErrandOrder",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 62
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/errands/{id}/cancel"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "POST",
        "path": "/akhdimni/errands/:id/rate",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: RateErrandDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/entities/errand-order.entity\").ErrandOrder",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 69
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/errands/{id}/rate"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "GET",
        "path": "/akhdimni/driver/my-errands",
        "auth_guard": "@Auth(AuthType.FIREBASE), @Roles('driver')",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 78
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/driver/my-errands"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "PATCH",
        "path": "/akhdimni/errands/:id/status",
        "auth_guard": "@Auth(AuthType.FIREBASE), @Roles('driver')",
        "dto_in": "@Param: string, @Body: UpdateErrandStatusDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/entities/errand-order.entity\").ErrandOrder",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 89
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/errands/{id}/status"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "GET",
        "path": "/akhdimni/admin/errands",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: number, @Query: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/services/akhdimni.service\").PaginatedOrdersResult",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 102
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/admin/errands"
    },
    {
      "route": {
        "module": "akhdimni",
        "controller": "AkhdimniController",
        "method": "POST",
        "path": "/akhdimni/admin/errands/:id/assign-driver",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: AssignDriverDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/akhdimni/entities/errand-order.entity\").ErrandOrder",
        "statuses": "",
        "file": "src\\modules\\akhdimni\\akhdimni.controller.ts",
        "line": 114
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/akhdimni/admin/errands/{id}/assign-driver"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/roas/daily",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string, @Query: string",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/roas-daily.entity\").RoasDaily, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/roas-daily.entity\").RoasDaily & Required<{ _id: unknown; }> & { __v: number; })[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 24
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/roas/daily"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/roas/summary",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 37
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/roas/summary"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/roas/by-platform",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ data: any[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 49
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/roas/by-platform"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "POST",
        "path": "/analytics/roas/calculate",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { date: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 61
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/analytics/roas/calculate"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "POST",
        "path": "/analytics/adspend",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: {\r\n      date: string;\r\n      platform: string;\r\n      campaignName: string;\r\n      amount: number;\r\n      impressions?: number;\r\n      clicks?: number;\r\n      conversions?: number;\r\n    }",
        "dto_out": "{ success: boolean; adSpend: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/adspend.entity\").AdSpend, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/adspend.entity\").AdSpend & Required<{ _id: unknown; }> & { __v: number; }; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 72
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/analytics/adspend"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/adspend",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string, @Query: string",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/adspend.entity\").AdSpend, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/adspend.entity\").AdSpend & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 92
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/adspend"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/adspend/summary",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 105
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/adspend/summary"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/kpis",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ orders: any; revenue: any; conversionRate: number; cancellationRate: number; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 119
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/kpis"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/kpis/real-time",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ recentOrders: number; activeOrders: number; timestamp: Date; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 131
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/kpis/real-time"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/kpis/trends",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: 'daily' | 'weekly' | 'monthly'",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 140
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/kpis/trends"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "POST",
        "path": "/analytics/events/track",
        "auth_guard": "",
        "dto_in": "@Body: {\r\n      eventType: string;\r\n      userId?: string;\r\n      source?: string;\r\n      medium?: string;\r\n      campaign?: string;\r\n      metadata?: any;\r\n    }",
        "dto_out": "{ success: boolean; eventId: unknown; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 154
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/analytics/events/track"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/events",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string, @Query: string",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/marketing-event.entity\").MarketingEvent, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/analytics/entities/marketing-event.entity\").MarketingEvent & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 170
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/events"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/events/summary",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ data: any[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 183
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/events/summary"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/funnel/conversion",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ stages: { name: string; count: number; }[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 197
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/funnel/conversion"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/funnel/drop-off",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ dropOffPoints: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 209
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/funnel/drop-off"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/users/growth",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: 'daily' | 'weekly' | 'monthly'",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 220
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/users/growth"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/users/retention",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ retentionRate: number; cohorts: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 231
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/users/retention"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/users/cohort",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "{ cohort: {}; retention: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 240
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/users/cohort"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/revenue/forecast",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ forecast: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 251
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/revenue/forecast"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/revenue/breakdown",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 260
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/revenue/breakdown"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/dashboard-overview",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ revenue: { total: number; growth: number; }; orders: { total: number; growth: number; }; users: { total: number; active: number; new: number; }; drivers: { total: number; active: number; }; stores: { total: number; active: number; }; topMetrics: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 274
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/dashboard-overview"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/cohort-analysis-advanced",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "{ cohorts: never[]; retentionMatrix: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 286
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/cohort-analysis-advanced"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/funnel-analysis",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "{ stages: { name: string; users: number; conversion: number; }[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 295
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/funnel-analysis"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/retention",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "{ period: string; rate: number; byPeriod: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 304
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/retention"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/ltv",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ averageLTV: number; bySegment: never[]; trend: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 313
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/ltv"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/churn-rate",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "{ period: string; rate: number; byPeriod: never[]; reasons: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 322
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/churn-rate"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/geographic-distribution",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "{ byCity: never[]; byRegion: never[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 331
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/geographic-distribution"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/peak-hours",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ byHour: never[]; peakHour: string; byDayOfWeek: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 340
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/peak-hours"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/product-performance",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ topProducts: never[]; slowMoving: never[]; trending: never[]; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 349
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/product-performance"
    },
    {
      "route": {
        "module": "analytics",
        "controller": "AnalyticsController",
        "method": "GET",
        "path": "/analytics/advanced/driver-performance",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ topDrivers: never[]; averageDeliveryTime: number; completionRate: number; }",
        "statuses": "",
        "file": "src\\modules\\analytics\\analytics.controller.ts",
        "line": 361
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/analytics/advanced/driver-performance"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "POST",
        "path": "/auth/firebase/login",
        "auth_guard": "@Public",
        "dto_in": "@Body: FirebaseAuthDto",
        "dto_out": "{ user: { id: any; fullName: any; aliasName: any; email: any; phone: any; profileImage: any; emailVerified: any; classification: any; role: any; addresses: any; defaultAddressId: any; language: any; theme: any; wallet: any; isActive: any; createdAt: any; updatedAt: any; }; token: { accessToken: string; tokenType: string; expiresIn: string; }; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 26
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/auth/firebase/login"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "GET",
        "path": "/auth/me",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ id: any; fullName: any; aliasName: any; email: any; phone: any; profileImage: any; emailVerified: any; classification: any; role: any; addresses: any; defaultAddressId: any; language: any; theme: any; wallet: any; isActive: any; createdAt: any; updatedAt: any; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 34
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/me"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "PATCH",
        "path": "/auth/profile",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: Partial<RegisterDto>",
        "dto_out": "{ user: { id: any; fullName: any; aliasName: any; email: any; phone: any; profileImage: any; emailVerified: any; classification: any; role: any; addresses: any; defaultAddressId: any; language: any; theme: any; wallet: any; isActive: any; createdAt: any; updatedAt: any; }; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 44
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/auth/profile"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "POST",
        "path": "/auth/consent",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: ConsentDto",
        "dto_out": "{ success: boolean; message: string; data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user-consent.entity\").UserConsent; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 58
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/consent"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "POST",
        "path": "/auth/consent/bulk",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: BulkConsentDto",
        "dto_out": "{ success: boolean; message: string; data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user-consent.entity\").UserConsent[]; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 86
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/consent/bulk"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "DELETE",
        "path": "/auth/consent/:type",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: ConsentType, @Body: string",
        "dto_out": "{ success: boolean; message: string; data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user-consent.entity\").UserConsent; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 113
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/consent/{type}"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "GET",
        "path": "/auth/consent/history",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: ConsentType",
        "dto_out": "{ success: boolean; data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user-consent.entity\").UserConsent[]; count: number; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 133
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/consent/history"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "GET",
        "path": "/auth/consent/summary",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ success: boolean; data: any; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 152
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/consent/summary"
    },
    {
      "route": {
        "module": "auth",
        "controller": "AuthController",
        "method": "GET",
        "path": "/auth/consent/check/:type",
        "auth_guard": "UnifiedAuthGuard, @Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: ConsentType",
        "dto_out": "{ success: boolean; data: { consentType: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/dto/consent.dto\").ConsentType; hasActiveConsent: boolean; }; }",
        "statuses": "",
        "file": "src\\modules\\auth\\auth.controller.ts",
        "line": 166
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/auth/consent/check/{type}"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "GET",
        "path": "/cart",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 38
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "POST",
        "path": "/cart/items",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: AddToCartDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 45
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/items"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "PATCH",
        "path": "/cart/items/:productId",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: UpdateCartItemDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 55
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/items/{productId}"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "DELETE",
        "path": "/cart/items/:productId",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 66
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/items/{productId}"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "DELETE",
        "path": "/cart",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 76
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "PATCH",
        "path": "/cart/note",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: AddNoteDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 83
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/note"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "PATCH",
        "path": "/cart/delivery-address",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: AddDeliveryAddressDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").Cart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 90
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/delivery-address"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "GET",
        "path": "/cart/count",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ count: number; }",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 100
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/count"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "GET",
        "path": "/cart/shein",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 110
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "POST",
        "path": "/cart/shein/items",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: AddToSheinCartDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 117
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein/items"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "PATCH",
        "path": "/cart/shein/items/:sheinProductId",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: UpdateSheinCartItemDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 127
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein/items/{sheinProductId}"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "DELETE",
        "path": "/cart/shein/items/:sheinProductId",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 142
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein/items/{sheinProductId}"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "DELETE",
        "path": "/cart/shein",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 152
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "PATCH",
        "path": "/cart/shein/shipping",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: UpdateSheinShippingDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 159
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein/shipping"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "PATCH",
        "path": "/cart/shein/note",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: AddNoteDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCart",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 169
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/shein/note"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "GET",
        "path": "/cart/combined",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ regularCart: { items: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/cart.entity\").CartItem[]; total: number; itemsCount: number; }; sheinCart: { items: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/cart/entities/shein-cart.entity\").SheinCartItem[]; subtotal: number; shipping: number; serviceFee: number; total: number; itemsCount: number; }; grandTotal: number; }",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 181
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/combined"
    },
    {
      "route": {
        "module": "cart",
        "controller": "CartController",
        "method": "DELETE",
        "path": "/cart/combined/clear-all",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\cart\\cart.controller.ts",
        "line": 214
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/cart/combined/clear-all"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/banners",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 35
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/banners"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/banners/:id/click",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 41
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/banners/{id}/click"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/banners",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateBannerDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/banner.entity\").Banner",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 48
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/banners"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/admin/banners",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 60
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/admin/banners"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "PATCH",
        "path": "/content/banners/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateBannerDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/banner.entity\").Banner",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 69
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/banners/{id}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "DELETE",
        "path": "/content/banners/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 78
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/banners/{id}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/stores/:storeId/sections",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 90
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/stores/{storeId}/sections"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/sections",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Body: CreateStoreSectionDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/store-section.entity\").StoreSection",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 96
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/sections"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "PATCH",
        "path": "/content/sections/:id",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Body: UpdateStoreSectionDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/store-section.entity\").StoreSection",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 104
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/sections/{id}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "DELETE",
        "path": "/content/sections/:id",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 115
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/sections/{id}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/subscription-plans",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 126
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/subscription-plans"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/subscription-plans",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateSubscriptionPlanDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/subscription.entity\").SubscriptionPlan",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 132
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/subscription-plans"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/subscribe",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: SubscribeDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/subscription.entity\").UserSubscription",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 141
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/subscribe"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/my-subscription",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/subscription.entity\").UserSubscription | null",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 152
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/my-subscription"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "PATCH",
        "path": "/content/my-subscription/cancel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { reason: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/subscription.entity\").UserSubscription",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 160
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/content/my-subscription/cancel"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/pages",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "(import(\"mongoose\").FlattenMaps<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/banner.entity\").Banner> & Required<{ _id: import(\"mongoose\").FlattenMaps<unknown>; }> & { __v: number; })[]",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 173
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/pages"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/pages/:slug",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/banner.entity\").Banner, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/content/entities/banner.entity\").Banner & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 179
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/pages/{slug}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/admin/pages",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: any",
        "dto_out": "{ success: boolean; message: string; page: any; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 185
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/content/admin/pages"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "PATCH",
        "path": "/content/admin/pages/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 194
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/admin/pages/{id}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/app-settings",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "{ maintenanceMode: boolean; allowRegistration: boolean; minAppVersion: string; forceUpdate: boolean; supportWhatsapp: string; supportEmail: string; socialMedia: { twitter: string; instagram: string; facebook: string; }; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 205
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/app-settings"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "PATCH",
        "path": "/content/admin/app-settings",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: any",
        "dto_out": "{ success: boolean; message: string; settings: any; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 211
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/content/admin/app-settings"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "GET",
        "path": "/content/faqs",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ data: { question: string; answer: string; category: string; order: number; }[]; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 222
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/faqs"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "POST",
        "path": "/content/admin/faqs",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: any",
        "dto_out": "{ success: boolean; message: string; faq: any; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 228
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/content/admin/faqs"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "PATCH",
        "path": "/content/admin/faqs/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 237
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/admin/faqs/{id}"
    },
    {
      "route": {
        "module": "content",
        "controller": "ContentController",
        "method": "DELETE",
        "path": "/content/admin/faqs/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\content\\content.controller.ts",
        "line": 246
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/content/admin/faqs/{id}"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateDriverDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 32
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/available",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver[]; pagination: { nextCursor: string | null; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 40
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/available"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/:id",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 47
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/{id}"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "PATCH",
        "path": "/drivers/location",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: UpdateLocationDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 54
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/location"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "PATCH",
        "path": "/drivers/availability",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: boolean",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 65
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/drivers/availability"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/profile",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 78
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/profile"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "PATCH",
        "path": "/drivers/profile",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: any",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/driver/entities/driver.entity\").Driver",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 86
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/drivers/profile"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/earnings",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ totalEarnings: number; ordersCount: number; averagePerOrder: number; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 99
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/earnings"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/earnings/daily",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ earnings: number; ordersCount: number; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 111
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/earnings/daily"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/earnings/weekly",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ earnings: number; ordersCount: number; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 119
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/earnings/weekly"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/statistics",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ totalOrders: number; completedOrders: number; cancelledOrders: number; totalEarnings: number; averageRating: number; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 129
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/statistics"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/documents/upload",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: {\r\n      type: string;\r\n      fileUrl: string;\r\n      expiryDate?: string;\r\n    }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 139
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/drivers/documents/upload"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/documents",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ documents: any; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 155
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/documents"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/vacations/request",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: {\r\n      startDate: string;\r\n      endDate: string;\r\n      type: string;\r\n      reason?: string;\r\n    }",
        "dto_out": "{ success: boolean; message: string; requestId: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 165
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/drivers/vacations/request"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/vacations/my",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 182
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/vacations/my"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "PATCH",
        "path": "/drivers/vacations/:id/cancel",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 190
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/vacations/{id}/cancel"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/vacations/balance",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ annual: number; sick: number; used: number; remaining: number; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 201
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/vacations/balance"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/vacations/policy",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ annualLeave: number; sickLeave: number; emergencyLeave: number; rules: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 209
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/vacations/policy"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/withdrawals/request",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: { amount: number; method: string; accountInfo: any }",
        "dto_out": "{ success: boolean; message: string; requestId: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 219
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/drivers/withdrawals/request"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/withdrawals/my",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 235
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/withdrawals/my"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/withdrawals/:id/status",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Param: string",
        "dto_out": "{ status: string; amount: number; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 243
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/withdrawals/{id}/status"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/orders/available",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 256
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/orders/available"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/orders/:id/accept",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 264
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/orders/{id}/accept"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/orders/:id/reject",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 275
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/orders/{id}/reject"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/orders/:id/start-delivery",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 287
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/orders/{id}/start-delivery"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/orders/:id/complete",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 298
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/orders/{id}/complete"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "GET",
        "path": "/drivers/orders/history",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: never[]; pagination: { nextCursor: null; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 309
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/drivers/orders/history"
    },
    {
      "route": {
        "module": "driver",
        "controller": "DriverController",
        "method": "POST",
        "path": "/drivers/issues/report",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('driver')",
        "dto_in": "@Body: { type: string; description: string; orderId?: string }",
        "dto_out": "{ success: boolean; message: string; issueId: string; }",
        "statuses": "",
        "file": "src\\modules\\driver\\driver.controller.ts",
        "line": 322
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/drivers/issues/report"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/employees",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateEmployeeDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/employee.entity\").Employee",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 35
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/employees"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/employees",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 43
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/employees"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/employees/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/employee.entity\").Employee",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 51
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/employees/{id}"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "PATCH",
        "path": "/er/employees/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateEmployeeDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/employee.entity\").Employee",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 59
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/employees/{id}"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/attendance/check-in",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Body: { location?: { lat: number; lng: number } }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/attendance.entity\").Attendance",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 72
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/er/attendance/check-in"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/attendance/check-out",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Body: { location?: { lat: number; lng: number } }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/attendance.entity\").Attendance",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 82
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/er/attendance/check-out"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/attendance/:employeeId",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Query: number, @Query: number",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 92
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/attendance/{employeeId}"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/leave-requests",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Body: CreateLeaveRequestDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/leave-request.entity\").LeaveRequest",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 106
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/leave-requests"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "PATCH",
        "path": "/er/leave-requests/:id/approve",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/leave-request.entity\").LeaveRequest",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 116
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/leave-requests/{id}/approve"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "PATCH",
        "path": "/er/leave-requests/:id/reject",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/leave-request.entity\").LeaveRequest",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 127
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/leave-requests/{id}/reject"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/payroll/generate",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { employeeId: string; month: number; year: number }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/payroll.entity\").Payroll",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 140
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/er/payroll/generate"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "PATCH",
        "path": "/er/payroll/:id/approve",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/payroll.entity\").Payroll",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 150
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/payroll/{id}/approve"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "PATCH",
        "path": "/er/payroll/:id/mark-paid",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: { transactionRef: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/payroll.entity\").Payroll",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 161
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/payroll/{id}/mark-paid"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/accounts",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateChartAccountDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/chart-of-accounts.entity\").ChartOfAccounts",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 174
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/accounts"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/accounts",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 182
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/accounts"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/accounts/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/chart-of-accounts.entity\").ChartOfAccounts",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 190
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/accounts/{id}"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "POST",
        "path": "/er/journal-entries",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateJournalEntryDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/journal-entry.entity\").JournalEntry",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 198
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/journal-entries"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/journal-entries",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string, @Query: string, @Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 209
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/journal-entries"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "PATCH",
        "path": "/er/journal-entries/:id/post",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/er/entities/journal-entry.entity\").JournalEntry",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 227
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/journal-entries/{id}/post"
    },
    {
      "route": {
        "module": "er",
        "controller": "ERController",
        "method": "GET",
        "path": "/er/reports/trial-balance",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\er\\er.controller.ts",
        "line": 238
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/er/reports/trial-balance"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/commissions",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateCommissionDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/commission.entity\").Commission",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 53
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/commissions"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/commissions/my",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 61
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/commissions/my"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/commissions/stats/my",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ pending: { _id: string; total: number; count: number; } | { total: number; count: number; }; approved: { _id: string; total: number; count: number; } | { total: number; count: number; }; paid: { _id: string; total: number; count: number; } | { total: number; count: number; }; }",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 71
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/commissions/stats/my"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/commissions/:id/approve",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/commission.entity\").Commission",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 78
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/commissions/{id}/approve"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/commissions/:id/cancel",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/commission.entity\").Commission",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 86
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/commissions/{id}/cancel"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/payouts/batches",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { commissionIds: string[]; batch: CreatePayoutBatchDto }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/payout-batch.entity\").PayoutBatch",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 96
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/finance/payouts/batches"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/payouts/batches",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: number, @Query: string",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 111
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/payouts/batches"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/payouts/batches/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/payout-batch.entity\").PayoutBatch",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 123
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/payouts/batches/{id}"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/payouts/batches/:id/items",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 131
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/payouts/batches/{id}/items"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/payouts/batches/:id/approve",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: ApprovePayoutBatchDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/payout-batch.entity\").PayoutBatch",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 139
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/payouts/batches/{id}/approve"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/payouts/batches/:id/complete",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: { transactionIds: Record<string, string> }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/payout-batch.entity\").PayoutBatch",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 151
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/payouts/batches/{id}/complete"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/settlements",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateSettlementDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/settlement.entity\").Settlement",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 164
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/settlements"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/settlements/entity/:entityId",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin', 'vendor', 'driver')",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 172
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/settlements/entity/{entityId}"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/settlements/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin', 'vendor', 'driver')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/settlement.entity\").Settlement",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 184
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/settlements/{id}"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/settlements/:id/approve",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: ApproveSettlementDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/settlement.entity\").Settlement",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 192
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/settlements/{id}/approve"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/coupons",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateFinancialCouponDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/financial-coupon.entity\").FinancialCoupon",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 206
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/coupons"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/coupons/validate",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: ValidateCouponDto",
        "dto_out": "{ valid: boolean; message: string; discountAmount?: undefined; couponId?: undefined; code?: undefined; description?: undefined; } | { valid: boolean; discountAmount: number; couponId: unknown; code: string; description: string; message?: undefined; }",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 217
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/coupons/validate"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/coupons",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: boolean",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 227
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/coupons"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/coupons/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateFinancialCouponDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/financial-coupon.entity\").FinancialCoupon",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 235
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/coupons/{id}"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/reconciliations",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { startDate: string; endDate: string; periodType: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/reconciliation.entity\").Reconciliation",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 248
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/finance/reconciliations"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/reconciliations",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 264
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reconciliations"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/reconciliations/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/reconciliation.entity\").Reconciliation",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 272
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reconciliations/{id}"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/reconciliations/:id/actual-totals",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: {\r\n      totalDeposits: number;\r\n      totalWithdrawals: number;\r\n      totalFees: number;\r\n    }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/reconciliation.entity\").Reconciliation",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 280
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reconciliations/{id}/actual-totals"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/reconciliations/:id/issues",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/reconciliation.entity\").Reconciliation",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 296
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reconciliations/{id}/issues"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/reconciliations/:id/issues/:issueIndex/resolve",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Param: number, @Body: { resolution: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/reconciliation.entity\").Reconciliation",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 304
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reconciliations/{id}/issues/{issueIndex}/resolve"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "POST",
        "path": "/finance/reports/daily",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { date: string }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/daily-report.entity\").DailyReport",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 324
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/finance/reports/daily"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/reports/daily/:date",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/daily-report.entity\").DailyReport | null",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 332
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reports/daily/{date}"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "GET",
        "path": "/finance/reports",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 340
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reports"
    },
    {
      "route": {
        "module": "finance",
        "controller": "FinanceController",
        "method": "PATCH",
        "path": "/finance/reports/:id/finalize",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/finance/entities/daily-report.entity\").DailyReport",
        "statuses": "",
        "file": "src\\modules\\finance\\finance.controller.ts",
        "line": 354
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/finance/reports/{id}/finalize"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/node_modules/@nestjs/terminus/dist/health-check/health-check-result.interface\").HealthCheckResult",
        "statuses": "200, 503",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 31
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/liveness",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/node_modules/@nestjs/terminus/dist/health-check/health-check-result.interface\").HealthCheckResult",
        "statuses": "200",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 66
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/liveness"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/readiness",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/node_modules/@nestjs/terminus/dist/health-check/health-check-result.interface\").HealthCheckResult",
        "statuses": "200, 503",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 79
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/readiness"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/advanced",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/node_modules/@nestjs/terminus/dist/health-check/health-check-result.interface\").HealthCheckResult",
        "statuses": "200, 503",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 99
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/advanced"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/startup",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "",
        "statuses": "200, 503",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 132
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/startup"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/detailed",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "",
        "statuses": "200",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 163
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/detailed"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/metrics",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "",
        "statuses": "200",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 227
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/metrics"
    },
    {
      "route": {
        "module": "health",
        "controller": "HealthController",
        "method": "GET",
        "path": "/health/info",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "",
        "statuses": "200",
        "file": "src\\modules\\health\\health.controller.ts",
        "line": 254
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/health/info"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/privacy-policy",
        "auth_guard": "@Public",
        "dto_in": "@Query: string",
        "dto_out": "{ id: unknown; version: string; content: string; effectiveDate: Date; updatedAt: Date; }",
        "statuses": "200, 404",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 36
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/legal/privacy-policy"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/terms-of-service",
        "auth_guard": "@Public",
        "dto_in": "@Query: string",
        "dto_out": "{ id: unknown; version: string; content: string; effectiveDate: Date; updatedAt: Date; }",
        "statuses": "200, 404",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 51
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/legal/terms-of-service"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "POST",
        "path": "/legal/consent",
        "auth_guard": "UnifiedAuthGuard",
        "dto_in": "@Body: RecordConsentDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/user-consent.entity\").UserConsent, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/user-consent.entity\").UserConsent & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "201, 400, 401",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 68
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/consent"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/consent/my",
        "auth_guard": "UnifiedAuthGuard",
        "dto_in": "",
        "dto_out": "(import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/user-consent.entity\").UserConsent, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/user-consent.entity\").UserConsent & Required<{ _id: unknown; }> & { __v: number; })[]",
        "statuses": "200, 401",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 88
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/consent/my"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/consent/check/:type",
        "auth_guard": "UnifiedAuthGuard",
        "dto_in": "@Param: 'privacy_policy' | 'terms_of_service'",
        "dto_out": "{ hasConsent: boolean; requiresUpdate: boolean; currentVersion?: undefined; consentedVersion?: undefined; } | { hasConsent: boolean; requiresUpdate: boolean; currentVersion: string; consentedVersion: string | undefined; }",
        "statuses": "200, 401",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 99
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/consent/check/{type}"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/admin/privacy-policies",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "",
        "dto_out": "(import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/privacy-policy.entity\").PrivacyPolicy, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/privacy-policy.entity\").PrivacyPolicy & Required<{ _id: unknown; }> & { __v: number; })[]",
        "statuses": "200, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 115
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/privacy-policies"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "POST",
        "path": "/legal/admin/privacy-policy",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "@Body: CreatePrivacyPolicyDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/privacy-policy.entity\").PrivacyPolicy, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/privacy-policy.entity\").PrivacyPolicy & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "201, 400, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 127
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/privacy-policy"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "PATCH",
        "path": "/legal/admin/privacy-policy/:id/activate",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/privacy-policy.entity\").PrivacyPolicy, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/privacy-policy.entity\").PrivacyPolicy & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 140
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/privacy-policy/{id}/activate"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/admin/terms-of-service",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "",
        "dto_out": "(import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/terms-of-service.entity\").TermsOfService, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/terms-of-service.entity\").TermsOfService & Required<{ _id: unknown; }> & { __v: number; })[]",
        "statuses": "200, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 153
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/terms-of-service"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "POST",
        "path": "/legal/admin/terms-of-service",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "@Body: CreateTermsOfServiceDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/terms-of-service.entity\").TermsOfService, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/terms-of-service.entity\").TermsOfService & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "201, 400, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 165
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/terms-of-service"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "PATCH",
        "path": "/legal/admin/terms-of-service/:id/activate",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/terms-of-service.entity\").TermsOfService, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/legal/entities/terms-of-service.entity\").TermsOfService & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 178
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/terms-of-service/{id}/activate"
    },
    {
      "route": {
        "module": "legal",
        "controller": "LegalController",
        "method": "GET",
        "path": "/legal/admin/consent/statistics",
        "auth_guard": "UnifiedAuthGuard, RolesGuard, @Roles(UserRole.ADMIN, UserRole.SUPERADMIN)",
        "dto_in": "",
        "dto_out": "{ privacyPolicyConsents: number; termsOfServiceConsents: number; uniqueUsers: number; }",
        "statuses": "200, 401, 403",
        "file": "src\\modules\\legal\\legal.controller.ts",
        "line": 191
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/legal/admin/consent/statistics"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/profile",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/marketer.entity\").Marketer, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/marketer.entity\").Marketer & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 26
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/profile"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "PATCH",
        "path": "/marketer/profile",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Body: any",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/marketer.entity\").Marketer, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/marketer.entity\").Marketer & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 34
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/marketer/profile"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "POST",
        "path": "/marketer/onboarding",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Body: {\r\n      storeName: string;\r\n      ownerName: string;\r\n      phone: string;\r\n      email?: string;\r\n      address: any;\r\n      type: 'store' | 'vendor' | 'driver';\r\n    }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 47
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/marketer/onboarding"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/onboarding/my",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Query: string",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 66
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/onboarding/my"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/onboarding/:id",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 77
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/onboarding/{id}"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "POST",
        "path": "/marketer/quick-onboard",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Body: { phone: string; storeName: string; location: any }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 87
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/marketer/quick-onboard"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "POST",
        "path": "/marketer/referrals/generate-code",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ code: string; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 100
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/referrals/generate-code"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/referrals/my",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/referral-event.entity\").ReferralEvent, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/referral-event.entity\").ReferralEvent & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 108
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/referrals/my"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/referrals/statistics",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ total: number; successful: number; pending: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 116
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/referrals/statistics"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/stores/my",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 126
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/stores/my"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/stores/:id",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "{ store: {}; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 134
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/stores/{id}"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/stores/:id/performance",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "{ orders: number; revenue: number; rating: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 142
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/stores/{id}/performance"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/vendors/my",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/onboarding.entity\").Onboarding & Required<{ _id: unknown; }> & { __v: number; })[]; total: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 160
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/vendors/my"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/vendors/:id",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "{ vendor: {}; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 168
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/vendors/{id}"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/commissions/my",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Query: string",
        "dto_out": "{ data: never[]; total: number; totalAmount: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 178
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/commissions/my"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/commissions/statistics",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ total: number; pending: number; paid: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 189
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/commissions/statistics"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/commissions/pending",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ data: never[]; total: number; totalAmount: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 197
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/commissions/pending"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/overview",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ marketer: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/marketer.entity\").Marketer, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/marketer/entities/marketer.entity\").Marketer & Required<{ _id: unknown; }> & { __v: number; }; stats: { totalOnboardings: number; totalReferrals: number; totalEarnings: number; }; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 207
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/overview"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/statistics/today",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ onboardings: number; earnings: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 215
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/statistics/today"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/statistics/month",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ onboardings: number; earnings: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 223
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/statistics/month"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/earnings",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Query: string, @Query: string",
        "dto_out": "{ totalEarnings: number; totalCommissions: number; bonuses: number; breakdown: never[]; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 233
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/earnings"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/earnings/breakdown",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ byType: never[]; byMonth: never[]; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 245
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/earnings/breakdown"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "POST",
        "path": "/marketer/files/upload",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Body: { fileUrl: string; type: string; relatedTo?: string }",
        "dto_out": "{ success: boolean; fileId: string; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 255
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/marketer/files/upload"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/files",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 266
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/files"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/notifications",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 276
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/notifications"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "PATCH",
        "path": "/marketer/notifications/:id/read",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 284
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/notifications/{id}/read"
    },
    {
      "route": {
        "module": "marketer",
        "controller": "MarketerController",
        "method": "GET",
        "path": "/marketer/territory/stats",
        "auth_guard": "@Auth(AuthType.MARKETER_JWT)",
        "dto_in": "",
        "dto_out": "{ territory: any; stores: number; earnings: number; }",
        "statuses": "",
        "file": "src\\modules\\marketer\\marketer.controller.ts",
        "line": 294
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/marketer/territory/stats"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "POST",
        "path": "/merchant",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateMerchantDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant.entity\").Merchant",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 46
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: boolean",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 55
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin', 'vendor')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant.entity\").Merchant",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 64
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "PATCH",
        "path": "/merchant/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin', 'vendor')",
        "dto_in": "@Param: string, @Body: UpdateMerchantDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant.entity\").Merchant",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 73
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "DELETE",
        "path": "/merchant/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 85
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "POST",
        "path": "/merchant/catalog/products",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateProductCatalogDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/product-catalog.entity\").ProductCatalog",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 97
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/catalog/products"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/catalog/products",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 106
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/catalog/products"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/catalog/products/:id",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/product-catalog.entity\").ProductCatalog",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 112
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/catalog/products/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "PATCH",
        "path": "/merchant/catalog/products/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateProductCatalogDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/product-catalog.entity\").ProductCatalog",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 118
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/catalog/products/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "POST",
        "path": "/merchant/products",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Body: CreateMerchantProductDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant-product.entity\").MerchantProduct",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 132
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/products"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/:merchantId/products",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string, @Query: boolean",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 140
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/{merchantId}/products"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/stores/:storeId/products",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 154
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/stores/{storeId}/products"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "PATCH",
        "path": "/merchant/products/:id",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Body: UpdateMerchantProductDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant-product.entity\").MerchantProduct",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 163
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/products/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "PATCH",
        "path": "/merchant/products/:id/stock",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Body: { quantity: number }",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant-product.entity\").MerchantProduct",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 174
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/products/{id}/stock"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "POST",
        "path": "/merchant/categories",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateMerchantCategoryDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant-category.entity\").MerchantCategory",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 187
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/categories"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/categories",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 196
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/categories"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "PATCH",
        "path": "/merchant/categories/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateMerchantCategoryDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/merchant-category.entity\").MerchantCategory",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 202
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/categories/{id}"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "POST",
        "path": "/merchant/attributes",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateAttributeDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/attribute.entity\").Attribute",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 216
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/attributes"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "GET",
        "path": "/merchant/attributes",
        "auth_guard": "",
        "dto_in": "",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 225
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/attributes"
    },
    {
      "route": {
        "module": "merchant",
        "controller": "MerchantController",
        "method": "PATCH",
        "path": "/merchant/attributes/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateAttributeDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/merchant/entities/attribute.entity\").Attribute",
        "statuses": "",
        "file": "src\\modules\\merchant\\merchant.controller.ts",
        "line": 231
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/merchant/attributes/{id}"
    },
    {
      "route": {
        "module": "metrics",
        "controller": "MetricsController",
        "method": "GET",
        "path": "/metrics",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "",
        "statuses": "200",
        "file": "src\\modules\\metrics\\metrics.controller.ts",
        "line": 11
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/metrics"
    },
    {
      "route": {
        "module": "metrics",
        "controller": "MetricsController",
        "method": "GET",
        "path": "/metrics/json",
        "auth_guard": "@Public",
        "dto_in": "",
        "dto_out": "",
        "statuses": "200",
        "file": "src\\modules\\metrics\\metrics.controller.ts",
        "line": 20
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/metrics/json"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "POST",
        "path": "/notifications",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateNotificationDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/notification.entity\").Notification, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/notification.entity\").Notification & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 37
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "GET",
        "path": "/notifications/my",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/notification.entity\").Notification[]; pagination: { nextCursor: string | null; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 45
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/my"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "POST",
        "path": "/notifications/:id/read",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "(import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/notification.entity\").Notification, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/notification.entity\").Notification & Required<{ _id: unknown; }> & { __v: number; }) | null",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 55
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/{id}/read"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "DELETE",
        "path": "/notifications/:id",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 62
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/{id}"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "POST",
        "path": "/notifications/suppression",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: CreateSuppressionDto",
        "dto_out": "{ success: boolean; message: string; data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/suppression.entity\").NotificationSuppression; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 71
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/suppression"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "GET",
        "path": "/notifications/suppression",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ success: boolean; data: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/suppression.entity\").NotificationSuppression[]; count: number; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 91
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/suppression"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "GET",
        "path": "/notifications/suppression/channels",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ success: boolean; data: { suppressedChannels: import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/notification/entities/suppression.entity\").SuppressionChannel[]; push: boolean; email: boolean; sms: boolean; }; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 104
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/suppression/channels"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "DELETE",
        "path": "/notifications/suppression/:id",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 121
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/suppression/{id}"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "DELETE",
        "path": "/notifications/suppression/channel/:channel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: SuppressionChannel",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 134
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/suppression/channel/{channel}"
    },
    {
      "route": {
        "module": "notification",
        "controller": "NotificationController",
        "method": "GET",
        "path": "/notifications/suppression/stats",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ success: boolean; data: any; }",
        "statuses": "",
        "file": "src\\modules\\notification\\notification.controller.ts",
        "line": 152
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/notifications/suppression/stats"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderCqrsController",
        "method": "POST",
        "path": "/orders-cqrs",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: CreateOrderDto",
        "dto_out": "{ success: boolean; message: string; data: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order-cqrs.controller.ts",
        "line": 45
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderCqrsController",
        "method": "PATCH",
        "path": "/orders-cqrs/:id/status",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateOrderStatusDto",
        "dto_out": "{ success: boolean; message: string; data: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order-cqrs.controller.ts",
        "line": 77
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs/{id}/status"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderCqrsController",
        "method": "POST",
        "path": "/orders-cqrs/:id/assign-driver",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: { driverId: string }",
        "dto_out": "{ success: boolean; message: string; data: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order-cqrs.controller.ts",
        "line": 102
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs/{id}/assign-driver"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderCqrsController",
        "method": "POST",
        "path": "/orders-cqrs/:id/cancel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "{ success: boolean; message: string; data: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order-cqrs.controller.ts",
        "line": 122
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs/{id}/cancel"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderCqrsController",
        "method": "GET",
        "path": "/orders-cqrs/:id",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; data: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order-cqrs.controller.ts",
        "line": 148
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderCqrsController",
        "method": "GET",
        "path": "/orders-cqrs",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\order\\order-cqrs.controller.ts",
        "line": 161
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: CreateOrderDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "201, 400, 401",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 34
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/my-orders",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/common/utils/pagination.helper\").PaginationResult<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order>",
        "statuses": "200, 401",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 48
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 62
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/orders-cqrs"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/assign-driver",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string, @Body: { driverId: string }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 401",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 71
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/notes",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string, @Body: { note: string }",
        "dto_out": "{ success: boolean; note: { body: string; visibility: \"public\" | \"internal\"; byRole: any; byId: any; createdAt: Date; }; }",
        "statuses": "200, 404, 401",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 94
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/notes",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ notes: Note[]; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 116
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/vendor-accept",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 403, 400",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 125
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/vendor-cancel",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 403",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 140
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/pod",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string, @Body: { imageUrl: string; signature?: string; notes?: string }",
        "dto_out": "{ success: boolean; }",
        "statuses": "200, 404, 403",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 164
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/pod",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ proofOfDelivery: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 190
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/cancel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 400",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 199
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/return",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: { reason: string }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 404, 400",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 215
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/rate",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: { rating: number; comment?: string }",
        "dto_out": "{ success: boolean; rating: number; comment: string | undefined; }",
        "statuses": "200, 404, 400",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 233
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/repeat",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "201, 404, 400",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 251
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "PATCH",
        "path": "/:id/admin-status",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string, @Body: { status: string; reason?: string }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 267
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/export",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Query: string, @Query: string, @Query: string",
        "dto_out": "{ total: number; orders: { id: import(\"mongoose\").FlattenMaps<unknown>; userName: any; userPhone: any; driverName: any; status: string; totalAmount: number | undefined; createdAt: any; }[]; }",
        "statuses": "200, 401",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 278
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/tracking",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ orderId: import(\"mongoose\").FlattenMaps<unknown>; status: string; statusHistory: import(\"mongoose\").FlattenMaps<StatusHistory>[]; driver: { name: any; phone: any; location: any; } | null; estimatedDeliveryTime: any; deliveryAddress: import(\"mongoose\").FlattenMaps<Address> | undefined; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 296
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/schedule",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string, @Body: { scheduledDate: string }",
        "dto_out": "{ success: boolean; message: string; order: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/order/entities/order.entity\").Order & Required<{ _id: unknown; }> & { __v: number; }; }",
        "statuses": "200, 404, 400",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 303
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/public/:id/status",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ status: string; updatedAt: any; estimatedDelivery: any; }",
        "statuses": "200, 404",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 319
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/live-tracking",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ orderId: unknown; status: string; driver: { id: any; name: any; phone: any; currentLocation: any; rating: any; } | null; estimatedArrival: any; lastUpdate: Date; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 330
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/driver-eta",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ orderId: unknown; estimatedMinutes: number; estimatedArrivalTime: Date; distance: number; driverLocation: any; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 337
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "POST",
        "path": "/:id/update-location",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string, @Body: { lat: number; lng: number }",
        "dto_out": "{ success: boolean; message: string; location: { lat: number; lng: number; }; timestamp: Date; }",
        "statuses": "200, 404, 403",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 344
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/route-history",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ orderId: string; route: never[]; totalDistance: number; duration: number; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 360
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "order",
        "controller": "OrderController",
        "method": "GET",
        "path": "/:id/delivery-timeline",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ orderId: unknown; events: { status: string; timestamp: any; description: string; }[]; }",
        "statuses": "",
        "file": "src\\modules\\order\\order.controller.ts",
        "line": 367
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/orders/{id}"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "GET",
        "path": "/promotions/by-placement",
        "auth_guard": "",
        "dto_in": "@Query: GetPromotionsByPlacementDto",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 31
      },
      "status": "missing_fields",
      "issues": [
        "Missing request body/parameters in OpenAPI"
      ],
      "openapi_path": "/promotions/by-placement"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "POST",
        "path": "/promotions/:id/click",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 37
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions/{id}/click"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "POST",
        "path": "/promotions/:id/conversion",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 44
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions/{id}/conversion"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "POST",
        "path": "/promotions",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreatePromotionDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/promotion/entities/promotion.entity\").Promotion",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 53
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "GET",
        "path": "/promotions",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: boolean",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 65
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "GET",
        "path": "/promotions/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/promotion/entities/promotion.entity\").Promotion",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 74
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions/{id}"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "PATCH",
        "path": "/promotions/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdatePromotionDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/promotion/entities/promotion.entity\").Promotion",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 83
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions/{id}"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "DELETE",
        "path": "/promotions/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 95
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions/{id}"
    },
    {
      "route": {
        "module": "promotion",
        "controller": "PromotionController",
        "method": "GET",
        "path": "/promotions/stats/overview",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "{ active: any; inactive: any; ctr: number; conversionRate: number; }",
        "statuses": "",
        "file": "src\\modules\\promotion\\promotion.controller.ts",
        "line": 105
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/promotions/stats/overview"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "POST",
        "path": "/stores",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateStoreDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 18
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores",
        "auth_guard": "@Public",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store & Required<{ _id: unknown; }> & { __v: number; })[]; pagination: { nextCursor: any; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 26
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/:id",
        "auth_guard": "@Public",
        "dto_in": "@Param: string",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 33
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "POST",
        "path": "/stores/products",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Body: CreateProductDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/product.entity\").Product, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/product.entity\").Product & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 40
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/products"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/:id/products",
        "auth_guard": "@Public",
        "dto_in": "@Param: string, @Query: CursorPaginationDto",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/product.entity\").Product, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/product.entity\").Product & Required<{ _id: unknown; }> & { __v: number; })[]; pagination: { nextCursor: any; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 47
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}/products"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "PATCH",
        "path": "/stores/:id",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin', 'vendor')",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/store.entity\").Store & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 54
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/:id/statistics",
        "auth_guard": "@Public",
        "dto_in": "@Param: string",
        "dto_out": "{ totalOrders: number; totalRevenue: number; averageRating: number; totalProducts: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 62
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}/statistics"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "PATCH",
        "path": "/stores/products/:id",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/product.entity\").Product, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/store/entities/product.entity\").Product & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 69
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/products/{id}"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/:id/reviews",
        "auth_guard": "",
        "dto_in": "@Param: string, @Query: CursorPaginationDto",
        "dto_out": "{ data: never[]; total: number; averageRating: number; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 78
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/stores/{id}/reviews"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/:id/analytics",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Query: string, @Query: string",
        "dto_out": "{ totalOrders: number; totalRevenue: number; averageOrderValue: number; topProducts: never[]; revenueByDay: never[]; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 84
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}/analytics"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/products/:id/variants",
        "auth_guard": "",
        "dto_in": "@Param: string",
        "dto_out": "{ data: never[]; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 95
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/stores/products/{id}/variants"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "POST",
        "path": "/stores/products/:id/variants",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string, @Body: any",
        "dto_out": "{ success: boolean; message: string; variant: any; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 101
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/products/{id}/variants"
    },
    {
      "route": {
        "module": "store",
        "controller": "StoreController",
        "method": "GET",
        "path": "/stores/:id/inventory",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Param: string",
        "dto_out": "{ totalProducts: number; lowStock: number; outOfStock: number; products: { id: unknown; name: string; stock: any; price: number; }[]; }",
        "statuses": "",
        "file": "src\\modules\\store\\store.controller.ts",
        "line": 108
      },
      "status": "missing_fields",
      "issues": [
        "Missing security/authentication in OpenAPI"
      ],
      "openapi_path": "/stores/{id}/inventory"
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "GET",
        "path": "/me",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ defaultAddress: any; fullName: string; aliasName?: string | undefined; email?: string | undefined; phone?: string | undefined; profileImage: string; emailVerified: boolean; classification: string; negativeRatingCount: number; role: string; addresses: Address[]; defaultAddressId?: import(\"mongoose\").Types.ObjectId | undefined; isVerified: boolean; isBanned: boolean; authProvider: string; firebaseUID?: string | undefined; favorites: import(\"mongoose\").Types.ObjectId[]; language: string; theme: string; notifications: NotificationPreferences; isActive: boolean; isBlacklisted: boolean; pushToken?: string | undefined; wallet: Wallet; security: Security; transactions: Transaction[]; notificationsFeed: NotificationItem[]; lastLoginAt?: Date | undefined; _id: unknown; $locals: Record<string, unknown>; $op: \"save\" | \"validate\" | \"remove\" | null; $where: Record<string, unknown>; baseModelName?: string | undefined; collection: import(\"mongoose\").Collection<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/node_modules/bson/bson\").Document>; db: import(\"mongoose\").Connection; errors?: import(\"mongoose\").Error.ValidationError | undefined; id?: any; isNew: boolean; schema: import(\"mongoose\").Schema<any, import(\"mongoose\").Model<any, any, any, any, any, any>, {}, {}, {}, {}, import(\"mongoose\").DefaultSchemaOptions, { [x: number]: unknown; [x: symbol]: unknown; [x: string]: unknown; }, import(\"mongoose\").Document<unknown, {}, import(\"mongoose\").FlatRecord<{ [x: number]: unknown; [x: symbol]: unknown; [x: string]: unknown; }>, {}, import(\"mongoose\").ResolveSchemaOptions<import(\"mongoose\").DefaultSchemaOptions>> & import(\"mongoose\").FlatRecord<{ [x: number]: unknown; [x: symbol]: unknown; [x: string]: unknown; }> & Required<{ _id: unknown; }> & { __v: number; }>; }",
        "statuses": "200, 401, 404",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 30
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "PATCH",
        "path": "/me",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: UpdateUserDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 401, 400",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 40
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "GET",
        "path": "/addresses",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ addresses: Address[]; defaultAddressId: import(\"mongoose\").Types.ObjectId | undefined; }",
        "statuses": "200, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 54
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "POST",
        "path": "/addresses",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: AddAddressDto",
        "dto_out": "{ message: string; addresses: Address[]; }",
        "statuses": "201, 400, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 63
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "PATCH",
        "path": "/addresses/:addressId",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string, @Body: Partial<AddAddressDto>",
        "dto_out": "",
        "statuses": "200, 404, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 77
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "DELETE",
        "path": "/addresses/:addressId",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; addresses: Address[]; }",
        "statuses": "200, 404, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 93
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "POST",
        "path": "/addresses/:addressId/set-default",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; defaultAddressId: import(\"mongoose\").Types.ObjectId; }",
        "statuses": "200, 404, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 107
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "DELETE",
        "path": "/deactivate",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ message: string; }",
        "statuses": "200, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 121
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "GET",
        "path": "/search",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: string, @Query: CursorPaginationDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/common/utils/pagination.helper\").PaginationResult<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/auth/entities/user.entity\").User>",
        "statuses": "200, 401, 403",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 130
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "POST",
        "path": "/pin/set",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: SetPinDto",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "200, 400",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 149
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "POST",
        "path": "/pin/verify",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: VerifyPinDto",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "200, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 171
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "POST",
        "path": "/pin/change",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { oldPin: string; newPin: string; confirmNewPin: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "200, 401, 400",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 193
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "GET",
        "path": "/pin/status",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ hasPin: boolean; isLocked: boolean | undefined; lockedUntil: Date | null | undefined; attemptsRemaining: number; }",
        "statuses": "200, 401",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 213
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "user",
        "controller": "UserController",
        "method": "DELETE",
        "path": "/pin/reset/:userId",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "200, 404, 401, 403",
        "file": "src\\modules\\user\\user.controller.ts",
        "line": 225
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "GET",
        "path": "/utility/options",
        "auth_guard": "",
        "dto_in": "@Query: string",
        "dto_out": "{ city: string; gas: { cylinderSizeLiters: number; pricePerCylinder: number; minQty: number; deliveryPolicy: \"flat\" | \"strategy\"; flatFee: number | null; } | null; water: { sizes: import(\"mongoose\").FlattenMaps<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/utility/entities/utility-pricing.entity\").WaterSize>[]; allowHalf: boolean; halfPolicy: string; deliveryPolicy: \"flat\" | \"strategy\"; flatFee: number | null; } | null; }",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 31
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/options"
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "POST",
        "path": "/utility/calculate-price",
        "auth_guard": "",
        "dto_in": "@Body: CalculateUtilityPriceDto",
        "dto_out": "{ productPrice: number; deliveryFee: number; total: number; breakdown: { size?: string | undefined; half?: boolean | undefined; quantity?: number | undefined; serviceType: \"gas\" | \"water\"; city: string; }; }",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 37
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/calculate-price"
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "POST",
        "path": "/utility/pricing",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateUtilityPricingDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/utility/entities/utility-pricing.entity\").UtilityPricing",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 45
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/pricing"
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "GET",
        "path": "/utility/pricing",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "",
        "dto_out": "any[]",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 54
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/pricing"
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "GET",
        "path": "/utility/pricing/:city",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/utility/entities/utility-pricing.entity\").UtilityPricing",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 63
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/pricing/{city}"
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "PATCH",
        "path": "/utility/pricing/:city",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string, @Body: UpdateUtilityPricingDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/utility/entities/utility-pricing.entity\").UtilityPricing",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 72
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/pricing/{city}"
    },
    {
      "route": {
        "module": "utility",
        "controller": "UtilityController",
        "method": "DELETE",
        "path": "/utility/pricing/:city",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Param: string",
        "dto_out": "{ message: string; }",
        "statuses": "",
        "file": "src\\modules\\utility\\utility.controller.ts",
        "line": 84
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/utility/pricing/{city}"
    },
    {
      "route": {
        "module": "vendor",
        "controller": "VendorController",
        "method": "POST",
        "path": "/vendors",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin', 'marketer')",
        "dto_in": "@Body: CreateVendorDto",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\vendor\\vendor.controller.ts",
        "line": 32
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/vendors"
    },
    {
      "route": {
        "module": "vendor",
        "controller": "VendorController",
        "method": "GET",
        "path": "/vendors",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: any[]; pagination: { nextCursor: any; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\vendor\\vendor.controller.ts",
        "line": 40
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/vendors"
    },
    {
      "route": {
        "module": "vendor",
        "controller": "VendorController",
        "method": "GET",
        "path": "/vendors/me",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\vendor\\vendor.controller.ts",
        "line": 48
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/vendors/me"
    },
    {
      "route": {
        "module": "vendor",
        "controller": "VendorController",
        "method": "GET",
        "path": "/vendors/:id",
        "auth_guard": "@Auth(AuthType.JWT)",
        "dto_in": "@Param: string",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\vendor\\vendor.controller.ts",
        "line": 55
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/vendors/{id}"
    },
    {
      "route": {
        "module": "vendor",
        "controller": "VendorController",
        "method": "PATCH",
        "path": "/vendors/me",
        "auth_guard": "@Auth(AuthType.VENDOR_JWT)",
        "dto_in": "@Body: UpdateVendorDto",
        "dto_out": "",
        "statuses": "",
        "file": "src\\modules\\vendor\\vendor.controller.ts",
        "line": 62
      },
      "status": "matched",
      "issues": [],
      "openapi_path": "/vendors/me"
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/balance",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ userId: unknown; balance: number; onHold: number; availableBalance: number; totalSpent: number; totalEarned: number; loyaltyPoints: number; savings: number; currency: string; lastUpdated: Date; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 28
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/transactions",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/common/utils/pagination.helper\").PaginationResult<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction>",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 38
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/transaction",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: CreateTransactionDto",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "201, 400, 403",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 52
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/hold",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { userId: string; amount: number; orderId?: string }",
        "dto_out": "import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; }",
        "statuses": "200, 400, 403",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 65
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/release",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { userId: string; amount: number; orderId?: string }",
        "dto_out": "{ success: boolean; }",
        "statuses": "200, 404, 403",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 79
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/refund",
        "auth_guard": "@Auth(AuthType.JWT), @Roles('admin', 'superadmin')",
        "dto_in": "@Body: { userId: string; amount: number; orderId?: string }",
        "dto_out": "{ success: boolean; }",
        "statuses": "200, 404, 403",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 97
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/topup/kuraimi",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: {\r\n      amount: number;\r\n      SCustID: string;\r\n      PINPASS: string;\r\n    }",
        "dto_out": "{ success: boolean; transaction: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; }; newBalance: number; }",
        "statuses": "200, 400, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 117
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/topup/verify",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { transactionId: string }",
        "dto_out": "{ verified: boolean; transaction: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; }; }",
        "statuses": "200, 404, 400",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 141
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/topup/history",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/common/utils/pagination.helper\").PaginationResult<import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction>",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 155
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/topup/methods",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ methods: { id: string; name: string; enabled: boolean; }[]; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 169
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/withdraw/request",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: {\r\n      amount: number;\r\n      method: string;\r\n      accountInfo: any;\r\n    }",
        "dto_out": "{ success: boolean; message: string; requestId: string; }",
        "statuses": "201, 400, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 180
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/withdraw/my",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: never[]; pagination: { nextCursor: null; hasMore: boolean; limit: number; }; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 205
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "PATCH",
        "path": "/withdraw/:id/cancel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "200, 404, 400",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 219
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/withdraw/methods",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ methods: { id: string; name: string; minAmount: number; maxAmount: number; }[]; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 233
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/coupons/apply",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { code: string; amount?: number }",
        "dto_out": "{ success: boolean; discount: number; message: string; }",
        "statuses": "200, 400",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 244
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/coupons/validate",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { code: string }",
        "dto_out": "{ valid: boolean; discount: number; }",
        "statuses": "200, 400",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 257
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/coupons/my",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 270
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/coupons/history",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: never[]; pagination: { nextCursor: null; hasMore: boolean; limit: number; }; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 279
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/subscriptions/subscribe",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { planId: string; autoRenew?: boolean }",
        "dto_out": "{ success: boolean; message: string; subscriptionId: string; }",
        "statuses": "201, 400",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 295
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/subscriptions/my",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ data: never[]; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 308
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "PATCH",
        "path": "/subscriptions/:id/cancel",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "200, 404",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 317
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/pay-bill",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: {\r\n      billType: string;\r\n      billNumber: string;\r\n      amount: number;\r\n    }",
        "dto_out": "{ success: boolean; transaction: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; }; newBalance: number; }",
        "statuses": "200, 400",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 332
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/bills",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; })[]; pagination: { nextCursor: any; hasMore: boolean; limit: number; }; }",
        "statuses": "200, 401",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 355
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/transfer",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: {\r\n      recipientPhone: string;\r\n      amount: number;\r\n      notes?: string;\r\n    }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 371
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/transfers",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: CursorPaginationDto",
        "dto_out": "{ data: (import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; })[]; pagination: { nextCursor: any; hasMore: boolean; limit: number; }; }",
        "statuses": "",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 392
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/transaction/:id",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Param: string",
        "dto_out": "{ transaction: import(\"mongoose\").Document<unknown, {}, import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction, {}, {}> & import(\"D:/Bthwani Project/backend/bthwani-backend-nest/src/modules/wallet/entities/wallet-transaction.entity\").WalletTransaction & Required<{ _id: unknown; }> & { __v: number; }; }",
        "statuses": "",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 404
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/refund/request",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Body: { transactionId: string; reason: string }",
        "dto_out": "{ success: boolean; message: string; }",
        "statuses": "",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 414
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/events",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "@Query: number, @Query: number",
        "dto_out": "{ message: string; userId: string; }",
        "statuses": "200",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 430
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/audit",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ message: string; userId: string; }",
        "statuses": "200",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 446
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "POST",
        "path": "/replay",
        "auth_guard": "@Auth(AuthType.FIREBASE), @Roles('admin')",
        "dto_in": "@Body: { userId: string }",
        "dto_out": "{ message: string; userId: string; }",
        "statuses": "200",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 458
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    },
    {
      "route": {
        "module": "wallet",
        "controller": "WalletController",
        "method": "GET",
        "path": "/statistics",
        "auth_guard": "@Auth(AuthType.FIREBASE)",
        "dto_in": "",
        "dto_out": "{ message: string; userId: string; }",
        "statuses": "200",
        "file": "src\\modules\\wallet\\wallet.controller.ts",
        "line": 471
      },
      "status": "undocumented",
      "issues": [
        "Route not found in OpenAPI specification"
      ]
    }
  ]
}